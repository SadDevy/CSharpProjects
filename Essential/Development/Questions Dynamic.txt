Что такое статическая типизация? Что такое static-binding?
  Вид типизиции, когда типы проверяются на стадии компиляции программы.
  Связывание - процесс соотношения идентификаторов типов (членов типа, операций) с логическими частями программы, представляющими соответствующие типы.
  При статическом связывании этот процесс происходит на этапе компиляции. Если процесс завершается неудачей, то происходит ошибка компиляции.
  К примеру, есть следующий код Person p = ...; p.Born(); 
  Компилятор выполнит связывание метода, который не принимает параметры или с необязательными параметрами, или методом расширения, где первый параметр - параметр типа Person.
  Если такой возможности нет, то будет ошибка на этапе компиляции.

Что такое динамическая типизация? Что такое dynamic-binding?
  Вид типизации, когда типы проверяются на стадии выполнения программы.
  Связывание происходит во время выполнения. Связывание основывается на типе, который преобретает во время выполнения. Компилятор упаковывает выражение таким образом, чтобы связывание можно было осуществить позже, во время выполнения.

Что такое DLR? Для чего применяется?
  Dynamic language runtime (DLR) - среда выполнения, которая добавляет набор сервисов для динамических языков в CLR.
  DLR делает проще запуск динамических языков на .Net Framework и добавляет дополнительные возможности для статически типизированных языков.
  Также, DLR добавляет динамические объекты в C# и VB для поддержки динамического поведения в этих языках и делает их совместимыми с динамическими языками.
  DLR помогает создават библиотеки, которые поддерживают динамические операции.
  
Из чего состоит DLR?
  DLR:
    1) Expression Trees - используются для представления связей в языке. DLR расширяет Linq выражения включая поток управления, назначение и другие узлы моделей языка.
    2) Call site caching. Динамический call site - место в коде, где выполняются операции (например, +) над динамическими объектами. DLR сохраняет имена объектов и операцию. Если такая операция выполнялась раньше, то DLR извлекает всю необходимую информацию их кэша.
    3) Dinamic object interoperability. DLR предоставляет набор классов и интерфейсов, которые представляют динамические объектыи операции и может быть использованы в реализациях языка и авторами библиотек.

В чем отличие между object и dynamic?
  Отличие состоит в том, что операции, которые содержат dynamic выражение не разрешаются и не проверяются компиляторов. Компилятор упаковывает информацию об операции, которая позже используется для вычисления операции во время выполнения.

В чем отличие между var и dynamic?
  При использовании var тип разрешается компиляторов на этапе компиляции. При использовании dynamic - на этапе выполнения.
  Переменные, объявленные как var статически типизированы, как dynamic - динамически.
  Переменные var должны быть инициализированы после объявления, dynamic - не обязательно.
  Var не может быть использовано для свойств или для возвращаемого из метода значения.

Что такое ExpandoObject? Как применяется?
  ExpandoObject - класс, который позволяет добавлять и удалять члены его экземпляров во время выполнения, а так же устанавливать и получать эти значения.
  Класс поддерживает dynamic binding.
  Реалиует стандартный DLR интерфейс IDynamicMetaObjectProvider, который позволяет делиться экземплярами класса между языками, что поддерживает совместимость модели.
  Создание: dynamic sampleObject = new ExpandoObject();
  Добавление новых членов: sampleObject.test = "Dynamic Property";
  Добавление методов: sampleObject.number = 10; sampleObject.Increment = (Action)(() => { sampleObject.number++; });
  Удаление: dynamic employee = new ExpandoObject(); employee.Name = "John Smith"; ((IDictionary<String, Object>)employee).Remove("Name");
  Перечисление: 
        dynamic employee = new ExpandoObject();
	employee.Name = "John Smith";
	employee.Age = 33;

	foreach (var property in (IDictionary<String, Object>)employee)
	{
    		Console.WriteLine(property.Key + ": " + property.Value);
	}

Что такое DynamicObject? Как применяется?
  DynamicObject - базовый класс для динамического поведения во время выполнения. Класс должен быть унаследован. Экземпляр не может создаваться непосредственно.
  Класс позволяет определить операции, которые могут быть выполнены над динамическими объектами и как они могут быть выполнены.
  Чтобы использовать динамическое поведение, DynamicObject необходимо унаследовать, т.к. невозможно создать его экземпляр напрямую.
    public class SampleDynamicObject : DynamicObject {}  
    //...  
    dynamic sampleObject = new SampleDynamicObject (); 

Что такое Expession Trees?
  Expression Trees - используются для представления связей в языке. DLR расширяет Linq выражения включая поток управления, назначение и другие узлы моделей языка.