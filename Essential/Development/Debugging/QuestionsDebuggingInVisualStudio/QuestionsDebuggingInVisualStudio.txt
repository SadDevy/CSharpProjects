1) Перечислите все способы (окна, и т.д.), которыми можно увидеть значение переменной во время отладки.
  a) Проверка переменных с помощью подсказок по данным.
    Приостановив работу в отладчике, навести указатель мыши на объект, чтобы просмотреть его значение свойства по умолчанию.
  b) Проверка переменных с помощью окон "Видимые" и "Локальные".
    Во время отладки взглянуть на окно Видимые в нижней части редактора кода.
    Взглянуть в окно Локальные. В окне Локальные показаны переменные, которые находятся в текущей области.
  c) Установка контрольного значения.
    В окне Контрольное значение можно указать переменную (или выражение), которую необходимо отслеживать.
  d) Наблюдение за одной переменной или выражением с помощью быстрой проверки
    Для наблюдения за одной переменной можно использовать параметр Быстрая проверка.
  e) Просмотр значений с помощью String Visualizer dialog box.
    - JSON visualizer.
    - XML visualizer.
    - HTML visualizer.
  f) Проверить значение переменной с помощью Быстрой проверки.

2) Перечислите все способы (где и как?), которыми можно изменить значение переменной во время отладки.
  a) Изменение значений с помощью окон "Видимые" или "Локальные".
    Чтобы изменить значения переменных в окнах "Видимые" или "Локальные" необходимо сделать дабл-клик по значению и ввести новое.
  b) Изменение кода и продолжение отладки.
    Необходимо щелкнуть код, чтобы установить в нем курсор, когда отладчик остановлен, внести изменения и нажать F5, F10 или F11.
  c) Изменение значений с помощью окна Immediate.
  d) Изменения с помощью подсказок по данным.
    Наведя, во время отладки, на переменную, и кликнув по ее значению два раза, можно записать новое значение.

3) Где и как во время отладки можно изменить размер массива без изменения исходников?
  Размер массива во время отладки можно изенять при помощи Immediate Window (ctrl+alt+i).
  Изменять следующим образом => i = new int[7];

4) Как можно отладить участок кода, который не выполняется при обычном сценарии работы приложения?
  Отладить такой участок кода можно с помощью обработки исключений (try/catch).
  Можно сообщить отладчику, чтобы он сломался при выбросе исклчюения, изучив исключение, до вызова обработчика.
  Можно сообщить отладчику продолжить работу по необработанным исключениям.

5) Во время выполнения приложения, приостановить его работу, сделать скриншот окна CallStack и объяснить стек выполнения приложения с параметрами методов.
  - Используйте приложение из задания Practice Debugging in Visual Studio (Part B)#Debuggingtechniquesandtoolstohelpyouwritebettercode

  В окне Стек вызовов показан порядок вызова методов и функций. В верхней строке приведена текущая функция (Assert). Во второй строке показано, что функция Assert была вызвана из метода UpdateRcords.
  В третьей строке - метод UpdateRecords был вызван из метода Main.

6) Как отладить приложение, которое запущено не из VisualStudio?
  Для приложения, которое не существует в Visual Studio, обычным способом отладки является запуск приложения за пределами Visual Studio, а затем присоединение к нему с помощью функции присоединения к процессу в отладчике Visual Studio (ctrl+alt+p).
  
7) Чем полезны точки останова? Если цикл крутится очень много раз, что может помочь, чтобы точка останова "не срабатывала на каждой итерации"?
  Точки останова помогают выполнять программу пошагово начиная с остановки в определенном месте (breakpoint).
  В случае, если цикл крутится много раз, помочь, чтобы точка останова не срабатывала на каждой итерации может условие точки останова (breakpoint condition).

8) Что нужно сделать во время отладки, чтобы изменить значение строковой переменной (например, осталась только "вторая половина строки") без изменения исходников?
  Значение строковой переменной можно изменить с помощью добавления контрольного значения или с помощью подсказок по данным (п.2). 

9) Зачем нужны .pdb файлы?
  - Почему они важны для отладки?

  .Pdb файл содержит информацию о состоянии отладки и проект, позволяющие выполнять инкрементную компоновку отладочной конфигурации приложения. Отладчик Visual Studio использует .pdb файлы, чтобы определить два ключевых момента во время отладки:
    - Источник файла имя и номер строки для отображения в Интегрированной среде разработки Visual Studio.
    - Где в приложении, чтобы остановить для точки останова.
  Отладчик загружает только PDB-файлы, которые точно соответствуют PDB-файлам, созданным при построении приложения (то есть исходный .pdb файлы или копии). Это точное дублирование является необходимым, поскольку макет приложения можно изменить, даже если сам код не изменился.

10) Созданная утилита по резервному копированию файлов "просто падает при указании пути на диске Z".
  - Какие есть способы, чтобы отладить такую ситуация, если на машине разработчика нет диска Z?
  - О чём нужно сообщить тестировщикам?

  Если на машине разработчика нет такого диска, то можно использовать дистанционную отладку проекта.
  Чтобы отладить приложение Visual Studio, развернутое на другом компьютере, необходимо установить и запустить удаленные инструменты на компьютере, где вы развернули приложение, назначить проект для подключения к удаленному компьютеру из Visual Studio, а затем запустите приложение.
  В некоторых сценариях наиболее эффективным может быть запуск удаленного отладчика от общего файла.


11) Какие ключевые шаги при отладке "ошибки"?
  a) Проанализировать проблему.
    Ответить на вопросы:
      - Что именно должен был выполнить код?
      - Что произошло вместо этого?
  b) Проверить свои предположения.
    - Возможно, используемый вами API работает не так, как вы ожидаете. 
    - Даже если вы выбрали нужный API, он может использоваться неправильно.
    - Некоторые опечатки, например ошибки в написании имени переменной, могут быть незаметными, особенно при работе с языками, в которых не требуется объявление переменных перед их использованием.
    - Если были внесены изменения, то как они могут быть связаны с возникшей проблемой.
    - Как правило, отладка кода, написанного другим разработчиком, дается гораздо сложнее. Если это не ваш код, возможно, для его эффективной отладки вам потребуется изучить, что он делает.
  c) Использовать режим пошагового выполнения во время отладки для поиска места возникновения проблемы.
    
12) Что полезного в tracepoints?
  Tracepoints позволяют выводить трассировочную информацию без модификации исходного кода.
  Если установить флажок Continue Execution, то отладчик не будет прекращать выполнение программы при проходе через контрольную точку.
  В поле "Print a message" диалогового окна можно обращаться к любому коду, к которому вы бы могли получить доступ в той строке кода, где установлена контрольная точка.

13) Как создать и применять ObjectID? Чем это удобно?
  Создать идентификатор объекта можно в окнах Watch правым кликом мыши и вобором Make ObjectId.
  Идентификатор объекта позволяет управляемому отладчику следить за объектом в любом месте кучи, независимо от контекста.
  Таким образом, если вам необходимо наблюдать локальную переменную из метода на двадцать элементов выше стека, создайте идентификатор объекта для этого объекта, и вы будете видеть реальное значение переменной независимо от того, где вы находитесь.

14) Какие горячие клавиши у ключевых операций отладки?
  Create Breakpoint => F9
  Breakpoints => CTRL+ALT+B
  QuickWatch => Shift+F9
  Autos => CTRL+ALT+V, A
  Locals => CTRL+ALT+V, L
  Call Stack => CTRL+ALT+C
  Immediate => CTRL+ALT+I
  Memory => CTRL+ALT+M, (1, 2, 3, 4)
  Watch => CTRL+ALT+W, (1, 2, 3, 4)
  Exception Settings => CTRL+ALT+E

15) Во время отладки установите переменной, содержащей строку данных, значение null. 
  - Сделайте скриншоты до и после изменения значения (в виде .jpg или .png файлов, расположите их рядом с .txt файлом с ответами).
  - Обратить к методу этой переменной. Что произошло?

  Png-файл Screen_Task15. В результате обращение к null переменной получили исключение 
    System.NullReferenceException: 'Object reference not set to an instance of an object.'
  
