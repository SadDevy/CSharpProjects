Часть A.

Ответьте на следующие вопросы в текстовом файле (.txt, UTF-8):
  1) Что такое TDD?
    Парадигма test-driven development - заключается в написании тестов до реализации функционала (red-green-refactor).

    - Чем отличается от написания тестов?
      Отличие от написания тестов в том, что TDD является документированием бизнес-требований, которое позволяет ориентироваться в коде (не используя комментариев).
      Написание тестов происходит до реализации функционала (red), после этого происходит покрытие тестов (green) и реализация функционала (refactor).

  2) Из каких шагов состоят "итерации" разработки согласно TDD?
    Три шага итерации разработки red-green-refactor:
    - red - написание тестов, как требований к функционалу;
    - green - покрытие тестов;
    - refactor - реализация функционала.  

  3) В чём польза TDD?
    TDD позволяет быть уверенным в том, что код не "сломается" при внесении изменений, описать требования, предъявляемые к функциональности.

    - Почему TDD работает?
      TDD работает, поскольку позволяет экономить время на перспективе, позволяет быть уверенным в коде (clean code that works).

  4) Что может помочь в освоение TDD?
    В освоении TDD могут помочь регулярные упражнения (kata).

  5) Что такое TDD Kata?
    TDD kata - регулярные упражнения (30 мин в день), которые позволят сломать ментальные барьеры при использовании этой практики.

    - Для чего они нужны? 
      Kata необходимы, чтобы лучше понять какую-либо новую технологию. Регулярные упражнения позволяют делать что-либо на уровне мышечной памяти.

    - За какое время оно должно выполняться? 
      Оно должно выполнять в течении 30 мин в день (в течении одной или двух недель). После этого можно выбрать новую kata.

    - Как этого добиться?
      Регулярными тренировками.

Часть B.

Изложите в том же текстовом файле 5-7 интересных, полезных и важных мыслей/идей, которые вы узнали из увиденного видео выполнения TDD Kata.
  1) TDD позволяет сократить время и усилия при разработке проекта на перспективе.
  2) TDD необходимо приенять обдуманно и только тогда, когда это необходимо.
  3) TDD позволяют представить бизнес-требования к функциональности в виде тестов.
  4) TDD можно использовать как замену комментариям при коммуникации в проекте.
  5) TDD спасет от большого количества багов и позволить быть уверенным в том, что код не сломается при внесении изменений.