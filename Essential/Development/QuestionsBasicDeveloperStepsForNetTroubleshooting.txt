1. Почему важно научиться базовым подходам (приёмам) в отладке "проблем, которые появляются при разработке"?
  Приемы хорошо изучены и понятны. Они помогут собрать всю необходимую информацию о проблеме и найти решение проблемы.

2. Какие приёмы изменения "мышления" предлагает автор статьи? Чем они полезны?
  1) Не расстраивайтесь - остановиться и отдохнуть (поможет разобраться в проблеме).
  2) Не поднимайте красный флаг - если есть время, не нужно просить помощи сразу, а лучше попробовать разобраться самому.
  3) Понять, что ты не особенный - есть большая вероятность того, что кто-то уже столкнулся с твоей проблемой.
  4) Не винить компилятор - есть большая вероятность того, что ошибки в программе существуют не по вине компилятора.
  5) Использовать свой опыт - возможно вы уже встречались с подобной ошибкой. Можно использовать прошлый опыт для ее решения.

3. Что такое RTFM? Что такое RTFEM? Чем полезен stack trace?
  Прочтите сообщение об исключении - в большинстве случаев сообщение исключения дает понять, что не так в программе.
  Stack trace полезен тем, что можно понять, в каком месте вызвано исключение (иногда одна случается одна ошибка,
которая затем вызывает "вторичную ошибку", которая может вводить в заблуждение). Stack trace помогает 
посмотреть цепочку вызовов. Вы можете использовать трассировку стека, чтобы сузить 
область, где может возникнуть проблема, и попытаться отследить первопричину.

4. Что такое "цепочка вложенных исключений"? Зачем в неё смотреть?
  Каждое внутреннее исключение может иметь собственное внутреннее исключение. Посмотрите на всю цепочку и их 
внутренние сообщения / следы стека. Это действительно может помочь вам определить, в чем проблема.

5. Какие приёмы помогают при составление текста для поиска в Google/Yandex, когда вы ищете информацию о вашей проблеме?
  Поместите сообщения об исключении в свою любимую поисковую систему и посмотрите, что появится.
    1) Удалите значения, специфичные для приложения, такие как имена переменных или буквальные строковые значения. 
    2) Добавьте «слова-подсказки» - например, если бы это произошло в приложении MVC, добавьте «MVC» в запрос. 
  Это может помочь сузить область поиска.
    3) Не сдавайтесь после первого поиска - то, что первое попадание - не совсем ответ, не означает, что ответа нет. 
  Измените запрос, чтобы увидеть, можно ли получить другие результаты.

6. В чём суть "метода утёнка"?
  Отладка резиновой утки - довольно известная стратегия, в которой вы притворяетесь, что задаете свой вопрос 
резиновой утке, и, поскольку вы вынуждены замедлиться и задать утку… вы в конечном итоге отвечаете на свой вопрос.
Отойдите на секунду от клавиатуры и подумайте об ошибке, которую вы видите. 

7. Что общего в "разворачивании стека вывозов" и решением проблем?
  Стек просматривается по шагам, проблема тоже решается по шагам.

8. Чем вам может помочь "отладчик"? Когда вам может помочь "отладчик"?
  Поместите точку останова в строку кода, генерирующую исключение. Используйте различные окна отладки в Visual 
Studio, чтобы посмотреть значения переменных поблизости. Особенно, если вы получаете что-то вроде исключения 
NullReferenceException, вы можете довольно быстро выяснить, что такое null, а что может вызывать проблемы.

9. Как можно пройтись отладчиком по исходному коду MS .NET и сторонних библиотек? Что для этого нужно сделать?
  Многие популярные пакеты NuGet размещают пакеты символов / исходных текстов на SymbolSource.org. 
Если вы настроили Visual Studio для использования этих пакетов, вы можете перейти к их источнику. 
Вы также можете перейти в исходный код платформы Microsoft .NET (настройка SymbolSource включает оба сценария).

10. Чем и когда вам может помочь "декомпилятор"?
  Если вы не можете перейти к стороннему источнику, попробуйте просмотреть сторонний материал в декомпиляторе, 
таком как Reflector, JustDecompile, dotPeek или ILSpy. Вы можете использовать трассировку стека, чтобы сузить 
область, где может возникнуть проблема, и попытаться отследить первопричину. Возможно, вы не получите точной 
линии, но она значительно сузит ее.

11. Когда следует делать "маленький пример" для воспроизведения проблемы? Чем это может помочь?
  Обычно безумные вещи, которые трудно отладить, случаются в большой сложной системе, и выяснение того, 
почему это происходит, может показаться непосильным. Попробуйте создать репродукцию небольшого отдельного 
проекта. Это во многом похоже на отладку «резиновой утки», но дает вам немного больше конкретной информации. 
По мере того, как вы работаете над созданием репродукции, становится легче визуализировать количество движущихся 
частей. Если вы можете легко воспроизвести проблему в меньшей среде, вы можете устранить неполадки с гораздо 
меньшим количеством движущихся частей, и это проще, чем делать это в сложной среде. Затем вы можете передать 
эту информацию в более крупную систему. Если вы не можете легко воспроизвести проблему, то, по крайней мере, 
вы знаете, в чем проблема. Иногда это может быть так же полезно, как знать, в чем проблема.

12. Что вам поможет составить понятный и "толковый" вопрос о вашей проблеме?
  Полученная информация при использовании прошлых пунктов может помочь составить понятный и толковый вопрос.

13. Что полезного и интересного вы узнали из этого задания (темы)?