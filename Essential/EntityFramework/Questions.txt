1. Что такое EF?
  Entity Framework представляет специальную объектно-ориентированную технологию на базе фреймворка .NET для работы с данными. 
Если традиционные средства ADO.NET позволяют создавать подключения, команды и прочие объекты для взаимодействия с базами данных, 
то Entity Framework представляет собой более высокий уровень абстракции, который позволяет абстрагироваться от самой базы данных 
и работать с данными независимо от типа хранилища.

2. Что такое EDM?
  Модель EDM - ядро EF. Суть модель заключается в хранении сущностей в виде строго типизированных классов, а не в виде
объектов схемы базы даннгых. EDM позволяет обеспечить связь между сущностными классами в коде и таблицами базы данных.

3) Что такое CSDL?
  Классы с кодом сущностей содержатся в рабочем слое, в котором работают программисты.
Conceptual Shema Definition Language - язык для описания синтаксиса рабочего слоя.

4) Что такое SSDL?
  Удаленный слой определяет таблицы, столбцы, строки, отношения между таблицами базы данных. Синтаксис удленного
слоя описывается с помощью языка Store Shema Definition Language.

5) Что такое MSL?
  Связующий слой определяет соответствие между рабочим и удаленным слоями, он связывает свойства сущностного класса
в рабочем слое со столбцами таблицы базы данных в удаленном слое. Язык Mapping Specification Language определяет
синтаксис связующего слоя.

6) Какие преимущества применения EF?
  EF реализует три подхода разработки: Database-First (для проектировщиков БД), Model-First (для архитекторов проекта),
Code-First (для программистов).
Для решения задач требуется меньше кода, не нужно писать Sql запросы, легко сопровождать.

7) Какие недостатки применения EF (в общем)?
  Sql запросы, генерируемые EF, могут быть неоптимизированы. Можно использовать только один контекст.

8) Какие существуют наиболее частые ошибки применения EF?
  Select N + 1-это анти-шаблон доступа к данным, при котором доступ к базе данных осуществляется 
неоптимальным образом. Это оповещение, по сути, представляет собой комбинацию классического N+1 с более 
чем одним сеансом оповещений на запрос.
  Использование более одного контекста объекта на запрос, как правило, является плохой практикой.
  Запись в базу данных из более чем одного объектного контекста в одном запросе плоха по нескольким причинам.
  Запросы и привязка данных не должны смешиваться.
Даже если предположить, что вы привязываетесь только к одной сущности, ленивая загрузка через привязку 
данных-плохая практика. Вы должны использовать прямую загрузку для загрузки данных заранее, а не 
позволять пользовательскому интерфейсу загружать их наихудшим образом.

9) Какие существуют подходы разработки с применением EF?
  EF реализует три подхода разработки: Database-First (для проектировщиков БД), Model-First (для архитекторов проекта),
Code-First (для программистов).

10) Какие есть приёмы улучшения производительности кода, использующего EF?

11) Какие есть способы загрузки связанных сущностей в EF? Опишите их.
  Отложенная загрузка (lazy loading) заключается в том, что Entity Framework автоматически загружает данные, 
при этом не загружая связанные данные.
  Прямая загрузка данных (eager loading) позволяет указать в запросе какие связанные данные нужно загрузить 
при выполнении запроса
  Явная загрузка, как и отложенная загрузка, не приводит к загрузке всех связанных данных в первом запросе. 
Но при этом, в отличие от отложенной загрузки, при вызове навигационного свойства связанного класса, эта 
загрузка не приводит к автоматическому извлечению связанных данных, вы должны явно вызвать метод Load(), 
если хотите загрузить связанные данные.

12) Что такое Connected модель доступа к данным?
  Для управления соединением, транзакциями, для выборки данных и передачи изменений объекты взаимодействуют 
непосредственно с БД.

13) Что такое Disconnected модель доступа к данным?
  Возможность работать с данными автономно. Взаимодействие с connected объектами происходит с помощью провайдера данных.

14) В чём разница между IEnumerable<T> и IQueryable<T>?
  Интерфейс IEnumerable находится в пространстве имен System.Collections. Объект IEnumerable представляет 
набор данных в памяти и может перемещаться по этим данным только вперед. Запрос, представленный объектом 
IEnumerable, выполняется немедленно и полностью, поэтому получение данных приложением происходит быстро.
При выполнении запроса IEnumerable загружает все данные, и если нам надо выполнить их фильтрацию, то сама 
фильтрация происходит на стороне клиента.
  Интерфейс IQueryable располагается в пространстве имен System.Linq. Объект IQueryable предоставляет 
удаленный доступ к базе данных и позволяет перемещаться по данным как в прямом порядке от начала до конца, 
так и в обратном порядке. В процессе создания запроса, возвращаемым объектом которого является IQueryable, 
происходит оптимизация запроса. В итоге в процессе его выполнения тратится меньше памяти, меньше пропускной 
способности сети, но в то же время он может обрабатываться чуть медленнее, чем запрос, возвращающий объект 
IEnumerable.

15) Какие есть способы узнать какие запросы составляет EF?
  При отладке в окне IntelliTrace.
  Используя метод ToTraceString у объекта ObjectQuery.
  Можно использовать Database.Log:
    context.Database.Log = s => System.Diagnostics.Debug.WriteLine(s);

16) Как выполнить "sql-код напрямую" или хранимую процедуру с помощью EF?
  Для осуществления прямых sql-запросов к базе данных можно воспользоваться свойством Database, которое имеется 
у класса контекста данных. Непосредственно для создания запроса нам надо использовать метод SqlQuery, который 
принимает в качестве параметра sql-выражение. Метод SqlQuery() осуществляет выборку из БД, но кроме выборки нам, 
возможно, придется удалять, обновлять уже существующие или вставлять новые записи. Для этой цели применяется 
метод ExecuteSqlCommand(), который возвращает количество затронутых командой строк

17) Что такое EntityClient?
  EntityClientПоставщик использует ADO.NET классы поставщиков данных для конкретных хранилищ и метаданные 
сопоставления для взаимодействия с моделями данных сущностей. EntityClient преобразует операции, выполняемые 
над концептуальными сущностями, в операции, выполняемые с физическими источниками данных. Он преобразует 
результирующие наборы, возвращаемые из физических источников данных, в концептуальные сущности.

18) Что такое AsNoTracking? Когда его следует применять?
  Метод AsNoTracking() делает запрос LINQ для возврата сущностей, но без добавления их в ChangeTracker. 
Таким образом, эти сущности не отслеживаются и называются Несвязанными сущностями.
  Eсли ChangeTracker содержит или будет содержать только несколько сотен сущностей или меньше, это просто 
не имеет значения.
  Однако если вы возвращаете большое количество сущностей, то можно использовать AsNoTracking 
всякий раз, когда вы выполняете операцию чтения, чтобы отключить эти сущности.

19) В какой момент загружаются данные при работе с ними с помощью EF?
  Отложенная загрузка — это процесс, при котором сущность или коллекция сущностей автоматически загружается из 
базы данных при первом обращении к свойству, ссылающимся на сущность или сущности.
  Можно загрузить связанные сущности с задержкой, но необходимо выполнить явный вызов.

20) Как строятся иерархии с помощью EF?
  При использовании подхода TPH (Table Per Hierarchy / Таблица на одну иерархию классов) для одной иерархии 
классов используется одна таблица. Данные базовых и производных классов сохраняются в одну таблицу, а для их 
отличия создается специальный столбец.
  Code-First создаст дополнительный столбец Discriminator имеющий тип NVARCHAR(128). По умолчанию, Code-First 
будет использовать имя класса каждого типа в иерархии в качестве значения, хранящегося в столбце дискриминатора.
Фактически, с помощью этого столбца Entity Framework отслеживает, какой класс в иерархии наследования использовался 
для изменения/вставки данных в таблицу.

21) Что такое Fluent API?
  Fluent API по большому счету представляет набор методов, которые определяются сопоставление между классами 
и их свойствами и таблицами и их столбцами. Как правило, функционал Fluent API задействуется при переопределении 
метода OnModelCreating.

22) Что такое Миграции?
  Миграции - инструмент, позволяющий хранить различные версии модели в таблице __MigrationHisory.
Для управления миграциями модели в Code-First используется класс DbMigration из пространства имен 
System.Data.Entity.Migrations. Миграции позволяют указать текущую версию модели, показав какие должны 
быть внесены изменения в базу данных.

23) Как организовать связь один к одному?
  При определении отношения один-к-одному в модели данных Entity Framework, вы должны использовать только 
двустороннюю связь между классами, т.е. нужно указывать навигационное свойство в каждой таблице 
(если вы используете Fluent API для настройки, следовать этому правилу необязательно). Эти навигационные 
свойства должны иметь тип ссылки (а не коллекции), чтобы Code-First понял, что используется связь один-к-одному, 
при этом используемой по умолчанию связью, будет ноль-или-один-к-одному.

24) Как организовать связь один к многим?
  Если в одной таблице навигационное свойство имеет тип коллекции C# (например, List<T>), а в другой тип ссылки, 
то Code-First предполагает, что между таблицами создается связь один-ко-многим (one-to-many).

25) Как организовать связь многие ко многим?
  Если в обеих таблицах навигационные свойства имеют тип коллекций, то Code-First предполагает наличие связи 
между ними многие-ко-многим (many-to-many).

26) Что такое DbContext API?
  Главными классами новой упрощенной платформы являются DbContext, DbSet и DbQuery, а интерфейс для работы с 
этими новыми классами называют DbContext API.