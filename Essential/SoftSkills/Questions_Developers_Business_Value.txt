Task A.
Изложите в текстовом файле 5-8 интересных, полезных и важных мыслей/идей, которые вы узнали из Learning Developers Business Value.
	1) Разница уровней разработчиков в их способности влиять на проект.
	2) Если junior'у объяснить, как правильно сделать что-то, то он сделает.
	3) Middle может предложить свои варианты решения, и, получив одобрение, сделает.
	4) Senior спросит, что от него хотят получить, расскажет, как правильно сделать и сделает).
	5) Чтобы быстрее расти в профессии необходимо научиться всегда видеть смысл в работе и не делать ту, смысл который не понимаешь.
	6) Необходимо научиться работать с неопределенностью, т.е. при первой же пробелеме не просить объснить, а попоытать найти решение самому.
	7) Необходимо научиться брать на себя ответственность.
	
Task B.
1) Как ведет себя junior developer? Что оличает junior developer?
	Junior решает несложные задачи. При решении сложных задач находится под контролем более опытного разработчика.
	Код, который пишет junior, проверяется тестировщиками особенно тщательно. 
2) Как ведет себя middle developer? Что оличает middle developer?
	В отличие от Junior должен сам отвечать за свою работу и понимать суть того, что делает.
	Знает, что/кто именно нужно/нужен для достижения цели. Помимо уверенного владения технологиями умеет органично работать в команде.
3) Как ведет себя senior developer? Что оличает senior developer?
	Владеет большим набором языков программирования, распределяет задачи между менее опытными разработчиками. Несет личную ответственность перед заказчиком.
4) Зачем нужно понимать смысл той работы, которую вы делаете?
	Смысл необходимо понимать для того, чтобы иметь возможность с полным пониманием решать подобные задачи в будущем, при этом оптимизируя решения.
5) Что нужно делать, если не понимаете смысл той работы, которую вы делаете?
	Если есть достаточное количество времени, то потратить на более глубокое понимае задачи. Если его нет, обратиться к более опытному разработчику.
6) Зачем нужно учиться работать с неопределенностью?
	Для того, чтобы в любой задаче не ловить стагнацию на ровном месте и пытаться найти решения при тех условиях, что даны.
7) Как нужно себя вести, когда вы попадаете в ситуацию, в которой вам не понятно, что делать?
	Если есть достаточное количество времени, то потратить на более глубокое понимае задачи. Если его нет, обратиться к более опытному разработчику.
8) Как вы понимаете, что такое ответственность?
	Нести ответственность - это при лоюбом исходе (+/-) отвечать за содеянное.
9) Зачем брать на себя ответственность?
	Это необходимо, чтобы никого не обманывать, при этом отвечать всегда за то, что ты сделал.