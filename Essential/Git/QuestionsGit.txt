1) Что такое системы контроля версий?
  Система контроля версий - система, записывающая изменения в файл или набор файлов в течении времени и позволяющая вернуться позже к определенной версии.
 - Зачем они нужны? Какие задачи они решают? 
  СКВ позволяют вернуть файлы к состоянию, в котором они были до изменений, вернуть проект к исходному состоянию, увидеть изменения, 
  увидеть, кто последний менял что-то, кто поставил задачу и когда.

2) Какие возможности предоставляют системы контроля версий?
  а) Возврат к любой версии кода из прошлого.
  б) Просмотр истории изменений.
  в) Совместная работа без боязни потерять данные или затереть чужую работу.
 
3) Чем отличаются распределённые (децентрализованные) системы контроля версий (DVCS) от централизованных (client-sever) систем контроля версий?
  Централизованные СКВ используют единый сервер, содержащий все версии файлов, и некоторое количество клиентов, которые получают файлы из этого централизованного хранилища.
  Такие системы имеют единую точку отказа, представленная централизованным сервером. Если этот сервер выйдет из строя, то никто не сможет использовать контроль версий для сохранения изменений.
  
  При использовании распределенных СКВ клиенты не просто скачивают снимок всех файлов - они полностью копируют репозиторий.
  В этом случае, если один из серверов, через который разработчики обменивались данными, умрет, любой клиентский репозиторий может быть скопирован на другой сервер для продолжения работы.
  Каждая копия репозитория является полным бэкапом всех данных.

4) Что такое репозиторий (repository)?
  Репозиторий - набор файлов и директорий, которые находятся под контролем версий.

5) Что такое рабочая копия проекта (working copy)?
  Набор файлов, с которым мы работает в данный момент, называется рабочей копией.

6) Что такое ревизия (revision)?
  Любое зафиксированное изменение в системе контроля версий называется ревизией. Фиксация изменений создаёт ревизию, но сама ревизия может содержать внутри себя либо дельту изменений, либо снимок.

7) Что такое "коммит" (commit)?
  В СКВ для кода процесс создания ревизии называется фиксацией (commit; разг. коммит).
  
 - Зачем нужно описание коммита? 
  Правильное описание коммитов позволяет построить такую историю проекта, которую легко читать и понимать.

8) Что такое stage area (или index, или область подготовленных файлов)?
  Stage area -  это файл, обычно располагающийся в Git-директории, в нём содержится информация о том, какие изменения попадут в следующий коммит.

9) Чем отличаются snapshot-based от diff-based системы контроля версий?
  Diff-based СКВ представляют хранимую информацию в виде набора файлов и изменений, сделанных в каждом файле, по времени. Это позволяет экономить место на диске, но вносит дополнительную сложность при работе с файлами.
  
  Snapshot-based СКВ не хранят и не обрабатывают данные таким способом. Вместо этого, подход к хранению данных похож на набор снимков миниатюрной файловой системы.
  В Git каждый раз, когда происходит коммит, система запоминает, как выглядит каждый файл в этот момент, и сохраняет ссылку на этот снимок.

10) Что такое отмена? (подумайте какие есть варианты)
  В любой момент может понадобиться что-либо отменить.
  Отмена может потребоваться, если вы сделали коммит слишком рано, например, забыв добавить какие-то файлы или комментарий к коммиту. 
  Варианты:
    a) Если необходитмо переделать коммит => git commit --amend (команда использует область подготовки для внесения правок в коммит).
    б) Отмена индексации файла => git reset HEAD <file> (для исключения из индекса).
    в) Отмена изменений в файе => git checkout -- <file>.

11) Что такое ветки (branch)?
  Ветка - новое развитие исходного кода. Только что инициализированный репозиторий имеет одну ветку - master. Ее не нужно специально выбирать.
  Причины использования: 
    а) Одновременная поддержка нескольких версий.
    б) Работа над задачами в ветках не блокирует возможность правок в основной ветке.
  Создание новой ветки => git branch <name>

12) Что такое конфликты (conflict)?
  Конфликт - невозможность системы контроля версий (при слиянии веток) выбрать, какое изменение важнее.
 
 - Как они возникают?
  Например, пусть имеется файл main.c с содержимым:
    int main (void)
    {
      int k = 0;
      return k;
    }

  Находясь на ветке master внесем изменения в этот файл
    double t = 0.1;     

    int main (void)
    {
      int k = 0;
      return k;
    }
  Сохраним изменения в файл и сохраним их в репозиторий.

  Далее, переключаемся на другую ветку (next) и вносим в файл main.c изменения:
    int x = 7;     

    int main (void)
    {
      int k = 0;
      return k;
    }  
  Сохраним изменения в файл и сохраним их в репозиторий.

  Переключимся на ветку master и объединим ветку master с веткой next.
  При объединении появится сообщение о конфликте, т.к. изменения были произведены в одной и той же строке, в одном и том же файле.
   
 - Сколько версий файла при конфликте? Какие это версии? 
   При конфликте 2 версии файла. Версии представляют собой сочетание изменений, внесенных в ветку master и next.

 - Как разрешаются конфликты?
  СКВ не может самостоятельно определить какое изменение важнее и предлагает пользователю самому выбрать как объединить изменения: либо оставить изменения из ветки master, либо изменения из ветки next, или и одно, и другое.  