1. Что такое процесс?
  Проце́сс — выполнение пассивных инструкций компьютерной программы на процессоре ЭВМ. 
Стандарт ISO 9000:2000 Definitions определяет процесс как совокупность взаимосвязанных и 
взаимодействующих действий, преобразующих входящие данные в исходящие.
Компьютерная программа сама по себе — лишь пассивная последовательность инструкций. 
В то время как процесс — непосредственное выполнение этих инструкций.

2. Что такое поток?
  Пото́к выполне́ния (тред; от англ. thread — нить) — наименьшая единица обработки, исполнение которой может 
быть назначено ядром операционной системы. Реализация потоков выполнения и процессов в разных операционных 
системах отличается друг от друга, но в большинстве случаев поток выполнения находится внутри процесса. 
Несколько потоков выполнения могут существовать в рамках одного и того же процесса и совместно использовать 
ресурсы, такие как память, тогда как процессы не разделяют этих ресурсов. В частности, потоки выполнения 
разделяют инструкции процесса (его код) и его контекст (значения переменных, которые они имеют в любой момент 
времени).

3. Где находится "куча"?
  Хранится в оперативной памяти компьютера.

4. Где находится "стек"?
  Хранится в оперативной памяти компьютера. Каждый поток, имеет свой собственный стек потоков. 

5. Что такое concurrency?
   Для каких операций используется многопоточность?

  Параллелизм означает, что приложение выполняет несколько задач одновременно или, по крайней мере, в одно и то
же время (одновременно).
  Если компьютер имеет только один ЦП, приложение не может выполнять более одной задачи в одно и то же время, 
но внутри приложения одновременно выполняется более одной задачи. Чтобы выполнять несколько задач одновременно, 
ЦП переключается между разными задачами во время выполнения.
  Многопоточность имеет наибольший смысл при вызове нескольких (и независимых) операций, связанных с ЦП, 
на многоядерном процессоре. Например, программа, которая независимо анализирует каждый пиксель изображения, 
может разделить изображение на одну полосу для каждого ядра ЦП, а затем одновременно проанализировать каждую 
полосу в собственном потоке.

6. Что такое асинхронность?
   Для каких операций используется асинхронность?

  Асинхронная операция - это операция, которая продолжается в фоновом режиме после того, как была инициирована, 
не заставляя вызывающего абонента ждать ее завершения перед запуском другого кода.
  Если все, что выполняет функция, - это ожидание ответа от жесткого диска, базы данных или веб-службы, или 
даже от камеры или другого USB-устройства, нет необходимости заставлять ЦП быть занятым в ожидании этого 
ответа вместо выполнения полезной работы.
  Вот почему существуют асинхронные операции. Вместо того, чтобы блокировать вызывающую программу (или поток) 
до получения ответа, асинхронная (также называемая неблокирующей) реализация отправит запрос в базу данных или 
веб-службу или что-то еще, а затем немедленно вернется, позволяя вашей программе продолжить выполнение другого 
кода пока удаленная служба отправляет ответ. После получения ответа система запустит обратный вызов (либо в 
вашем цикле сообщений, либо в отдельном потоке порта завершения ввода-вывода, в зависимости от среды), позволяя 
вашему коду обрабатывать ответ.

7. Что такое параллельность?
  Параллельное выполнение - это когда компьютер имеет более одного процессора или ядра процессора и выполняет 
несколько задач одновременно. 
  Термин параллелизм означает, что приложение разбивает свои задачи на более мелкие подзадачи, которые 
могут обрабатываться параллельно, например, на нескольких процессорах в одно и то же время.

8. Что такое разделяемые ресурсы?
  Разделение ресурса — совместное использование несколькими процессами ресурса, когда каждый из 
процессов некоторое время владеет ресурсом.
  Разделяемые ресурсы, которые должны быть доступны в текущий момент времени только одному процессу – 
это так называемые критические ресурсы.

9. Что такое deadlock?
  Подробно опишите в чём проблема.
  Что нужно делать, чтобы избежать deadlock?

  Взаи́мная блокиро́вка (сокращённо взаимоблокировка, англ. deadlock) — ситуация в многозадачной среде или СУБД, 
при которой несколько процессов находятся в состоянии ожидания ресурсов, занятых друг другом, и ни один из них 
не может продолжать свое выполнение.
  Взаи́мная блокиро́вка - это когда два или более потока заблокированы в ожидании получения блокировок, 
которые удерживают другие потоки в тупике. Взаимоблокировка может возникнуть, когда нескольким потокам требуются 
одинаковые блокировки одновременно, но они получают их в разном порядке.
  Например, если поток 1 блокирует A и пытается заблокировать B, а поток 2 уже заблокировал B и пытается 
заблокировать A, возникает взаимоблокировка. Поток 1 никогда не получит B, а поток 2 никогда не получит A. 
Кроме того, ни один из них никогда не узнает. Они навсегда останутся заблокированными для каждого своего объекта, 
A и B. Это тупиковая ситуация.
  Если вы убедитесь, что все блокировки всегда выполняются в одном и том же порядке любым потоком, взаимоблокировки 
не могут возникнуть.
  Другой механизм предотвращения взаимоблокировок - установить тайм-аут для попыток блокировки, что означает, 
что поток, пытающийся получить блокировку, будет пытаться только так долго, прежде чем отказаться. Если потоку 
не удается взять все необходимые блокировки в течение заданного тайм-аута, он выполняет резервное копирование, 
освобождает все взятые блокировки, ожидает произвольное время и затем повторяет попытку. Случайное количество 
времени ожидания служит для того, чтобы дать другим потокам, пытающимся воспользоваться теми же блокировками, 
шанс снять все блокировки и, таким образом, позволить приложению продолжить работу без блокировок.

10. Что такое race condition?
  Подробно опишите в чём проблема.

  Состояние гонки (англ. race condition), также конкуренция — ошибка проектирования многопоточной системы или 
приложения, при которой работа системы или приложения зависит от того, в каком порядке выполняются части кода. 
Своё название ошибка получила от похожей ошибки проектирования электронных схем (см. Гонки сигналов).
  Термин состояние гонки относится к инженерному жаргону и появился вследствие неаккуратного дословного перевода 
английского эквивалента. В более строгой академической среде принято использовать термин неопределённость 
параллелизма.
  Состояние гонки — «плавающая» ошибка (гейзенбаг), проявляющаяся в случайные моменты времени и «пропадающая» 
при попытке её локализовать.
  Если два или более потока совместно используют объект и более одного потока обновляют переменные в этом 
общем объекте, могут возникнуть условия гонки.
  Представьте, что поток A считывает счетчик переменных общего объекта в свой кэш ЦП. Представьте также, 
что поток B делает то же самое, но в другой кэш ЦП. Теперь поток A добавляет единицу для подсчета, и поток 
B делает то же самое. Теперь var1 был увеличен дважды, по одному разу в каждом кэше ЦП.
  Если бы эти приращения выполнялись последовательно, счетчик переменных был бы увеличен дважды, и исходное 
значение + 2 было бы записано обратно в основную память.
  Однако два приращения были выполнены одновременно без надлежащей синхронизации. Независимо от того, какой 
из потоков A и B записывает свою обновленную версию счетчика обратно в основную память, обновленное значение 
будет только на 1 выше исходного значения, несмотря на два приращения.    

11. Что такое критическая секция?
  Критическая секция — участок исполняемого кода программы, в котором производится доступ к общему 
ресурсу (данным или устройству), который не должен быть одновременно использован более чем одним 
потоком выполнения. При нахождении в критической секции двух (или более) потоков возникает состояние 
«гонки» («состязания»). Во избежание данной ситуации необходимо выполнение четырех условий:
    Два потока не должны одновременно находиться в критических областях.
    В программе не должно быть предположений о скорости или количестве процессоров.
    Поток, находящийся вне критической области, не может блокировать другие потоки.
    Невозможна ситуация, в которой поток вечно ждет попадания в критическую область.

12. Что такое "пул потоков"? Зачем он нужен?
  Пул потоков - это потоки пула, которые можно «повторно использовать» для выполнения задач, так что каждый поток 
может выполнять более одной задачи. Пул потоков - это альтернатива созданию нового потока для каждой задачи, 
которую необходимо выполнить.
  Создание нового потока связано с накладными расходами на производительность по сравнению с повторным 
использованием уже созданного потока. Вот почему повторное использование существующего потока для выполнения 
задачи может привести к более высокой общей пропускной способности, чем создание нового потока для каждой задачи.
  Кроме того, использование пула потоков может упростить контроль за тем, сколько потоков одновременно активно. 
Каждый поток потребляет определенное количество ресурсов компьютера, таких как память (RAM), поэтому, если у 
вас слишком много активных потоков одновременно, общий объем потребляемых ресурсов (например, RAM) может 
привести к замедлению работы компьютера - например если потребляется столько ОЗУ, что операционная система 
(ОС) начинает выгружать ОЗУ на диск.