1) Что такое S (первая буква SOLID)?
  S - принцип единой ответственности, т.е. поле, метод или класс должены предназначаться строго для одной цели.
2) Что такое O (вторая буква SOLID)?
  O - принцип открытости/закрытости, т.е. класс должен быть закрыт для модификации, но открыт для расширения.
3) Что такое L (третья буква SOLID)?
  L - принцип подстановки Лисков, т.е. функции, имеющие ссылки на базовые классы, 
      должны иметь возможность использовать обхекты производных.
4) Что такое I (четвертая буква SOLID)?
  I - принцип разделения интерфейсов, т.е. лучше иметь несколько маленьких интерфейсов, служащих одной цели,
      чем один большой, где все смешано.
5) Что такое D (пятая буква SOLID)?
  D - принцип инверсии зависимостей, т.е. модули верхних уровней не должны зависеть от модулей нижних уровней,
      модули обоих уровней должны зависеть от абстракций, абстракции не должны зависеть от деталей,
      детали должны зависеть от абстракций.
6) Чем может помочь разработчику знание и понимае SOLID?
  Знание SOLID может помочь писать простой и структурированный код.
7) К чему приводит чрезмерное применение SRP?
  Чрезмерное применение SRP приводит к тому, что код разрастается до больших размеров и его становится труднее читать.
8) К чему приводит чрезмерное применение OCP?
  Чрезмерное применение принципа приводит к большому количество зависимостей от абстракций. Код становится менее понятным
9) К чему приводит чрезмерное применение LSP?
  Из-за того, что функции не нужно знать с объектом какого класса она работает, 
  вопрос выбора переносится на сторону клиента. Если такие функции используеются постоянно, то это усложняет работу.
10) К чему приводит чрезмерное применение ISP?
  Чрезмерное применение этого принципа приводит к образованию интерфейсов, которые не несут в себе практической пользы, как отдельная единица.
11) К чему приводит чрезмерное применение DIP?
  Чрезмерное применение этого принципа приводит к постоянному использованию интерфейсов, вместо конкретных классов даже там, где это не нужно.