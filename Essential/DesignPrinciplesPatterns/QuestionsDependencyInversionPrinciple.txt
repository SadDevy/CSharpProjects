1) Модули верхнего уровня не должны зависеть от модулей нижнего уровня.
   И те, и другие должны зависеть от абстракций. Абстракции не должны зависеть от деталей.
   Детали должны зависеть от абстракций.

2) В основе принципа инверсии зависимостей лежит идея использования интерфейсов.
   Одна группа классов реализует некоторый набор интерфейсов, а другая - принимает эти интерфейсы в качестве аргументов конструктора.

3) Не для всех классов нужно выделять интерфейс, и не все зависимости следует требовать извне в виде интерфейсов.

4) Классы более высокого уровня обычно контролируют процесс создания и передачу управления классам нижних уровенй.

5) Самый простой способ отвязать класс от внешних зависимостей - добавить в него собыие,
   с помощью которого он будет уведомлять всех заинтересованных подписчиков об изменении состояния.
   При этом логически управление будет передано с нижнего уровня на верхний, однако знать о том, что будет
   происходить при вызове этого делегата, текущий класс не будет.

6) Принцип инверсии зависимостей предназначен для устранения прямых связей между класами или модулями с зависимостями более высокого уровня.

7) Классы верхнего уровня вынуждены выступать в роли адаптеров и подстаиваться под протокол, определенный на уровне ниже.

8) Зависеть надо от абстракций. Не должно быть зависимостей от конкретных классов.
   Все связи в программе должны вести на абстрактный класс или интерфейс.

9) Не должно быть переменных, в которых хранятся ссылки на конкретные классы.

10) Не должно быть классов, производных от конкретных классов.

11) Не должно быть методов, переопределяющих метод, реализованных в одном из базовых классов.

