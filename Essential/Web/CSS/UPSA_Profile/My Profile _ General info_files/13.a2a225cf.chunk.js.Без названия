(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[13],{

/***/ "./src/main/resources/static-site/js/widget/showbadges/upsa/v3/WidgetEmployeeBadge.js":
/*!********************************************************************************************!*\
  !*** ./src/main/resources/static-site/js/widget/showbadges/upsa/v3/WidgetEmployeeBadge.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

/*
 * Copyright © 2021 EPAM Systems, Inc. All Rights Reserved. All information contained herein is, and remains the
 * property of EPAM Systems, Inc. and/or its suppliers and is protected by international intellectual
 * property law. Dissemination of this information or reproduction of this material is strictly forbidden,
 * unless prior written permission is obtained from EPAM Systems, Inc
 */
!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require) {
    var DateFormats = __webpack_require__(/*! com/epam/heroes/core/util/DateFormats */ "./src/main/resources/static-site/js/com/epam/heroes/core/util/DateFormats.js");
    var Utils = __webpack_require__(/*! com/epam/heroes/portal/core/util/Utils */ "./src/main/resources/static-site/js/com/epam/heroes/portal/core/util/Utils.js");

    var EmployeeBadge = function EmployeeBadge(badgeData) {
        var allProperties = Object.getOwnPropertyNames(badgeData);

        for (var i = 0; i < allProperties.length; i++) {
            var propertyName = allProperties[i];
            this[propertyName] = badgeData[propertyName];
        }
    };

    EmployeeBadge.prototype = {
        /**
         * @returns {String}
         */
        getBadgeId: function getBadgeId() {
            return this.badge.id;
        },

        /**
         * @returns {Number}
         */
        getBadgeWeight: function getBadgeWeight() {
            return this.badgeWeight;
        },

        /**
         * @returns {String}
         */
        getWeightLabel: function getWeightLabel() {
            return this.badgeWeightLabel;
        },

        /**
         * @returns {Date|String}
         */
        getAssignDate: function getAssignDate() {
            return this.assignmentDateFormatted || this.latestAssignmentDate;
        },

        /**
         * Cuts the comments if it's too long and
         * tells the soy template to put the link to portal there
         *
         * @param {Number} maxLength
         */
        _cutBadgeComment: function _cutBadgeComment(maxLength) {
            var needToCutComment = this.latestComment.length > maxLength;

            if (needToCutComment) {
                this.isCommentCut = needToCutComment;
                this.latestComment = Utils.cutExtraLongString(this.latestComment, maxLength);
            }
        },

        /**
         * Parses date to fromNow pattern
         * @param {String} assignDateFormat
         */
        _formatDate: function _formatDate(assignDateFormat) {
            var unformattedDate = this.getAssignDate();

            this.assignmentDateFormatted = this.assignmentDateFormatted || DateFormats.moment.toDateFromNow(unformattedDate, assignDateFormat);
        },

        /**
         * Parses badge data for popup
         *
         * @param {Number} maxCommentLength
         * @param {String} [assignDateFormat]
         */
        parseBadge: function parseBadge(maxCommentLength, assignDateFormat) {
            this._cutBadgeComment(maxCommentLength);
            this._formatDate(assignDateFormat);
        }
    };

    /**
     * @static
     * @param {Array} badgeArray
     * @returns {Array}
     */
    EmployeeBadge.convertBadgeArray = function (badgeArray) {
        var convertedArray = [];

        for (var i = 0; i < badgeArray.length; i++) {
            convertedArray.push(new EmployeeBadge(badgeArray[i]));
        }
        return convertedArray;
    };

    return EmployeeBadge;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/main/resources/static-site/js/widget/showbadges/upsa/v3/WidgetPanel.js":
/*!************************************************************************************!*\
  !*** ./src/main/resources/static-site/js/widget/showbadges/upsa/v3/WidgetPanel.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {var __WEBPACK_AMD_DEFINE_RESULT__;

/*
 * Copyright © 2021 EPAM Systems, Inc. All Rights Reserved. All information contained herein is, and remains the
 * property of EPAM Systems, Inc. and/or its suppliers and is protected by international intellectual
 * property law. Dissemination of this information or reproduction of this material is strictly forbidden,
 * unless prior written permission is obtained from EPAM Systems, Inc
 */
!(__WEBPACK_AMD_DEFINE_RESULT__ = (function (require) {
    var GA = __webpack_require__(/*! com/epam/heroes/core/util/GA */ "./src/main/resources/static-site/js/com/epam/heroes/core/util/GA.js");
    var Utils = __webpack_require__(/*! com/epam/heroes/portal/core/util/Utils */ "./src/main/resources/static-site/js/com/epam/heroes/portal/core/util/Utils.js");
    var configs = __webpack_require__(/*! widget/showbadges/upsa/v3/configs */ "./src/main/resources/static-site/js/widget/showbadges/upsa/v3/configs.js");
    var EmployeeBadge = __webpack_require__(/*! widget/showbadges/upsa/v3/WidgetEmployeeBadge */ "./src/main/resources/static-site/js/widget/showbadges/upsa/v3/WidgetEmployeeBadge.js");

    __webpack_require__(/*! closure-templates */ "./src/main/resources/static-site/js/libs/vendor/closure-templates/soyutils.js");
    __webpack_require__(/*! template/com/epam/heroes/widget/showbadges/upsa/v3/app.soy */ "./src/main/soy/com/epam/heroes/widget/showbadges/upsa/v3/app.soy");

    /**
     * Hover framework that shows/hides badge popup.
     */
    var hoverFramework = null;

    var WIDGET_TILE_CLASS = 'widget-tile';
    var WIDGET_TILE_SELECTOR = '.' + WIDGET_TILE_CLASS;

    var BADGE_CLASS = 'badge';
    var BADGE_SELECTOR = '.' + BADGE_CLASS;

    /**
     *
     * @constructor
     */
    var WidgetPanel = function WidgetPanel() {
        this.initialize();
    };

    /**
     * It's a class for badge's widget framework
     * that shows panel with all badges of
     * current employee
     *
     * Is used with upsa.epam.com portal
     *
     * @type {WidgetPanel}
     */
    WidgetPanel.prototype = {
        badgeListTemplate: com.epam.heroes.widget.showbadges.upsa.v3.template.Badges,

        /**
         * Method for executing in constructor
         */
        initialize: function initialize() {
            _.bindAll(this);
        },

        /**
         * View's model.
         */
        model: null,

        /**
         * @static
         * @returns {string}
         */
        sendMessage: function sendMessage(data) {
            window.parent.postMessage(JSON.stringify(data), '*');
        },

        /**
         * @static
         */
        sendResizeMessage: function sendResizeMessage() {
            var _this = this;
            var resizeMsg = {
                content: {
                    widgetHeroesResize: {
                        config: {
                            height: $('body').outerHeight()
                        }
                    }
                }
            };

            window.setTimeout(function () {
                _this.sendMessage(resizeMsg);
            }, 1);
        },

        /**
         * Renders template and sets it as content on the page
         * than invokes after-render functions: sendMessage about resize
         */
        renderBadgesList: function renderBadgesList() {
            var badgesToShow = this.getBadgesToShow();
            var hiddenBadgesCount = this._getTotalBadgesCount() - badgesToShow.length;

            $('.badges-section').html(this.badgeListTemplate(_.extend({}, this.model, {
                employeeBadges: badgesToShow,
                notShownBadgesCount: hiddenBadgesCount
            })));

            this.renderWidgetTileHeight();
            this.sendResizeMessage();
            this.initBadgesListEventsHandlers();
        },

        /**
         * @returns {Number}
         */
        _getTotalBadgesCount: function _getTotalBadgesCount() {
            return this.model.badgesTotalCount;
        },

        /**
         * As badge tiles width is calculated in relation width  of container
         * and the height should ba equal to width
         * if should be set manually in JS
         */
        renderWidgetTileHeight: function renderWidgetTileHeight() {
            var $tile = $(WIDGET_TILE_SELECTOR);
            var badgeWidth = $tile.width();
            $tile.outerHeight(badgeWidth);
        },

        /**
         * Returns array of badges to show on page
         *
         * @returns {*}
         */
        getBadgesToShow: function getBadgesToShow() {
            var countBadgesToShow = this._calcBadgesCountToShow();
            return this.model.employeeBadges.slice(0, countBadgesToShow);
        },

        /**
         * Calculates how much rows can be filled with available badges
         * in presumption that width of badge tiles and their container are fixed
         * and the first one is calculated with sass rule
         * to allow row to contain particular count of badges
         *
         * @return {Number}
         */
        _defineCountOfBadgesInOneRow: function _defineCountOfBadgesInOneRow() {
            var $badgesList = $('.widget-heroes-badges .badges-list');
            var $badge = $badgesList.find(WIDGET_TILE_SELECTOR).eq(0);
            var badgeWidth = $badge.outerWidth(true);

            // Use 'round' 'cause width of badge is precise to allow them to contain
            // all possible space in widget
            return Math.round($badgesList.width() / badgeWidth);
        },

        /**
         * Returns count of badge tiles that
         * fit max number of available rows
         *
         * @param {Number} availableBadgesCount
         * @returns {number}
         * @private
         */
        _getAvailableBadgeTilesCount: function _getAvailableBadgeTilesCount(availableBadgesCount) {
            var badgesInRow = this._defineCountOfBadgesInOneRow();
            var filledRowsCount = Math.floor(availableBadgesCount / badgesInRow);
            var resultRowCount = Math.min(filledRowsCount, this._getMaxRowCount()) || 1;
            return resultRowCount * badgesInRow;
        },

        /**
         * Is 1 if there are hidden badges -> for circle with number of hidden badges
         * If count of badges is less then it's available -> do not reserve space for circle
         *
         * @param {Number} availableBadgesCount
         * @param {Number} availableTilesCount
         */
        _needReserveSpaceForHiddenBadgesCount: function _needReserveSpaceForHiddenBadgesCount(availableBadgesCount, availableTilesCount) {
            var badgesAreMoreThanSpace = availableBadgesCount > availableTilesCount;
            var someBadgeAreFiltered = this._getTotalBadgesCount() > availableBadgesCount;
            return someBadgeAreFiltered || badgesAreMoreThanSpace;
        },

        /**
         * @returns {Number}
         */
        _getAvailableBadgesLength: function _getAvailableBadgesLength() {
            return this.model.employeeBadges && this.model.employeeBadges.length || 0;
        },

        _getMaxRowCount: function _getMaxRowCount() {
            return this.model.maxRowCount;
        },

        /**
         * Calculates how many badges we need to show only filled rows
         * or one with all filtered badges
         *
         * @returns {number}
         */
        _calcBadgesCountToShow: function _calcBadgesCountToShow() {
            var afterFilteringBadgesCount = this._getAvailableBadgesLength();
            var maxBadgeTileCount = this._getAvailableBadgeTilesCount(afterFilteringBadgesCount);

            return this._needReserveSpaceForHiddenBadgesCount(afterFilteringBadgesCount, maxBadgeTileCount) ? maxBadgeTileCount - 1 : maxBadgeTileCount;
        },

        /**
         * Binding mouseenter/mouseleave events to badges
         */
        initBadgesListEventsHandlers: function initBadgesListEventsHandlers() {
            var widget = this;
            $('.widget-heroes-badges .badges-list > ' + BADGE_SELECTOR).on({
                mouseenter: function mouseenter(event, force) {
                    if (hoverFramework.onHoverElement !== this || force) {
                        hoverFramework.onHoverElement = this;
                        hoverFramework.show();
                    }
                },

                /**
                 * If targetElement is defined -> mouse is situated in the widget scope
                 * and we can define if it's necessary to hide popup
                 *  else
                 * targetElement is not defined -> it means that we are situated out of widget
                 * or on the popup. If we have the second case popup shouldn't be hidden.
                 * So we'll check it lately.
                 *
                 * @param {Event} event
                 */
                mouseleave: function mouseleave(event) {
                    var targetElement = event.toElement;

                    if (!targetElement) {
                        //If popup's 'mouseenter' event is going to be generated -> the flag this.isPopupTargetElement
                        // will be set before 'checkIsTargetElementPopupAndHide' will be invoked
                        window.setTimeout(widget.checkIsTargetElementPopupAndHide, 0);
                    } else {
                        widget.checkTargetMouseElementAndHide(targetElement);
                    }
                }
            });

            $('.and-more').on('mouseenter', function (event, force) {
                if (hoverFramework.onHoverElement !== this || force) {
                    hoverFramework.hide();
                }
            });
        },

        /**
         * Checks if it necessary to hide popup.
         * Hide if mouse is directed on other badge or popup with badge details.
         *
         * @param {HTML} targetMouseElement
         */
        checkTargetMouseElementAndHide: function checkTargetMouseElementAndHide(targetMouseElement) {
            var $toElement = $(targetMouseElement);
            var isBadgeItem = $toElement && $toElement.hasClass(BADGE_CLASS);

            delete this.isPopupTargetElement;
            if (!isBadgeItem) {
                hoverFramework.hide();
            }
        },

        /**
         * If popup is target element - flag is set during message reading from popup
         */
        checkIsTargetElementPopupAndHide: function checkIsTargetElementPopupAndHide() {
            if (!this.isPopupTargetElement) {
                hoverFramework.hide();
            }
            delete this.isPopupTargetElement;
        },

        afterRender: function afterRender() {
            var widget = this;

            hoverFramework = {
                timerHandler: null,

                onHoverElement: null,

                config: {},

                show: function show() {
                    this.stopHide();
                    widget.isPopupTargetElement = true;
                    var badgeId = this.onHoverElement.id;
                    var employeeBadge = _.find(widget.model.employeeBadges, function (employeeBadgeData) {
                        return employeeBadgeData.getBadgeId() === badgeId;
                    });
                    employeeBadge.parseBadge(configs.MAX_COMMENT_LENGTH);

                    var popupViewParams = _.extend({}, _.pick(widget.model, 'currentEmployee', 'gaParams', 'heroesSiteUrl'), {
                        employeeBadge: employeeBadge
                    });
                    popupViewParams.isVeryRight = false;

                    var $badgeItem = $(this.onHoverElement);
                    var isVeryRight = this.isBadgeVeryRight($badgeItem);

                    var html = com.epam.heroes.widget.showbadges.upsa.v3.template.BadgeInfo(popupViewParams);
                    var popupContent = {
                        content: {
                            widgetHeroesBadgesPopupContent: html,
                            popupConfigs: {
                                isVeryRight: isVeryRight,
                                badgeTileWidth: $badgeItem.width()
                            }
                        },
                        target: 'widgetHeroesPopup'
                    };

                    WidgetPanel.prototype.sendMessage(popupContent);
                },

                doShow: function doShow() {
                    this.stopHide();

                    var config = this.config;
                    var size = config.size;

                    if (!size || !size.width || !this.onHoverElement) {
                        return;
                    }

                    var $badgeItem = $(this.onHoverElement);

                    config.offset = this.countPopupPosition($badgeItem, size);

                    var showPopupMsg = {
                        content: {
                            widgetHeroesShowPopup: {
                                config: this.config
                            }
                        }
                    };

                    WidgetPanel.prototype.sendMessage(showPopupMsg, '*');
                },

                /**
                * Counts the coordinates for popup
                *
                * @param {jQuery} $badgeItem
                * @param {Object} size -contains width and height of popup
                */
                countPopupPosition: function countPopupPosition($badgeItem, size) {
                    var $badgeImage = $badgeItem.find('.item-content');

                    //Dirty IE hack!
                    // Sometimes (in IE < 11) $badgeItem is empty here -> redefine it
                    if ($badgeItem.hasClass(BADGE_CLASS) && !$badgeImage.length) {
                        $badgeImage = $('body').find($badgeItem.selector).find('.item-content');
                    }

                    var offset = $badgeItem.offset() || {};

                    if ($badgeImage) {
                        offset.left += -(size.width / 2) + $badgeItem.width() / 2;
                        offset.top += $badgeImage.position().top + $badgeImage.outerHeight();

                        // If hover on very right - move tooltip
                        if (this.isBadgeVeryRight($badgeItem)) {
                            offset.left += -(size.width / 2) + $badgeItem.width() / 2;
                        }
                    }
                    return offset;
                },

                /**
                * Compares the coordinates of current badge right border and right bound of badges container
                *
                * @param {jQuery} $badgeItem
                */
                isBadgeVeryRight: function isBadgeVeryRight($badgeItem) {
                    var $badgeContainer = $('.widget-heroes-badges');
                    var badgeOffsetRight = Math.ceil($badgeItem.offset().left + $badgeItem.width());
                    var containerOffsetRight = Math.floor($badgeContainer.offset().left + $badgeContainer.width());

                    return badgeOffsetRight >= containerOffsetRight;
                },

                hide: function hide() {
                    var self = this;

                    this.timerHandler = window.setTimeout(function () {
                        self.doHide();
                    }, 450);
                },

                doHide: function doHide() {
                    if (this.timerHandler) {
                        window.clearTimeout(this.timerHandler);
                    }

                    if (this.onHoverElement) {
                        $.removeData(this.onHoverElement, 'locked');
                        this.onHoverElement = null;
                    }

                    var hidePopupMsg = {
                        content: {
                            widgetHeroesHidePopup: {}
                        }
                    };

                    WidgetPanel.prototype.sendMessage(hidePopupMsg, '*');
                },

                stopHide: function stopHide() {
                    if (this.timerHandler) {
                        window.clearTimeout(this.timerHandler);
                    }
                }
            };

            /**
             * Parses data as JSON. Returns null if it cannot be parsed.
             */
            function parseJSON(data) {
                var jsonData;
                try {
                    jsonData = JSON.parse(data);
                } catch (e) {
                    jsonData = null;
                }

                return jsonData;
            }

            function dispatchMessage(e) {
                var eventJsonData = parseJSON(e.originalEvent.data);

                if (eventJsonData) {
                    var content = eventJsonData.content;

                    if (content.widgetHeroesBadgesPopupSize) {
                        hoverFramework.config.size = content.widgetHeroesBadgesPopupSize;
                        hoverFramework.doShow();
                    }

                    if (content.widgetHeroesBadgesPopupIsOver) {
                        var isOver = content.widgetHeroesBadgesPopupIsOver.value;
                        var listItem = hoverFramework.onHoverElement;

                        if (!isOver) {
                            hoverFramework.hide();
                        } else {
                            //To notify widget not to hide popup in the method 'checkIsTargetElementPopupAndHide'
                            //'cause mouse is on th popup
                            widget.isPopupTargetElement = true;

                            $('WIDGET_TILE_SELECTOR').trigger('mouseenter', true);
                        }

                        if (listItem) {
                            $.data(listItem, 'locked', isOver);
                        }
                    }
                }
            }

            /* messaging */
            $(window).on('message', dispatchMessage);

            $('.widget-heroes-badges .toggle').on('click', function (e) {
                e.preventDefault();
                $(this).find('.fa').toggleClass('fa-minus-square-o fa-plus-square-o').closest('.widget-heroes-badges').find('.body').toggle();
                WidgetPanel.prototype.sendResizeMessage();
            });
        },

        /**
         * Checks if badge belongs to the required collection of badges
         * or has restricted weight
         *
         * @param {EmployeeBadge} employeeBadgeData
         * @param {Object} filterOptions
         * @param {Array} filterOptions.requiredBadgesIds
         * @param {Number} filterOptions.excludedBadgeWeight
         * @returns {Boolean}
         */
        filterBadge: function filterBadge(employeeBadgeData, filterOptions) {
            var badgeId = employeeBadgeData.getBadgeId() + '';
            var badgeWeight = employeeBadgeData.getBadgeWeight();

            if (filterOptions.requiredBadgesIds.indexOf(badgeId) < 0) {
                return badgeWeight > filterOptions.excludedBadgeWeight;
            }
            return true;
        },

        /**
         * Picks up badges from response object,
         * filters them so that only non-promo badges remain
         *
         * @param {Object} responses
         * @param {{requiredBadgesIds: Array, excludedBadgeWeight: Number}} [filterOptions]
         * @returns {Array}
         */
        _getVisibleBadges: function _getVisibleBadges(responses, filterOptions) {
            var _this = this;
            var employeeBadgesResponse = responses.employeeBadgesResponse;
            var employeeBadges = EmployeeBadge.convertBadgeArray(employeeBadgesResponse.content);
            var weights = responses.weightsResponse.content;

            filterOptions = filterOptions || {
                requiredBadgesIds: configs.MANDATORY_BADGES_IDS,
                excludedBadgeWeight: this.getWeightValue(configs.EXCLUDED_BADGE_WEIGHT, weights)
            };

            employeeBadges = _.filter(employeeBadges, function (employeeBadgeData) {
                return _this.filterBadge(employeeBadgeData, filterOptions);
            });

            return employeeBadges;
        },

        /**
         * Searches weight by name and returns its value
         * @param weightName
         * @param weights
         * return {Number} returns int value of weight
         */
        getWeightValue: function getWeightValue(weightName, weights) {
            for (var weightIndex in weights) {
                if (weights.hasOwnProperty(weightIndex) && weights[weightIndex].name === weightName) {
                    return weights[weightIndex].weight;
                }
            }
        },

        getBadgesTotalCount: function getBadgesTotalCount(response) {
            return response.content.length;
        },

        getShouldRender: function getShouldRender() {
            return this.model && this.model.shouldRender;
        },
        render: function render(data) {
            this.model = {
                heroesSiteUrl: configs.HEROES_SITE_URL,
                employeeBadges: data.badges,
                badgesTotalCount: data.badgesTotalCount,
                currentEmployee: _.pick(data.currentEmployee, 'id', 'firstName', 'lastName', 'name', 'fired'),
                maxRowCount: data.maxRowCount || configs.MAX_ROW_COUNT,
                shouldRender: true
            };

            $('body').html(com.epam.heroes.widget.showbadges.upsa.v3.template.Widget(_.extend({}, this.model, {
                // Show only one badge at first as it will be used to determine block dimensions
                employeeBadges: data.badges.length ? [data.badges[0]] : []
            })));

            this.afterRender();
            window.setTimeout(this.renderBadgesList, 1);
        },

        /**
         * Is entry point for showing widget
         */
        runWidget: function runWidget() {
            var _this2 = this;

            var employeeId = Utils.getQueryParam('employeeId');
            var authFrame = $('<iframe>', {
                id: 'authenticationFrame',
                src: configs.api(location).lightWeightPage,
                frameborder: 0,
                scrolling: 'no'
            }).hide();

            authFrame.on('load', function () {
                _this2.fetchDataAndRunWidget(employeeId);
            });

            authFrame.appendTo('html');
        },

        getCookie: function getCookie(name) {
            var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
            return matches ? decodeURIComponent(matches[1]) : undefined;
        },

        /**
         * Sends requests to get all necessary data
         * and invokes method onFetchData after receiving response
         * that invokes rendering widget
         *
         * @param {String} employeeId
         */
        fetchDataAndRunWidget: function fetchDataAndRunWidget(employeeId) {
            var loginRequest = $.ajax({
                url: configs.api(location).user,
                async: false,
                statusCode: {
                    401: function _() {
                        window.location.href = '/api/oauth/login';
                    }
                }
            });

            var employeeRequest = $.ajax({
                url: configs.api(location).employee(employeeId),
                traditional: true
            });

            var employeeBadgesRequest = $.ajax({
                url: configs.api(location).employeeBadges(employeeId),
                traditional: true,
                data: {
                    startDate: Utils.getQueryParam('startDate'),
                    endDate: Utils.getQueryParam('endDate'),
                    programValue: Utils.getQueryParam('programValue'),
                    orderBy: ['-weight', '-assigned']
                }
            });

            var weightsRequest = $.ajax({
                url: configs.api(location).weights,
                traditional: true
            });

            $.when(employeeRequest, employeeBadgesRequest, weightsRequest).done(this.onFetchData).fail(this.showLoginButton);
        },

        /**
         * Callback on failed requests to show form with login button
         */
        showLoginButton: function showLoginButton() {
            $.get("unauthorized.html", function (data) {
                $('body').html(data);
            });
            this.shouldRender = false;
        },

        /**
         * Callback on receiving responses:
         * takes data and renders widget
         *
         * @param employeeResponseData
         * @param employeeBadgesResponseData
         * @param weightsResponseData
         */
        onFetchData: function onFetchData(employeeResponseData, employeeBadgesResponseData, weightsResponseData) {
            var responses = {
                employeeResponse: employeeResponseData[0],
                employeeBadgesResponse: employeeBadgesResponseData[0],
                weightsResponse: weightsResponseData[0]
            };

            var renderData = {
                currentEmployee: responses.employeeResponse.content,
                badges: this._getVisibleBadges(responses),
                badgesTotalCount: this.getBadgesTotalCount(responses.employeeBadgesResponse)
            };

            this.render(renderData);
        }

    };

    // For testing
    return WidgetPanel;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./src/main/resources/static-site/js/libs/vendor/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/main/resources/static-site/js/widget/showbadges/upsa/v3/configs.js":
/*!********************************************************************************!*\
  !*** ./src/main/resources/static-site/js/widget/showbadges/upsa/v3/configs.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

/*
 * Copyright © 2021 EPAM Systems, Inc. All Rights Reserved. All information contained herein is, and remains the
 * property of EPAM Systems, Inc. and/or its suppliers and is protected by international intellectual
 * property law. Dissemination of this information or reproduction of this material is strictly forbidden,
 * unless prior written permission is obtained from EPAM Systems, Inc
 */
!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  return {

    /**
     * Maximum length of a badge comment
     */
    MAX_COMMENT_LENGTH: 100,

    /**
     * Count of rows
     */
    MAX_ROW_COUNT: 2,

    /**
     * Badge weight that is deprecated to show
     */
    EXCLUDED_BADGE_WEIGHT: 'Promo',

    /**
     * As upsa is external site we can't get heroes-url from location object
     */
    HEROES_SITE_URL: 'heroes.epam.com',

    /**
     * Badges that are required to show
     * id = 1 -> "Welcome aboard badge"
     */
    MANDATORY_BADGES_IDS: ['1'],

    /**
     * Assign date format
     *
     * example: Wed Dec 03 2014 02:00:39 GMT+0300 (Belarus Standard Time)
     */
    ASSIGN_DATE_FORMAT: 'ddd MMM DD YYYY HH:mm:ss zZZ',

    /**
     * Objects of base urls
     *
     * @param {{protocol: String, host: String|Number}} location
     * @returns {{employee: Function, employeeBadges: Function, weights: String}}
     */
    api: function api(location) {
      return {
        employee: function employee(employeeId) {
          return location.protocol + '//' + location.host + '/api/employees/' + employeeId;
        },

        employeeBadges: function employeeBadges(employeeId) {
          return location.protocol + '//' + location.host + '/api/employees/' + employeeId + '/badges/widget';
        },

        weights: location.protocol + '//' + location.host + '/api/badges/weights',

        user: location.protocol + '//' + location.host + '/api/users/current',

        lightWeightPage: location.protocol + '//' + location.host + '/auth'
      };
    }
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./src/main/soy/com/epam/heroes/widget/showbadges/upsa/v3/app.soy":
/*!************************************************************************!*\
  !*** ./src/main/soy/com/epam/heroes/widget/showbadges/upsa/v3/app.soy ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(soy) {/*** IMPORTS FROM imports-loader ***/
(function() {
var goog = this.goog;

var com = window.com || {};


// Exposed to window by expose-soy
window.com = window.com || {};
// This file was automatically generated from template3.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace com.epam.heroes.widget.showbadges.upsa.v3.template.
 */

if (typeof com == 'undefined') { var com = {}; }
if (typeof com.epam == 'undefined') { com.epam = {}; }
if (typeof com.epam.heroes == 'undefined') { com.epam.heroes = {}; }
if (typeof com.epam.heroes.widget == 'undefined') { com.epam.heroes.widget = {}; }
if (typeof com.epam.heroes.widget.showbadges == 'undefined') { com.epam.heroes.widget.showbadges = {}; }
if (typeof com.epam.heroes.widget.showbadges.upsa == 'undefined') { com.epam.heroes.widget.showbadges.upsa = {}; }
if (typeof com.epam.heroes.widget.showbadges.upsa.v3 == 'undefined') { com.epam.heroes.widget.showbadges.upsa.v3 = {}; }
if (typeof com.epam.heroes.widget.showbadges.upsa.v3.template == 'undefined') { com.epam.heroes.widget.showbadges.upsa.v3.template = {}; }


com.epam.heroes.widget.showbadges.upsa.v3.template.Widget = function(opt_data, opt_ignored) {
  return '<div class="widget-heroes-badges"><div class="body"><div class="badges-section">' + com.epam.heroes.widget.showbadges.upsa.v3.template.Badges(opt_data) + '</div></div></div>';
};
if (goog.DEBUG) {
  com.epam.heroes.widget.showbadges.upsa.v3.template.Widget.soyTemplateName = 'com.epam.heroes.widget.showbadges.upsa.v3.template.Widget';
}


com.epam.heroes.widget.showbadges.upsa.v3.template.Badges = function(opt_data, opt_ignored) {
  var output = '<ul class="badges-list">';
  var employeeBadgeList12 = opt_data.employeeBadges;
  var employeeBadgeListLen12 = employeeBadgeList12.length;
  for (var employeeBadgeIndex12 = 0; employeeBadgeIndex12 < employeeBadgeListLen12; employeeBadgeIndex12++) {
    var employeeBadgeData12 = employeeBadgeList12[employeeBadgeIndex12];
    output += com.epam.heroes.widget.showbadges.upsa.v3.template.Badge({badge: employeeBadgeData12.badge, count: employeeBadgeData12.count, currentLevel: employeeBadgeData12.currentLevel, widgetItemImageUrl: employeeBadgeData12.widgetItemImageUrl});
  }
  output += ((opt_data.notShownBadgesCount > 0) ? '<li class="widget-tile and-more"><a class="item-content" rel="noopener noreferrer" href="//' + soy.$$escapeHtml(opt_data.heroesSiteUrl) + '/profile/' + soy.$$escapeHtml(opt_data.currentEmployee.id) + '" target="_blank"><div class=\'centering-wrap\'><span class="not-shown-badges-amount">' + soy.$$escapeHtml(opt_data.notShownBadgesCount) + '</span>more</div></a></li>' : '') + '</ul>';
  return output;
};
if (goog.DEBUG) {
  com.epam.heroes.widget.showbadges.upsa.v3.template.Badges.soyTemplateName = 'com.epam.heroes.widget.showbadges.upsa.v3.template.Badges';
}


com.epam.heroes.widget.showbadges.upsa.v3.template.Badge = function(opt_data, opt_ignored) {
  return '<li id="' + soy.$$escapeHtml(opt_data.badge.id) + '" class="badge widget-tile"><div class="item-content"><img src="' + soy.$$escapeHtml(opt_data.widgetItemImageUrl) + '" alt="' + soy.$$escapeHtml(opt_data.badge.name) + '"></div>' + ((opt_data.count > 1) ? '<span class="amount">x' + soy.$$escapeHtml(opt_data.count) + '</span>' : '') + ((opt_data.currentLevel > 0) ? '<span class="level-number">' + soy.$$escapeHtml(opt_data.currentLevel) + '</span>' : '') + '</li>';
};
if (goog.DEBUG) {
  com.epam.heroes.widget.showbadges.upsa.v3.template.Badge.soyTemplateName = 'com.epam.heroes.widget.showbadges.upsa.v3.template.Badge';
}


com.epam.heroes.widget.showbadges.upsa.v3.template.BadgeInfo = function(opt_data, opt_ignored) {
  var output = '';
  var badgeQueryParams__soy49 = 'showBadgeDetails=' + opt_data.employeeBadge.badge.id;
  output += '<div class="widget-heroes-badges-popup"><div class="body"><div class="popup-arrow"></div><table><tbody><tr><td class="col-label">title:</td><td class="col-value"><span class="badge-name">' + soy.$$escapeHtml(opt_data.employeeBadge.badge.name) + '</span></td></tr><tr><td class="col-label">description:</td><td class="col-value">' + soy.$$escapeHtml(opt_data.employeeBadge.badge.description) + '</td></tr><tr class="givenBy"><td class="col-label">given by:</td><td class="col-value">';
  var assigner__soy55 = opt_data.employeeBadge.badgeAssigner;
  if (assigner__soy55.badgeAssignerType == 'EMPLOYEE') {
    var assignerFirstName__soy58 = assigner__soy55.firstName;
    var assignerLastName__soy59 = assigner__soy55.lastName;
    var name__soy60 = assigner__soy55.name;
    var assignerId__soy61 = assigner__soy55.id;
    output += (assignerFirstName__soy58 && assignerLastName__soy59) ? '<a rel="noopener noreferrer" href="//' + soy.$$escapeHtml(opt_data.heroesSiteUrl) + '/profile/' + soy.$$escapeHtml(assignerId__soy61) + '" target="_blank">' + soy.$$escapeHtml(assignerFirstName__soy58) + ' ' + soy.$$escapeHtml(assignerLastName__soy59) + '</a>' : '<a rel="noopener noreferrer" href="//' + soy.$$escapeHtml(opt_data.heroesSiteUrl) + '/profile/' + soy.$$escapeHtml(assignerId__soy61) + '" target="_blank">' + soy.$$escapeHtml(name__soy60) + '</a>';
  } else {
    output += soy.$$escapeHtml(assigner__soy55.name);
  }
  output += '</td></tr><tr><td class="col-label">date:</td><td class="col-value">' + soy.$$escapeHtml(opt_data.employeeBadge.assignmentDateFormatted) + '</td></tr><tr>';
  var profileLink__soy86 = '//' + opt_data.heroesSiteUrl + '/profile/' + opt_data.currentEmployee.id + '?' + badgeQueryParams__soy49;
  output += '<td class="col-label">comment:</td><td class="col-value">&laquo;' + soy.$$escapeHtml(opt_data.employeeBadge.latestComment) + ((opt_data.employeeBadge.isCommentCut) ? '...&raquo;<div><a rel="noopener noreferrer" class="see-more" href="' + soy.$$escapeHtml(profileLink__soy86) + '" target="_blank"><span class="reference-text">See full comment</span></a></div>' : '&raquo;');
  var badgeCount__soy96 = opt_data.employeeBadge.count;
  output += ((badgeCount__soy96 > 1) ? '<div><a rel="noopener noreferrer" class="see-more" href="' + soy.$$escapeHtml(profileLink__soy86) + '" target="_blank"><span class="reference-text">See more comments</span> <sup>' + soy.$$escapeHtml(badgeCount__soy96 - 1) + '</sup></a></div>' : '') + '</td></tr></tbody></table></div></div>';
  return output;
};
if (goog.DEBUG) {
  com.epam.heroes.widget.showbadges.upsa.v3.template.BadgeInfo.soyTemplateName = 'com.epam.heroes.widget.showbadges.upsa.v3.template.BadgeInfo';
}

        module.exports = com.epam.heroes.widget.showbadges.upsa.v3.template;


window.com = com;
}.call({goog:{}}));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! closure-templates */ "./src/main/resources/static-site/js/libs/vendor/closure-templates/soyutils.js")))

/***/ })

}]);
//# sourceMappingURL=13.a2a225cf.chunk.js.map