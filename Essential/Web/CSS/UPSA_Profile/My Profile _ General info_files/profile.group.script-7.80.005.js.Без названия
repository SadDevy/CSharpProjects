if (typeof dwr == 'undefined' || dwr.engine == undefined) throw new Error('You must include DWR engine before including this file');

(function() {
if (dwr.engine._getObject("Employee") == undefined) {
var p;

p = {};
p._path = '/workload/dwr';





p.setLookupDwr = function(p0, callback) {
return dwr.engine._execute(p._path, 'Employee', 'setLookupDwr', arguments);
};





p.setAccessDecisionManager = function(p0, callback) {
return dwr.engine._execute(p._path, 'Employee', 'setAccessDecisionManager', arguments);
};





p.getEmployeeSoftwarePackageComments = function(p0, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getEmployeeSoftwarePackageComments', arguments);
};







p.getDottedManagerAutocompleteResult = function(p0, p1, p2, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getDottedManagerAutocompleteResult', arguments);
};





p.isDmOrDsvAssignmentApproveRequired = function(p0, callback) {
return dwr.engine._execute(p._path, 'Employee', 'isDmOrDsvAssignmentApproveRequired', arguments);
};





p.deleteEmployeeComment = function(p0, callback) {
return dwr.engine._execute(p._path, 'Employee', 'deleteEmployeeComment', arguments);
};





p.getProjectDescription = function(p0, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getProjectDescription', arguments);
};





p.setEmployeeService = function(p0, callback) {
return dwr.engine._execute(p._path, 'Employee', 'setEmployeeService', arguments);
};






p.addEmployeeComments = function(p0, p1, callback) {
return dwr.engine._execute(p._path, 'Employee', 'addEmployeeComments', arguments);
};






p.getAdmAssistantsForEmployee = function(p0, p1, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getAdmAssistantsForEmployee', arguments);
};









p.checkServiceAccountLogin = function(p0, p1, p2, p3, p4, callback) {
return dwr.engine._execute(p._path, 'Employee', 'checkServiceAccountLogin', arguments);
};





p.getEmployeeComments = function(p0, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getEmployeeComments', arguments);
};







p.getProjectSearchResult = function(p0, p1, p2, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getProjectSearchResult', arguments);
};





p.getDottedManagerAndUnitById = function(p0, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getDottedManagerAndUnitById', arguments);
};






p.getEmployeesForAutocomplete = function(p0, p1, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getEmployeesForAutocomplete', arguments);
};






p.getDuplicateActiveDirectoryLogin = function(p0, p1, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getDuplicateActiveDirectoryLogin', arguments);
};







p.getCustomersSearchResult = function(p0, p1, p2, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getCustomersSearchResult', arguments);
};





p.getEmployeeInternalAppsProfiles = function(p0, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getEmployeeInternalAppsProfiles', arguments);
};





p.getEpamCustomerShortDescription = function(p0, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getEpamCustomerShortDescription', arguments);
};





p.setCommentsService = function(p0, callback) {
return dwr.engine._execute(p._path, 'Employee', 'setCommentsService', arguments);
};






p.getCorrectedAccountName = function(p0, p1, callback) {
return dwr.engine._execute(p._path, 'Employee', 'getCorrectedAccountName', arguments);
};

dwr.engine._setObject("Employee", p);
}
})();

//Dialog scripts

function resizeWindow() {
    var popupMargin = 15;
    var popup = document.getElementById(popupName);

    var heightDelta = (jQuery(window).height() - jQuery(popup).height()) / 2;
    if (heightDelta < popupMargin) {
        heightDelta = popupMargin;
    }

    var widthDelta = (jQuery(window).width() - jQuery(popup).width()) / 2;
    if (widthDelta < popupMargin) {
        widthDelta = popupMargin;
    }
    popup.style.top = heightDelta + jQuery(document).scrollTop() + 'px';
    popup.style.left = widthDelta + jQuery(document).scrollLeft() + 'px';
}

function cancelDialogWindow(name) {
    var popup = document.getElementById(name);
    if (popup != null) {
        popup.style.display = 'none';
    }
    hidePageLocker();
}

function showLocker() {
    showPageLocker({opacity: 0.5, changeCursor: false});
}

function showDialogWindow(idDialog) {
    showLocker();
    var popup = document.getElementById(idDialog);
    popup.style.position = 'absolute';
    popup.style.display = 'block';
    popup.style.zIndex = 1002;
    popupName = idDialog;
    resizeWindow();
    window.onresize = resizeWindow;
}
;/*
* Placeholder plugin for jQuery
* ---
* Copyright 2010, Daniel Stocks (http://webcloud.se)
* Released under the MIT, BSD, and GPL Licenses.
*/
(function($) {
    function Placeholder(input) {
        this.input = input;
        this.placeholder = this.input.attr('placeholder').replace(/\\n/g, "\n");

        if (input.attr('type') == 'password') {
            this.handlePassword();
        }
        // Prevent placeholder values from submitting
        $(input[0].form).submit(function() {
            if (input.hasClass('placeholder') && input[0].value == input.attr('placeholder')) {
                input[0].value = '';
            }
        });
    }
    Placeholder.prototype = {
        show : function(loading) {
            // FF and IE saves values when you refresh the page. If the user refreshes the page with
            // the placeholders showing they will be the default values and the input fields won't be empty.
            if (this.input[0].value === '' || (loading && this.valueIsPlaceholder())) {
                if (this.isPassword) {
                    try {
                        this.input[0].setAttribute('type', 'text');
                    } catch (e) {
                        this.input.before(this.fakePassword.show()).hide();
                    }
                }
                this.input.addClass('placeholder');

                this.input[0].value = this.placeholder;
                this.input.attr('placeholder', '');
            }
        },
        hide : function() {
            if (this.valueIsPlaceholder() && this.input.hasClass('placeholder')) {
                this.input.removeClass('placeholder');
                this.input[0].value = '';
                if (this.isPassword) {
                    try {
                        this.input[0].setAttribute('type', 'password');
                    } catch (e) { }
                    // Restore focus for Opera and IE
                    this.input.show();
                    this.input[0].focus();
                }
            }
        },
        valueIsPlaceholder : function() {
            return this.input[0].value == this.placeholder;
        },
        handlePassword: function() {
            var input = this.input;
            input.attr('realType', 'password');
            this.isPassword = true;
            // IE < 9 doesn't allow changing the type of password inputs
            if ((navigator.appName == 'Microsoft Internet Explorer') && input[0].outerHTML) {
                var fakeHTML = $(input[0].outerHTML.replace(/type=(['"])?password\1/gi, 'type=$1text$1'));
                this.fakePassword = fakeHTML.val(input.attr('placeholder')).addClass('placeholder').focus(function() {
                    input.trigger('focus');
                    $(this).hide();
                });
                $(input[0].form).submit(function() {
                    fakeHTML.remove();
                    input.show()
                });
            }
        }
    };
    $.fn.placeholder = function() {
        return this.each(function() {
            var input = $(this);
            var placeholder = new Placeholder(input);
            placeholder.show(true);
            input.focus(function() {
                placeholder.hide();
            });
            input.blur(function() {
                placeholder.show(false);
            });
            
            // Prevent placeholders to be sent as empty values
            input.closest('form').submit(function(){
                if(input.hasClass('placeholder')){
                    input.removeClass('placeholder');
                    input.val('');
                }
            });

            // On page refresh, IE doesn't re-populate user input
            // until the window.onload event is fired.
            if (navigator.appName == 'Microsoft Internet Explorer') {
                $(window).load(function() {
                    if(input.val()) {
                        input.removeClass("placeholder");
                    }
                    placeholder.show(true);
                });
                // What's even worse, the text cursor disappears
                // when tabbing between text inputs, here's a fix
                input.focus(function() {
                    if(this.value == "") {
                        var range = this.createTextRange();
                        range.collapse(true);
                        range.moveStart('character', 0);
                        range.select();
                    }
                });
            }
        });
    }
})(jQuery);
function getFormValues(formName){
    var c;
    var formValues=new Array();
    var elCount=0;
    for (var i = 0; i<document.forms[formName].elements.length; i++) {
        c = document.forms[formName].elements[i];
        if (c.tagName.toLowerCase() === 'select' || c.tagName.toLowerCase() === "textarea" || c.tagName.toLowerCase() === 'input' &&
                (c.type.toLowerCase() === "text" && !jQuery(c).hasClass("select2-offscreen") && !jQuery(c).hasClass("select2-input")
                    || c.type.toLowerCase() === "password" || c.type.toLowerCase() === "radio" ||
                c.type.toLowerCase() === "checkbox" && c.name.indexOf("projectChk") === -1)) {
            if(c.tagName.toLowerCase() === 'input'&&
                (c.type.toLowerCase() === "checkbox"||c.type.toLowerCase() === "radio")){
                formValues[elCount]=c.checked;
            }else{
                formValues[elCount]=c.value;
                if (c.getAttribute('placeholder') === c.value) {
                    formValues[elCount] = '';
                }
            }
            elCount++;
        }
    }
    return formValues;
}

    function hasArrayChanged(groupeName, fieldNames, typeNames, oldArray, defaultValues){
        var newArray=buildArray(groupeName, fieldNames, typeNames);
        if(newArray.length<oldArray.length){
            return true;
        }
        for(var i=0;i<oldArray.length;i++){
            var element=oldArray[i];
            var newElement=newArray[i];
            for(var j=0;j<fieldNames.length;j++){
                if(element[fieldNames[j]]!=newElement[fieldNames[j]]){
                    return true;
                }
            }
        }
        for(i=oldArray.length;i<newArray.length;i++){
            element=newArray[i];
            for(j=0;j<fieldNames.length;j++){
                if(element[fieldNames[j]]!=defaultValues[j]){
                    return true;
                }
            }
        }
        return false;
    }

    function buildArray(groupeName, fieldNames, typeNames){
        var results=[], elementsGroupes=[];
        for(var i=0; i<fieldNames.length;i++){
            elementsGroupes[i]=jQuery(typeNames[i]+"[name^="+groupeName+"]"+"[name$="+fieldNames[i]+"]");
        }
        for(i=0; i<elementsGroupes[0].length;i++){
            var currentResult={};
            for(var j=0; j<fieldNames.length;j++){
                var groupe=elementsGroupes[j];
                var element=groupe[i];
                var value;
                if (element && element.tagName.toLowerCase() === 'input' &&
                    (element.type.toLowerCase() === "checkbox"||element.type.toLowerCase() === "radio")){
                        value=element.checked;
                    } else if (element) {
                        value=element.value;
                    }
                currentResult[fieldNames[j]]=value;
            }
            results[i]=currentResult;
        }
        return results;
    }

function isElChanged(jQueryRegExp, oldValue){
    var element = jQuery(jQueryRegExp);
    return element.is(':checkbox') ? element.prop('checked') != oldValue : element.val() != (""+oldValue);
}

;var SKILL_SORTER = {};

SKILL_SORTER.defaultHeightRetriever = function(element) {
    return jQuery(element).is(':visible') ? jQuery(element).height() : jQuery(element).actual('height');
};

SKILL_SORTER.defaultColumnBuilder = function(options) {
    return jQuery('<div></div>').addClass(options.columnClass);
};

SKILL_SORTER.defaultOptions = {
    categories: [],
    columns: 3,
    columnClass: 'data-column',
    container: '',
    columnBuilder: SKILL_SORTER.defaultColumnBuilder,
    heightRetriever: SKILL_SORTER.defaultHeightRetriever
};

SKILL_SORTER.sortSkills = function (options) {
    options = jQuery.extend(SKILL_SORTER.defaultOptions, options);
    var cols = [];
    var heights = [];
    for (var i = 0; i < options.columns; i++) {
        cols.push([]);
        heights.push(0);
    }
    options.categories.each(function() {
        var height = options.heightRetriever(jQuery(this));
        var i = heights.indexOf(Math.min.apply( Math, heights ));
        heights[i] += height;
        cols[i].push(jQuery(this));
    });
    cols.forEach(function(item, index) {
        var col = options.columnBuilder(options);
        item.forEach(function(item) {
            col.append(item);
        });
        cols[index] = col;
    });
    jQuery(options.container).children().remove();
    jQuery(options.container).append(cols);
};var EMPL_VIEW = EMPL_VIEW || {};


EMPL_VIEW.initGadgets = function () {
    typeof (heroGadget) !== 'undefined' && heroGadget();
};

EMPL_VIEW.lazyInitGadgets = function () {
    typeof (erGadget) !== 'undefined' && erGadget();
    typeof (innovationGadget) !== 'undefined' && innovationGadget();
};

EMPL_VIEW.initializeTabs = function () {
    jQuery(".title-tabs").upsaTabs({
        prefix: "view-",
        tabPrefix: "empl-tab-",
        active: "empl-tab-1",
        fragmentPrefix: "emplTab",
        tabUrlMapping: {
            "empl-tab-1": "general",
            "empl-tab-2": "skill",
            "empl-tab-3": "personal",
            "empl-tab-4": "relatadInfo"
        },
        events: {
            "empl-tab-1" : {
                action: EMPL_VIEW.lazyInitGadgets,
                onlyOnceFired: true,
                fired: false
            },
            "*" : {
                action: function (tabId) {
                    if (!!tabId) {
                        jQuery('[class^="btn-empl-tab-"]').hide();
                        jQuery('.btn-' + tabId).show();
                        renderSkillWidget('empl-tab-2' === tabId);
                    }
                },
                onlyOnceFired: false,
                fired: false
            }
        }
    });
};

EMPL_VIEW.initializeEvents = function () {
    jQuery("#updateInfoButton").buttonsDropdown("#updateInfoMenu");
    jQuery("#emplExportButton").buttonsDropdown("#exportMenuButtons");

    jQuery(".panel-status").panelStatus({
        applyEvent: doSubmit
    });
};

EMPL_VIEW.initQtip = function () {
    var $approveStatus = jQuery(".status-text");
    $approveStatus.qtip({
        position: {
            my: 'top center', at: 'bottom center'
        },
        content: jQuery("#approve_info").text(),
        style: {classes: 'qtip-light qtip-shadow'},
        hide: {
            fixed: true,
            delay: 300
        }
    });
};

var categories = null;

EMPL_VIEW.initSkills = function () {
    categories = jQuery('.data-skill .tc-property-table').sort(function (a, b) {
        var ia = parseInt(jQuery(a).data('index'));
        var ib = parseInt(jQuery(b).data('index'));
        if (ia === ib) {
            return 0;
        }
        return ia < ib ? -1 : 1;
    });

    var prevWidth = 0;
    jQuery(window).resize(function () {
        var width = jQuery(window).width();
        if ((width >= 1530 && prevWidth < 1530) || (width < 1530 && prevWidth >= 1530) ||
                (width >= 1890 && prevWidth < 1890) || (width < 1890 && prevWidth >= 1890) ||
                prevWidth === 0) {
            sortSkills();
        }
        jQuery('.data-column').css('width', 335);
        prevWidth = width;
    });
    jQuery(window).resize();
};

EMPL_VIEW.initCollapsibleSections = function () {
    jQuery('.section-collapse-icon').closest("tr").on('click', function (e) {
        if (jQuery(e.target).is(jQuery(this).find(".modernButton"))) {
            return;
        }
        jQuery(this).find(".section-collapse-icon").toggleClass('icon-angle-up icon-angle-down');
        jQuery(this).parents('table').children('tbody').toggle();
    });
};

EMPL_VIEW.renderHrContacts = function() {
    renderHRByUnit();
    renderHRByLocation();
    renderHRByProject();
    var hrContactsSection = jQuery('#hrContactsSection');
    if (hrContactsSection.children('tr').length === 0) {
        hrContactsSection.closest('.tc-property-section').remove();
    }
};

EMPL_VIEW.HR_CONTACTS_LIST_TEMPLATE =
    '{{^hrContacts}}' +
        'N/A' +
    '{{/hrContacts}}' +
    '{{#hrContacts}}' +
        '<a href="employeeView.do?employeeId={{id}}" ' +
            'target="_blank" ' +
            '{{#active}}style="font-weight: bold;"{{/active}}' +
            'title="{{#active}}{{hrContactPrimary}}{{/active}}{{^active}}{{hrContactAssistant}}{{/active}}"' +
            '>{{name}}</a>' +
        '{{^last}}, {{/last}}' +
    '{{/hrContacts}}';

function hrContactsComparator(a, b) {
    return (a.active && !b.active) ? -1 : ((!a.active && b.active) ? 1 : (a.name > b.name ? 1 : (a.name < b.name ? -1 : 0)));
}

function renderHRByUnit() {
    var $unitHrContactsContainer = jQuery('#hrContactsUnit');
    if (!unitId) {
        $unitHrContactsContainer.parents('tr').remove();
        return;
    }
    if (unitHrContacts.length === 0) {
        $unitHrContactsContainer.parents('tr').remove();
    } else {
        unitHrContacts.sort(hrContactsComparator);
        unitHrContacts[unitHrContacts.length - 1].last = true;
        $unitHrContactsContainer.html(Hogan.compile(
            EMPL_VIEW.HR_CONTACTS_LIST_TEMPLATE
        ).render({
            hrContacts: unitHrContacts,
            hrContactPrimary: hrContactPrimary,
            hrContactAssistant: hrContactAssistant
        }));
    }
}

function renderHRByLocation() {
    var $locationHrContactsContainer = jQuery('#hrContactsLocation');
    if (locationHrContacts.length === 0) {
        $locationHrContactsContainer.parents('tr').remove();
    } else {
        locationHrContacts[locationHrContacts.length - 1].last = true;
        $locationHrContactsContainer.html(Hogan.compile(
            EMPL_VIEW.HR_CONTACTS_LIST_TEMPLATE
        ).render({
            hrContacts: locationHrContacts,
            hrContactPrimary: hrContactPrimary,
            hrContactAssistant: hrContactAssistant
        }));
    }
}

function renderHRByProject() {
    var projects = [];
    Object.keys(projectHrContacts).forEach(function(e) {
        if (projectHrContacts[e].length > 0) {
            projects.push(projectHrContacts[e]);
        }
    });
    var $projectHrContactsContainer = jQuery('#hrContactsProject');
    if (projects.length === 0) {
        $projectHrContactsContainer.parents('tr').remove();
    } else {
        projects = projects.map(function(hr) {
            return {
                id: hr[0].projectId,
                name: hr[0].projectName,
                hrContacts: hr.sort(hrContactsComparator)
            };
        });

        projects.forEach(function (e) {
            e.hrContacts[e.hrContacts.length - 1].last = true;
        });

        $projectHrContactsContainer.html(Hogan.compile(
            '{{#projects}}' +
                '<div style="display: table-row;">' +
                    '<span style="display: table-cell; padding-right: 10px; white-space: nowrap;">' +
                        '{{#canViewProjects}}' +
                            '<a href="project.do?projectId={{id}}" target="_blank">{{name}}</a>' +
                        '{{/canViewProjects}}' +
                        '{{^canViewProjects}}' +
                            '{{name}}' +
                        '{{/canViewProjects}}' +
                        ':' +
                    '</span>' +
                    '<span class="display: table-cell;">' +
                        EMPL_VIEW.HR_CONTACTS_LIST_TEMPLATE +
                    '</span>' +
                '</div>' +
            '{{/projects}}'
        ).render({
            projects: projects,
            canViewProjects: canViewProjects,
            hrContactPrimary: hrContactPrimary,
            hrContactAssistant: hrContactAssistant
        }));
    }
}

function sortSkills() {
    SKILL_SORTER.sortSkills({
        container: jQuery('.data-cols:eq(0)'),
        categories: categories,
        columnClass: 'data-column',
        columns: jQuery(window).width() > 1530 ? (jQuery(window).width() > 1890 ? 5 : 4) : 3,
        heightRetriever: function (element) {
            return jQuery(element).hasClass('hideEmptySection') ? 0 : jQuery(element).actual('height');
        },
        columnBuilder: function () {
            var inner = jQuery('<div></div>').addClass('data-skill');
            var outer = jQuery('<div></div>').addClass('data-column');
            outer.append(inner);
            return outer;
        }
    });
}

function showLayer(divId, caller) {
    var $smallDialog = jQuery("#" + divId);
    $smallDialog.show();
}

function hideLayer(divId) {
    var $smallDialog = jQuery("#" + divId);
    $smallDialog.fadeOut(200);
}

function formatDate(date) {
    var months = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");
    var s = "";
    if (date.getMonth() < months.length) {
        s = months[date.getMonth()];
    }
    var year = date.getYear() % 100;
    if (year < 10) {
        s = s + "-0" + year.toString();
    }
    else {
        s = s + "-" + year.toString();
    }
    return s;
}

var url;

function viewSkills(messageError) {
    var index = 0;
    var resultParam = '';
    var showSkillDialog = jQuery('#showSkillsDialog');
    if (showSkillDialog.find("#checkAllSkills").prop("checked")) {
        resultParam = 'all';
    } else {
        showSkillDialog.find("input[name^=checkSkill]:checkbox").each(
                function () {
                    if (this.checked) {
                        if (resultParam !== '') {
                            resultParam += '&';
                        }
                        resultParam += 'levels[' + index + '].id=' + this.value;
                        index++;
                    }
                }
        );
    }
    if (resultParam !== '' && resultParam !== 'all') {
        url += '&' + resultParam;
    } else {
        if (resultParam === '') {
            alert(messageError);
            return false;
        }
    }
    if (jQuery("#showOverview").prop("checked")) {
        url += '&showOverview=true';
    }
    var employeeViewForm = document.forms["employeeViewForm"];
    var oldAction = employeeViewForm.action;

    employeeViewForm.target = '_blank';
    employeeViewForm.action = url;

    employeeViewForm.submit();

    employeeViewForm.action = oldAction;

    hideSkillsDialog();
    return true;
}
;// function for collapse/expand list
// call for example <img alt="" src="images/minus.gif" id='img_list' width="9px" border="0" height="9px" style="cursor: pointer;" onclick="switchElemView(this, ${listItems}, null);"/> </td>
// ${listItems} - string id of list (into td or tbody)
function switchElemView(imgElem, elemId, openElem) {
    doSwitchElemView(imgElem, elemId, openElem, 'images/plus.svg', 'images/minus.svg');
}

function doSwitchElemView(imgElem, elemId, openElem, imgPlus, imgMinus) {
    var divElem = document.getElementById(elemId);
    var img = false;
    if (imgElem && imgElem.tagName !== "IMG") {
        for (var i = 0; i < imgElem.children.length; i++) {
            if (imgElem.children[i].tagName === "IMG") {
                img = imgElem.children[i];
            }
        }
    } else {
        img = imgElem;
    }
    openElem = (openElem == null) ? (divElem.style.display === "none") : openElem;
    if (openElem) {
        divElem.style.display = "";
        if (img) {
            img.src = imgMinus;
        }
    } else {
        divElem.style.display = "none";
        if (img) {
            img.src = imgPlus;
        }
    }
}

function isListExpanded(imageId) {
    res = jQuery('img[id=' + imageId + '][src=images/minus.svg]:visible').attr('src');
    if (res == undefined) {
        return false;
    } else {
        return true;
    }
}
;function filterSkills(onInit) {
    jQuery(".skill-entry").show();
    jQuery(".hideEmptySection").removeClass("hideEmptySection");

    var unchecked = [];
    jQuery("input[name='skillFilter']:not(:checked)").each(function () {
        unchecked.push(this.value);
    });

    for (var i = 0; i < unchecked.length; i++) {
        jQuery("[data-skillLevel='" + unchecked[i] + "']").parent().hide();
    }

    jQuery(".data-cols .tc-property-table").each(function () {
        var $this = jQuery(this);
        if ($this.find(".skill-entry:visible").length == 0) {
            $this.addClass("hideEmptySection");
        }
    });

    sortSkills();

    if(!onInit) {
        trackSkillFilter();
    }
}

function trackSkillFilter() {
    var checked = "";
    jQuery("input[name='skillFilter']:checked+label").each(function () {
        checked += (checked ? "," : "") + jQuery(this).text();
    });
    _gaq.push(['_trackEvent', 'Employee Skill View Filter', 'Filter Skills', checked]);
}

var showDecompositionMsg = function () {
    var popup = jQuery('#upsaDecompositionPopup');
    popup.find('#closeDecompositionMsgBtn').off('click').on('click', function () {
        WorkloadDwrUtil.upsaDecompositionMsgClose(popup.find('#dontShowDecompositionMsg').is(':checked'));
        popup.closeWin();
    });

    WorkloadDwrUtil.isShowWarnUpsaDecompositionMsg(function (isShow) {
        if (isShow) {
            popup.createWin();
        }
    });
};/*
 * Copyright © 2020 EPAM systems, Inc. All Rights Reserved. All information contained herein is, and remains the
 * property of EPAM Systems, Inc. and/or its suppliers and is protected by international intellectual
 * property law. Dissemination of this information or reproduction of this material is strictly forbidden,
 * unless prior written permission is obtained from EPAM Systems, Inc
 *
 */

var EMPL_LANG = EMPL_LANG || {};

EMPL_LANG._FULL_WIDTH = '375px';
EMPL_LANG._INIT_WIDTH = '158px';

EMPL_LANG._ENGLISH_LANGUAGE_ID = 1;

EMPL_LANG._UNSPECIFIED_LEVEL_ID = -2;
EMPL_LANG._NATIVE_LEVEL_ID = -1;

EMPL_LANG._NA_CATEGORY_ID = -1;
EMPL_LANG._SPEAKING_CATEGORY_ID = 1;
EMPL_LANG._WRITING_CATEGORY_ID = 2;
EMPL_LANG._GENERAL_CATEGORY_ID = 3;

EMPL_LANG._CATEGORY_OPTION_MAP = {
    3: {id: EMPL_LANG._GENERAL_CATEGORY_ID, text: 'General'},
    1: {id: EMPL_LANG._SPEAKING_CATEGORY_ID, text: 'Speaking'},
    2: {id: EMPL_LANG._WRITING_CATEGORY_ID, text: 'Writing'}
};

EMPL_LANG._NON_OFFICIAL_CATEGORIES = [
    {id: EMPL_LANG._GENERAL_CATEGORY_ID, text: 'General'},
    {id: EMPL_LANG._SPEAKING_CATEGORY_ID, text: 'Speaking'},
    {id: EMPL_LANG._WRITING_CATEGORY_ID, text: 'Writing'}
];
EMPL_LANG._OFFICIAL_CATEGORIES = [{id: EMPL_LANG._SPEAKING_CATEGORY_ID, text: 'Speaking'}, {id: EMPL_LANG._WRITING_CATEGORY_ID, text: 'Writing'}];
EMPL_LANG._EDIT_OFFICIAL_LANG_ACTION = 1316;
EMPL_LANG._EDIT_NON_OFFICIAL_LANG_ACTION = 1317;

EMPL_LANG._options;
EMPL_LANG._languageAssessmentList = [];
EMPL_LANG._categorySelects = [];
EMPL_LANG._categoriesForRemoval = [];
EMPL_LANG._currentCategoryOptions;
EMPL_LANG._languages = null;
EMPL_LANG._languageOptions = null;
EMPL_LANG._currentLanguage = null;
EMPL_LANG._currentAssessment = null;

EMPL_LANG._getOldAssessmentByLanguageId = function (languageId) {
    for (var i = 0; i < EMPL_LANG._languageAssessmentList.length; i++) {
        var assessment = EMPL_LANG._languageAssessmentList[i];
        if (assessment.language.id == languageId) {
            return assessment;
        }
    }
    return null;
};

EMPL_LANG._getOldAssessmentById = function (id) {
    for (var i = 0; i < EMPL_LANG._languageAssessmentList.length; i++) {
        var assessment = EMPL_LANG._languageAssessmentList[i];
        if (assessment.employeeLanguageAssessmentId == id) {
            return assessment;
        }
    }
    return null;
};

EMPL_LANG._getLanguageById = function (languageId) {
    for (var i = 0; i < EMPL_LANG._languages.length; i++) {
        var language = EMPL_LANG._languages[i];
        if (language.id == languageId) {
            return language;
        }
    }
    return null;
};


// init functions

EMPL_LANG.init = function (options) {
    if (jQuery('#assessmentDialogContainer').length === 0) {
        return;
    }

    EMPL_LANG._options = options;
    EMPL_LANG._initDialog();
    EMPL_LANG._loadLanguages();
    EMPL_LANG._initAddButton();
    EMPL_LANG._initNativeCheckBox();
    EMPL_LANG._initApplyButton();
    EMPL_LANG._initCancelButton();
    EMPL_LANG._initSelects();
    EMPL_LANG._initCalendarInputs();
    EMPL_LANG._initClearIcons();
    EMPL_LANG._initLevelDescriptionQtips();
};

EMPL_LANG._initAssessmentRecords = function () {
    jQuery(".lang").each(function () {
        var $this = jQuery(this);
        var $actionBlock = $this.find('.lang-actions');
        $this.hover(function () {
            $actionBlock.show();
        }, function () {
            $actionBlock.hide();
        });
    });
};

EMPL_LANG._initDialog = function () {
    jQuery(document).mouseup(function (e) {
        var langDialogContainer = jQuery('#assessmentDialogContainer');

        var selectMask = jQuery('#select2-drop-mask');
        if (!langDialogContainer.is(e.target) && langDialogContainer.has(e.target).length === 0 && !selectMask.is(e.target)) {
            EMPL_LANG._closeLangDialog();
            EMPL_LANG._resetLangDialog();
        }
    });
};

EMPL_LANG._initSelects = function () {
    var languageSelect = jQuery('#assessmentLanguages');
    languageSelect.change(function (e) {
        EMPL_LANG._currentLanguage = EMPL_LANG._getLanguageById(e.target.value);
        EMPL_LANG._handleLanguageChange();
    });

    var levelSelects = jQuery('select.language-levels-select');
    levelSelects.select2({
        placeholder: "CEFR Level"
    });

    var speakingCategorySelect = jQuery('.speaking-assessment-edit-value .level-category-select');
    var writingCategorySelect = jQuery('.writing-assessment-edit-value .level-category-select');
    var generalCategorySelect = jQuery('.general-assessment-edit-value .level-category-select');
    EMPL_LANG._categorySelects.push(speakingCategorySelect);
    EMPL_LANG._categorySelects.push(writingCategorySelect);
    EMPL_LANG._categorySelects.push(generalCategorySelect);

    speakingCategorySelect.change(EMPL_LANG._speakingCategoryChangeHandler);
    writingCategorySelect.change(EMPL_LANG._writingCategoryChangeHandler);

    speakingCategorySelect.change(EMPL_LANG._categoryChangeHandler);
    writingCategorySelect.change(EMPL_LANG._categoryChangeHandler);
    generalCategorySelect.change(EMPL_LANG._categoryChangeHandler);
};

EMPL_LANG._initLanguageSelect = function (data, placeholder) {
    var languageSelect = jQuery('#assessmentLanguages');
    languageSelect.select2({
        placeholder: placeholder,
        data: data,
        minimumResultsForSearch: 1,
        matcher: function (term, text) {
            return text.toUpperCase().indexOf(term.toUpperCase()) == 0;
        }
    });
    if (data != null && typeof data !== 'undefined' && data.length > 0) {
        jQuery('#btnAddLanguage').show();
    } else {
        jQuery('#btnAddLanguage').hide();
    }
};

EMPL_LANG._initCategorySelect = function (select, data, value) {
    select.select2({
        placeholder: 'Category',
        data: data
    });
    select.select2('val', value);
};

EMPL_LANG._initCalendarInputs = function () {
    var calendarInputs = jQuery('.assessment-date input');
    calendarInputs.change(function (e) {
        jQuery(e.target).attr('placeholder', 'Date');
    });
};

EMPL_LANG._initEditIcons = function () {
    var icons = jQuery('.assessment-edit-icon');

    icons.each(function () {
        var icon = jQuery(this);
        icon.click(EMPL_LANG._resetLangDialog);
        icon.click(EMPL_LANG._openLangEditDialog);
    });
};

EMPL_LANG._initNativeCheckBox = function () {
    var nativeCheckBox = jQuery('#assessmentNative');
    nativeCheckBox.change(EMPL_LANG._nativeCheckboxChangeHandler);
};

EMPL_LANG._initClearIcons = function () {
    var delIcon = jQuery('.clear-assessment-value');
    delIcon.click(EMPL_LANG._clearEditAssessmentValue);
};

EMPL_LANG._activateClearIcons = function (enabled) {

    var clearIcons = jQuery('i.icon-trash');
    if (enabled) {
        clearIcons.prop('active', true);
        clearIcons.removeClass('disabled-icon');
        clearIcons.css({cursor: 'pointer'});
    } else {
        clearIcons.prop('active', false);
        clearIcons.addClass('disabled-icon');
        clearIcons.css({cursor: 'default'});
    }
};

EMPL_LANG._showCleanIcon = function (show) {
    var clearIcons = jQuery('i.icon-trash');
    if (show) {
        clearIcons.css({display: 'inline'});
    } else {
        clearIcons.css({display: 'none'});
    }

};

EMPL_LANG._initAddButton = function () {
    var button = jQuery('#btnAddLanguage');
    button.click(EMPL_LANG._resetLangDialog);
    button.click(EMPL_LANG._openLangAddDialog);
};

EMPL_LANG._initApplyButton = function () {
    jQuery('.empl-lang-dialog-apply').click(EMPL_LANG._applyButtonClickHandler);
};

EMPL_LANG._initCancelButton = function () {
    var $cancelButton = jQuery('.empl-lang-dialog-cancel');
    $cancelButton.click(EMPL_LANG._closeLangDialog);
    $cancelButton.click(EMPL_LANG._resetLangDialog);
};

EMPL_LANG._initDeleteIcons = function () {
    jQuery('.assessment-delete-icon').click(EMPL_LANG._deleteAssessment);
};

EMPL_LANG._checkRequestAssessmentState = function() {
    if (EMPL_LANG._options.permissions.canRequestAssessment) {
        jQuery('#btnRequestLangAssessment').remove();
        var assessmentStatusUrl = 'rest/v3/employees/' + EMPL_LANG._options.employeeId + '/language-assessments/status';
        jQuery.get(assessmentStatusUrl)
            .done(function(data) {
                if (!!+data.decimalValue) {
                    jQuery('#requestLangAssessmentContact').text(data.stringValue).attr('href', 'mailto:' + data.stringValue);
                    jQuery('#requestLangAssessmentConfirm').on('click', EMPL_LANG._doRequestAssessment);
                    EMPL_LANG._initRequestBtn({
                        enabled: data.flag,
                        hint: data.name
                    });
                }
            }).fail(function() {
                EMPL_LANG._initRequestBtn({
                    enabled: false,
                    hint: 'The Learn portal is not available'
                });
            });
    }
};

EMPL_LANG._initRequestBtn = function(settings) {
    var options = EMPL_LANG._options;
    var messages = options.messages;
    var $requestBtn = jQuery('<input/>').attr({
        'id': 'btnRequestLangAssessment',
        'type': 'button',
        'value': options.employeeId === options.assessorId ? messages.takeAssessmentOwn : messages.takeAssessmentRM,
        'title': settings.hint,
        'class': 'modernButton add-btn'
    });

    !settings.enabled && $requestBtn.prop('disabled', true);

    $requestBtn.on('click', function() {
        jQuery('#requestLangAssessmentPopup').createWin();
    });

    jQuery('#requestLnagAssessmentContainer').append($requestBtn);
};

EMPL_LANG._doRequestAssessment = function() {
    var options = EMPL_LANG._options;
    var messages = options.messages;
    jQuery('#btnRequestLangAssessment').prop('disabled', true).attr('title', messages.sendingRequest);
    jQuery('#requestLangAssessmentPopup').closeWin();
    var assessmentRequestUrl = 'rest/v3/employees/' + options.employeeId + '/language-assessments/request';
    jQuery.post(assessmentRequestUrl)
        .done(function() {
            alert(messages.requestSubmitted);
        })
        .fail(function() {
            alert(messages.learnUnavailable);
        }).always(EMPL_LANG._checkRequestAssessmentState);
};

// end of init functions

// load functions

EMPL_LANG._loadLanguages = function () {
    jQuery.ajax({
        url: 'rest/v3/employees/language-assessments/languages',
        method: 'GET'
    }).done(EMPL_LANG._filterAvailableLanguages)
            .done(EMPL_LANG._loadEmployeeAssessments);
};

EMPL_LANG._filterAvailableLanguages = function (languages) {
    EMPL_LANG._languages = [];
    EMPL_LANG._languageOptions = [];
    for (var i = 0; i < languages.length; i++) {
        var language = languages[i];
        if (EMPL_LANG._canEditLanguage(language)) {
            EMPL_LANG._languages.push(language);
            var languageOption = {id: language.id, text: language.name};
            EMPL_LANG._languageOptions.push(languageOption);
        }
    }
};

EMPL_LANG._loadEmployeeAssessments = function () {
    EMPL_LANG._showLoader();
    jQuery.ajax({
        url: 'rest/v3/employees/' + EMPL_LANG._options.employeeId + '/language-assessments',
        method: 'GET',
        success: EMPL_LANG._prepareAssessmentView
    });
};

EMPL_LANG._prepareAssessmentView = function (assessmentsList) {
    EMPL_LANG._buildAssessmentsView(assessmentsList);
    EMPL_LANG._removeAlreadyUsedLanguages();
    EMPL_LANG._initAssessmentRecords();
    EMPL_LANG._initEditIcons();
    EMPL_LANG._initAssessorQtips();
    EMPL_LANG._initDeleteIcons();
    EMPL_LANG._checkRequestAssessmentState();
};

EMPL_LANG._buildAssessmentsView = function (assessmentList) {
    var container = jQuery('#employeeAssessmentsContainer');
    container.html('');
    container.append(EMPL_LANG._buildLoader());

    EMPL_LANG._languageAssessmentList = assessmentList.reduce(function (result, asmt) {
        asmt.values.forEach(function (val) {
            val.employeeLanguageAssessmentId = asmt.employeeLanguageAssessmentId;
        });
        if (typeof result[asmt.language.id] !== 'undefined') {
            var assessments = result.assessments[result[asmt.language.id]];
            assessments.values = assessments.values.concat(asmt.values);
        } else {
            result[asmt.language.id] = result.assessments.length;
            result.assessments.push(asmt);
        }
        return result;
    }, {assessments: []}).assessments;
    if (EMPL_LANG._languageAssessmentList.length === 0) {
        container.append('N/A');
        EMPL_LANG._hideLoader();
        return;
    }

    for (var assessmentIndex = 0; assessmentIndex < EMPL_LANG._languageAssessmentList.length; assessmentIndex++) {
        var assessment = EMPL_LANG._languageAssessmentList[assessmentIndex];
        var assessmentValues = assessment.values;

        var assessmentRecord = new DOMBuilder('div', {'class': 'lang'});
        for (var valueIndex = 0; valueIndex < assessmentValues.length; valueIndex++) {
            var assessmentValue = assessmentValues[valueIndex];
            var isUnspecified = assessmentValue.languageLevel.languageLevelId == EMPL_LANG._UNSPECIFIED_LEVEL_ID;
            var assessmentValueRecord = new DOMBuilder('div', {'class': 'lang-attr'});
            if (assessment.official && assessmentValue.isAssessmentOutdated) {
                assessmentValueRecord.appendChild(new DOMBuilder("i", {'class': 'icon-star-half-empty', 'title': 'Outdated Assessment'}));
            } else if (!isUnspecified && assessment.official) {
                assessmentValueRecord.appendChild(new DOMBuilder("i", {'class': 'icon-star', 'title': 'Official Assessment'}));
            }
            var assessmentValueContent = assessment.language.name + ' - ';
            assessmentValueContent += ((assessmentValue.languageLevelType.id != EMPL_LANG._NA_CATEGORY_ID) ? assessmentValue.languageLevelType.name + ' - ' : '');
            assessmentValueContent += assessmentValue.languageLevel.cerfScale;
            var assessmentViewValueClass = (isUnspecified) ? '' : 'specified-language-level';
            var assessmentValueContentRecord = new DOMBuilder('span', {'class': assessmentViewValueClass}, assessmentValueContent);
            assessmentValueRecord.appendChild(assessmentValueContentRecord);
            var assessorRecord =
                    new DOMBuilder('p', {'class': 'assessor-record'}, assessmentValue.assessmentDate.replace(new RegExp('-', 'g'), ' ') + ' by ' + assessment.assessor.name);
            assessmentValueRecord.appendChild(assessorRecord);
            if (valueIndex == 0) {
                var assessmentControlsContainer = new DOMBuilder('div', {'class': 'lang-actions'});
                var assessmentId = assessment.employeeLanguageAssessmentId;
                var languageId = assessment.language.id;
                if (EMPL_LANG._options.permissions.empLanguagesManagedInUpsa && EMPL_LANG._canEditLanguage(assessment.language) && !assessment.official) {
                    var editIcon = new DOMBuilder('i', {'class': 'icon-pencil green-color assessment-edit-icon', 'assessmentId': assessmentId, 'languageId': languageId, 'title': EMPL_LANG._options.messages.editAssessment});
                    assessmentControlsContainer.appendChild(editIcon);
                }
                if (assessment.canDeleteAssessment && !assessment.official && EMPL_LANG._options.permissions.epIsManagedInUpsa
                    && EMPL_LANG._options.permissions.empLanguagesManagedInUpsa) {
                    var delIcon =
                            new DOMBuilder('i', {'class': 'icon-remove red-color assessment-delete-icon', 'assessmentId': assessmentId, 'languageId': languageId, 'title': EMPL_LANG._options.messages.deleteAssessment});
                    assessmentControlsContainer.appendChild(delIcon);
                }
                assessmentValueRecord.appendChild(assessmentControlsContainer);
            }
            assessmentRecord.appendChild(assessmentValueRecord);
        }
        container.append(assessmentRecord.toString());
        if (EMPL_LANG._currentAssessment && eq(add(EMPL_LANG._currentAssessment, "1"), assessmentId)) {
            var oldLanguageDataArray = getLocalStorage(EMPL_LANG._currentAssessment);
            if (oldLanguageDataArray) {
                clearLocalStorage(EMPL_LANG._currentAssessment);
                setLocalStorage(assessmentId, oldLanguageDataArray);
                EMPL_LANG._currentAssessment = assessmentId;
            }
            ;
        }

    }
    EMPL_LANG._hideLoader();
};

EMPL_LANG._canEditLanguage = function (language) {
    var canEditLanguage =
            (language.actionId == EMPL_LANG._EDIT_NON_OFFICIAL_LANG_ACTION && EMPL_LANG._options.permissions.canEditOtherAssessments)
            || EMPL_LANG._canOnlySetNative(language.id);
    return canEditLanguage;
};

EMPL_LANG._removeAlreadyUsedLanguages = function () {
    if (EMPL_LANG._languages == null) {
        // something went wrong
        return;
    }
    EMPL_LANG._languageOptions = [];
    for (var i = 0; i < EMPL_LANG._languages.length; i++) {
        var language = EMPL_LANG._languages[i];
        var assessment = EMPL_LANG._getOldAssessmentByLanguageId(language.id);
        if (assessment == null) {
            var languageOption = {id: language.id, text: language.name};
            EMPL_LANG._languageOptions.push(languageOption);
        }
    }
    EMPL_LANG._initLanguageSelect(EMPL_LANG._languageOptions, 'Language');
};

// end of load functions

EMPL_LANG._handleLanguageChange = function () {
    EMPL_LANG._hideErrorMarkers();
    EMPL_LANG._resetNativeCheckbox();
    EMPL_LANG._resetCalendarInputs();
    EMPL_LANG._resetLevelSelects();
    EMPL_LANG._resetCategorySelects();

    var langDialogContainer = jQuery('#assessmentDialogContainer');
    langDialogContainer.css('width', EMPL_LANG._FULL_WIDTH);
    jQuery('.native-checkbox').css('display', 'inline-block');

    if (EMPL_LANG._currentLanguage.cerfAssessment) {
        EMPL_LANG._currentCategoryOptions = EMPL_LANG._OFFICIAL_CATEGORIES;
    } else {
        EMPL_LANG._currentCategoryOptions = EMPL_LANG._NON_OFFICIAL_CATEGORIES;
    }

    for (var i = 0; i < EMPL_LANG._categorySelects.length; i++) {
        var categorySelect = EMPL_LANG._categorySelects[i];
        EMPL_LANG._initCategorySelect(categorySelect, EMPL_LANG._currentCategoryOptions, '');
    }

    if (EMPL_LANG._canOnlySetNative(EMPL_LANG._currentLanguage.id)) {
        EMPL_LANG._disableSpeakingSection();
        EMPL_LANG._placeCommonWarning(EMPL_LANG._options.messages.nativeOnly);
    }

    jQuery('.speaking-assessment-edit-value').show();
    EMPL_LANG._hideEditValueSection('.writing-assessment-edit-value');
    EMPL_LANG._hideEditValueSection('.general-assessment-edit-value');
    jQuery('.assessment-buttons').show();
    jQuery('#level-description-hint').show();

    EMPL_LANG._correctScreenScroll(langDialogContainer);
    EMPL_LANG._updateCalendarValidation(EMPL_LANG._currentLanguage.id);
};

EMPL_LANG._updateCalendarValidation = function (langId) {
    var oldAssessment = EMPL_LANG._getOldAssessmentByLanguageId(langId);
    var maxAssessmentDates = {};
    maxAssessmentDates[EMPL_LANG._SPEAKING_CATEGORY_ID] = null;
    maxAssessmentDates[EMPL_LANG._WRITING_CATEGORY_ID] = null;
    maxAssessmentDates[EMPL_LANG._GENERAL_CATEGORY_ID] = null;
    var currentAssessmentDate = null;
    if (oldAssessment != null) {
        for (var i = 0; i < oldAssessment.values.length; i++) {
            if (oldAssessment.values[i].languageLevel.languageLevelId != EMPL_LANG._UNSPECIFIED_LEVEL_ID) {
                currentAssessmentDate = jQuery.datepicker.parseDate('dd-M-yy', oldAssessment.values[i].assessmentDate);
                if ( maxAssessmentDates[oldAssessment.values[i].languageLevelType.id] == null || 
                     maxAssessmentDates[oldAssessment.values[i].languageLevelType.id] < currentAssessmentDate) {
                    maxAssessmentDates[oldAssessment.values[i].languageLevelType.id] = currentAssessmentDate;
                }
            }
        }
    }
    for (var i in maxAssessmentDates) {
        if (maxAssessmentDates[i] != null) {
            maxAssessmentDates[i].setDate(maxAssessmentDates[i].getDate() + 1);
        } else {
            var startDate = new Date();
            startDate.setFullYear(startDate.getFullYear() - 10);
            maxAssessmentDates[i] = startDate;
        }
     }
    getComponentCalendar('speakingAssessmentDateCalendar').setParam("validPeriodStart", maxAssessmentDates[EMPL_LANG._SPEAKING_CATEGORY_ID]);
    getComponentCalendar('writingAssessmentDateCalendar').setParam("validPeriodStart", maxAssessmentDates[EMPL_LANG._WRITING_CATEGORY_ID]);
    getComponentCalendar('generalAssessmentDateCalendar').setParam("validPeriodStart", maxAssessmentDates[EMPL_LANG._GENERAL_CATEGORY_ID]);
};

EMPL_LANG._nativeCheckboxChangeHandler = function (e) {
    var isChecked = e.target.checked;
    if (isChecked) {
        EMPL_LANG._disableSpeakingSection();
    } else {
        if (!EMPL_LANG._canOnlySetNative(EMPL_LANG._currentLanguage.id)) {
            EMPL_LANG._enableSpeakingSection();
        }
    }
};

EMPL_LANG._canOnlySetNative = function (languageId) {
    var checkResult = (languageId == EMPL_LANG._ENGLISH_LANGUAGE_ID)
            && EMPL_LANG._options.permissions.canSetEnglishAsNative;
    return checkResult;
};

EMPL_LANG._categoryChangeHandler = function (e) {
    var targetSelect = jQuery(e.target);
    var changedValue = e.target.value;
    for (var i = 0; i < EMPL_LANG._categorySelects.length; i++) {
        var otherSelect = EMPL_LANG._categorySelects[i];
        if (otherSelect.attr('id') != targetSelect.attr('id')) {
            EMPL_LANG._deleteCurrentCategoryOption(changedValue);
            EMPL_LANG._addCurrentCategoryOption(otherSelect.select2('val'));
            EMPL_LANG._initCategorySelect(otherSelect, EMPL_LANG._currentCategoryOptions, otherSelect.select2('val'));
            EMPL_LANG._deleteCurrentCategoryOption(otherSelect.select2('val'));
        }
    }
    var prevValue = (typeof targetSelect.attr('prevValue') === 'undefined') ? '' : targetSelect.attr('prevValue');

    if (prevValue != '') {
        EMPL_LANG._clearAssessmentDate(targetSelect);
        EMPL_LANG._addCurrentCategoryOption(prevValue);
        for (var i = 0; i < EMPL_LANG._categorySelects.length; i++) {
            var otherSelect = EMPL_LANG._categorySelects[i];
            EMPL_LANG._addCurrentCategoryOption(otherSelect.select2('val'));
            EMPL_LANG._initCategorySelect(otherSelect, EMPL_LANG._currentCategoryOptions, otherSelect.select2('val'));
            EMPL_LANG._deleteCurrentCategoryOption(otherSelect.select2('val'));
        }
    }

    targetSelect.attr('prevValue', changedValue);
};

EMPL_LANG._speakingCategoryChangeHandler = function (e) {
    var writingCategorySection = jQuery('.writing-assessment-edit-value');
    if (!writingCategorySection.is(':visible')) {
        var speakingCalendarInput = jQuery('.speaking-assessment-edit-value > .assessment-date input');
        var writingCalendarInput = writingCategorySection.find('.assessment-date input');
        writingCalendarInput.val(speakingCalendarInput.val());
        writingCalendarInput.css('color', speakingCalendarInput.css('color'));
        writingCategorySection.show();
    }
};

EMPL_LANG._writingCategoryChangeHandler = function (e) {
    if (EMPL_LANG._currentLanguage.cerfAssessment) {
        return;
    }
    var generalCategorySection = jQuery('.general-assessment-edit-value');
    if (!generalCategorySection.is(':visible')) {
        var writingCalendarInput = jQuery('.writing-assessment-edit-value > .assessment-date input');
        var generalCalendarInput = generalCategorySection.find('.assessment-date input');
        generalCalendarInput.val(writingCalendarInput.val());
        generalCalendarInput.css('color', writingCalendarInput.css('color'));
        generalCategorySection.show();
    }
};

EMPL_LANG._disableSpeakingSection = function () {
    var section = jQuery('.speaking-assessment-edit-value');
    var $fillSections = jQuery('#assessmentDialogContainer > .assessment-edit-value:visible');

    if (EMPL_LANG._currentAssessment && $fillSections.length > 0) {

        var $tempSection, languageLevelSelect, categorySelect, calendarInput, rowArray = [], languageDataArray = [];
        for (var i = 0, max = $fillSections.length; i < max; i++) {
            $tempSection = jQuery($fillSections[i]);
            rowArray.length = 0;
            languageLevelSelect = $tempSection.find("select.language-levels-select");
            categorySelect = $tempSection.find('.level-category-select');
            calendarInput = $tempSection.find('.assessment-date input');
            if (languageLevelSelect.select2('val') === "" || categorySelect.select2('val') === "" || calendarInput.val() === "") {
                continue;
            }
            rowArray.push(languageLevelSelect.select2('val'), categorySelect.select2('val'), calendarInput.val());
            languageDataArray.push(rowArray.slice());
        }
        if (languageDataArray.length > 0) {
            setLocalStorage(EMPL_LANG._currentAssessment, JSON.stringify(languageDataArray));
        }
    }

    var languageLevelSelect = section.find('.language-levels > .language-levels-select');
    languageLevelSelect.select2('val', '');
    languageLevelSelect.select2('readonly', true);

    var categorySelect = section.find('.language-level-types > .level-category-select');
    categorySelect.select2('val', '');
    categorySelect.select2('readonly', true);

    var calendar = getComponentCalendar('speakingAssessmentDateCalendar');
    calendar.setDisabled(true);
    var calendarInput = section.find('.assessment-date input');
    calendarInput.val('');

    EMPL_LANG._activateClearIcons(false);

    EMPL_LANG._hideEditValueSection('.writing-assessment-edit-value');
    EMPL_LANG._hideEditValueSection('.general-assessment-edit-value');
};

EMPL_LANG._enableSpeakingSection = function () {
    jQuery('.speaking-assessment-edit-value > .language-levels > select.language-levels-select').select2('readonly', false);
    jQuery('.speaking-assessment-edit-value > .language-level-types > .level-category-select').select2('readonly', false);
    var calendar = getComponentCalendar('speakingAssessmentDateCalendar');
    calendar.setDisabled(false);
    EMPL_LANG._activateClearIcons(true);

    if (EMPL_LANG._currentAssessment && jQuery("#assessmentDialogContainer > .assessment-edit-value:visible").length > 0) {
        var languageDataString = getLocalStorage(EMPL_LANG._currentAssessment);
        if (languageDataString && languageDataString.length > 20) {
            var languageDataArray = JSON.parse(languageDataString);
            var $storageTempSection, $displayTempSection, languageLevelSelect, categorySelect, calendarInput;
            var $displaySections = jQuery('#assessmentDialogContainer > .assessment-edit-value');
            for (var i = 0; i < languageDataArray.length; i++) {
                $storageTempSection = languageDataArray[i];
                $displayTempSection = jQuery($displaySections[i]);

                languageLevelSelect = $displayTempSection.find('select.language-levels-select');
                categorySelect = $displayTempSection.find('.level-category-select');
                calendarInput = $displayTempSection.find('.assessment-date input');

                languageLevelSelect.select2('val', $storageTempSection[0]);
                categorySelect.select2('val', $storageTempSection[1]).trigger("change");
                categorySelect.select2('val', $storageTempSection[1]);
                calendarInput.val($storageTempSection[2]);
            }
        }
    }
};

EMPL_LANG._clearEditAssessmentValue = function (e) {
    if (!jQuery(e.target).prop('active')) {
        return;
    }
    var section = jQuery(e.target).parent().parent();
    var levelSelect = section.find('select.language-levels-select');
    levelSelect.select2('val', '');
    var categorySelect = section.find('input.level-category-select');
    categorySelect.attr('prevValue', '');
    var categoryPreviousValue = categorySelect.select2('val');
    EMPL_LANG._addCurrentCategoryOption(categoryPreviousValue);
    for (var i = 0; i < EMPL_LANG._categorySelects.length; i++) {
        var otherSelect = EMPL_LANG._categorySelects[i];
        if (otherSelect.attr('prevValue') == categorySelect.attr('prevValue')) {
            otherSelect.attr('prevValue', '');
        }
        if (otherSelect.attr('id') != categorySelect.attr('id')) {
            EMPL_LANG._addCurrentCategoryOption(otherSelect.select2('val'));
            EMPL_LANG._initCategorySelect(otherSelect, EMPL_LANG._currentCategoryOptions, otherSelect.select2('val'));
            EMPL_LANG._deleteCurrentCategoryOption(otherSelect.select2('val'));
        }
    }
    categorySelect.attr('prevValue', '');
    categorySelect.select2('val', '');

    var calendarInput = section.find('.assessment-date input');
    calendarInput.val('');

    EMPL_LANG._categoriesForRemoval.push({
        assessmentId: section.attr('assessmentId'),
        categoryId: categoryPreviousValue
    });
};

EMPL_LANG._clearAssessmentDate = function (target) {
    target.parents('.assessment-edit-value').find('.assessment-date input').val('');
};

EMPL_LANG._hideEditValueSection = function (sectionClass) {
    var section = jQuery(sectionClass);
    section.hide();
    var levelSelect = section.find('select.language-levels-select');
    levelSelect.select2('val', '');
    var categorySelect = section.find('.level-category-select');
    categorySelect.select2('val', '');

    var calendarInput = section.find('.assessment-date input');
    calendarInput.val('');
};

EMPL_LANG._deleteCurrentCategoryOption = function (id) {
    var truncatedOptions = [];
    for (var i = 0; i < EMPL_LANG._currentCategoryOptions.length; i++) {
        var option = EMPL_LANG._currentCategoryOptions[i];
        if (option.id != id) {
            truncatedOptions.push(option);
        }
    }
    EMPL_LANG._currentCategoryOptions = truncatedOptions;
};

EMPL_LANG._addCurrentCategoryOption = function (id) {
    if (id === '') {
        return;
    }
    var optionToAdd = EMPL_LANG._CATEGORY_OPTION_MAP[id];
    EMPL_LANG._currentCategoryOptions.push(optionToAdd);
};

EMPL_LANG._applyButtonClickHandler = function (e) {
    EMPL_LANG._showLoader();
    var assessmentForSave = EMPL_LANG._collectAssessments();

    var assessmentValid = EMPL_LANG._validateAssessment(assessmentForSave);

    if (assessmentValid) {
        EMPL_LANG._categoriesForRemoval.forEach(EMPL_LANG._deleteAssessmentCategory);
        EMPL_LANG._categoriesForRemoval = [];
        if (assessmentForSave.values.length > 0) {
            EMPL_LANG._saveAssessment(assessmentForSave);
        } else {
            EMPL_LANG._loadEmployeeAssessments();
        }
        EMPL_LANG._closeLangDialog();
        EMPL_LANG._resetLangDialog();
    } else {
        EMPL_LANG._hideLoader();
    }
};

EMPL_LANG._collectAssessments = function () {
    var isNative = jQuery('#assessmentNative').prop('checked');

    var assessmentForSave = {};
    assessmentForSave.assessorId = EMPL_LANG._options.assessorId;
    assessmentForSave.languageId = EMPL_LANG._currentLanguage.id;

    var assessmentValuesForSave = [];
    var editValueContainers = jQuery('#assessmentDialogContainer').find('.assessment-edit-value:visible');

    for (var i = 0; i < editValueContainers.length; i++) {
        var editValueContainer = jQuery(editValueContainers[i]);

        var assessmentValueForSave = {};
        if (isNative) {
            assessmentValueForSave.languageLevelId = EMPL_LANG._NATIVE_LEVEL_ID;
            assessmentValueForSave.languageLevelTypeId = EMPL_LANG._NA_CATEGORY_ID;
            assessmentValueForSave.assessmentDate = jQuery.datepicker.formatDate('dd-M-yy', new Date());
        } else {
            assessmentValueForSave.languageLevelId = editValueContainer.find('select.language-levels-select').val();
            assessmentValueForSave.languageLevelTypeId = editValueContainer.find('.level-category-select').select2('val');
            assessmentValueForSave.assessmentDate = editValueContainer.find('.assessment-date input').val();
        }

        assessmentValueForSave.rawValuesContainer = editValueContainer; // will be removed after validation
        if (assessmentValueForSave.languageLevelTypeId != '') {
            if (EMPL_LANG._hasAssessmentValueChanged(assessmentValueForSave)) {
                assessmentValuesForSave.push(assessmentValueForSave);
            }
        }
    }
    assessmentForSave.values = assessmentValuesForSave;
    return assessmentForSave;
};

// validation

EMPL_LANG._validateAssessment = function (assessmentForSave) {
    EMPL_LANG._hideErrorMarkers();

    if ((typeof assessmentForSave.values === 'undefined' || assessmentForSave.values.length == 0)
        && EMPL_LANG._categoriesForRemoval.length == 0) {
        EMPL_LANG._placeCommonError(EMPL_LANG._options.messages.nothingToSave);
        return false;
    }
    if (EMPL_LANG._isSameCategories(assessmentForSave)) {
        EMPL_LANG._placeCommonError(EMPL_LANG._options.messages.sameCategories);
        EMPL_LANG._markElementError(jQuery('.level-category-select'));
        return false;
    }
    if (EMPL_LANG._thereAreEmptyFields(assessmentForSave)) {
        return false;
    }
    if (EMPL_LANG._thereAreInvalidDates(assessmentForSave)) {
        return false;
    }
    if (EMPL_LANG._incorrectNonOfficial(assessmentForSave)) {
        return false;
    }
    EMPL_LANG._deleteRawContainers(assessmentForSave); // promises must be kept
    return true;
};

EMPL_LANG._hasAssessmentValueChanged = function (assessmentValue) {
    var languageLevel = assessmentValue.rawValuesContainer.find('select.language-levels-select');
    var languageCategory = assessmentValue.rawValuesContainer.find('input.level-category-select');
    var assessmentDate = assessmentValue.rawValuesContainer.find('.assessment-date input');

    return languageLevel.data('old') != languageLevel.val()
            || languageCategory.data('old') != languageCategory.val()
            || assessmentDate.data('old') != assessmentDate.val();
};

EMPL_LANG._isSameCategories = function (assessmentForSave) {
    var values = assessmentForSave.values;
    if (typeof values === 'undefined' || values.length < 2) {
        return false;
    }
    for (var i = 0; i < values.length; i++) {
        for (var j = i + 1; j < values.length; j++) {
            if (values[i].languageLevelTypeId != values[j].languageLevelTypeId) {
                return false;
            }
        }
    }
    return true;
};

EMPL_LANG._isNativeLevel = function (assessmentForSave) {
    var values = assessmentForSave.values;
    if (typeof values === 'undefined' || values.length == 0) {
        return false;
    }
    return values[0].languageLevelId == EMPL_LANG._NATIVE_LEVEL_ID;
};

EMPL_LANG._thereIsSpeakingAssessment = function (assessmentForSave) {
    return EMPL_LANG._thereIsAssessmentCategory(assessmentForSave, EMPL_LANG._SPEAKING_CATEGORY_ID);
};

EMPL_LANG._thereIsWritingAssessment = function (assessmentForSave) {
    return EMPL_LANG._thereIsAssessmentCategory(assessmentForSave, EMPL_LANG._WRITING_CATEGORY_ID);
};

EMPL_LANG._thereIsGeneralAssessment = function (assessmentForSave) {
    return EMPL_LANG._thereIsAssessmentCategory(assessmentForSave, EMPL_LANG._GENERAL_CATEGORY_ID);
};

EMPL_LANG._thereIsAssessmentCategory = function (assessment, categoryId) {
    var values = assessment.values;
    var checkResult = false;
    for (var i = 0; i < values.length; i++) {
        if (values[i].languageLevelTypeId == categoryId) {
            checkResult = true;
        }
    }
    return checkResult;
};

EMPL_LANG._thereAreEmptyFields = function (assessmentForSave) {
    var values = assessmentForSave.values;
    var validateResult = false;
    for (var i = 0; i < values.length; i++) {
        var value = values[i];
        if (EMPL_LANG._isEmpty(value.languageLevelId)) {
            EMPL_LANG._markElementError(value.rawValuesContainer.find('.language-levels-select'));
            validateResult = true;
        }
        if (EMPL_LANG._isEmpty(value.languageLevelTypeId)) {
            EMPL_LANG._markElementError(value.rawValuesContainer.find('.level-category-select'));
            validateResult = true;
        }
        if (EMPL_LANG._isEmpty(value.assessmentDate) || (value.assessmentDate === 'Date')) {
            EMPL_LANG._markElementError(value.rawValuesContainer.find('.assessment-date input'));
            validateResult = true;
        }
    }
    return validateResult;
};

EMPL_LANG._thereAreInvalidDates = function (assessmentForSave) {
    var validateResult = false;
    var oldAssessment = EMPL_LANG._getOldAssessmentByLanguageId(assessmentForSave.languageId);
    if (oldAssessment == null) {
        return validateResult;
    }
    var oldValues = oldAssessment.values;
    var values = assessmentForSave.values;

    var currentDate = new Date();
    for (var newValueIndex = 0; newValueIndex < values.length; newValueIndex++) {
        var value = values[newValueIndex];
        var newDate = jQuery.datepicker.parseDate('dd-M-yy', value.assessmentDate);
        if (newDate.getTime() > currentDate.getTime()) {
            EMPL_LANG._markElementError(value.rawValuesContainer.find('.assessment-date input'));
            EMPL_LANG._placeCommonError(EMPL_LANG._options.messages.tooBigDate, [newDate, currentDate]);
            validateResult = true;
        }

        for (var oldValueIndex = 0; oldValueIndex < oldValues.length; oldValueIndex++) {
            var oldAssessment = oldValues[oldValueIndex];
            if (oldAssessment.languageLevelType.id == value.languageLevelTypeId) {
                var oldDate = jQuery.datepicker.parseDate('dd-M-yy', oldAssessment.assessmentDate);
                if (newDate.getTime() <= oldDate.getTime()) {
                    EMPL_LANG._markElementError(value.rawValuesContainer.find('.assessment-date input'));
                    EMPL_LANG._placeCommonError(EMPL_LANG._options.messages.tooSmallDate, [newDate, oldDate]);
                    validateResult = true;
                }
            }
        }
    }
    return validateResult;
};

EMPL_LANG._incorrectNonOfficial = function (assessmentForSave) {
    var validateResult = false;
    var oldAssessment = EMPL_LANG._getOldAssessmentByLanguageId(assessmentForSave.languageId);
    if (oldAssessment == null) {
        return validateResult;
    }
    if (!assessmentForSave.official) {
        if (oldAssessment.official) {
            EMPL_LANG._placeCommonError(EMPL_LANG._options.messages.officialAlreadySet);
            validateResult = true;
        }
    }
    return validateResult;
};

EMPL_LANG._deleteRawContainers = function (assessmentForSave) {
    var values = assessmentForSave.values;
    for (var i = 0; i < values.length; i++) {
        delete values[i].rawValuesContainer;
    }
};

EMPL_LANG._placeCommonError = function (message, params) {
    var errorContainer = jQuery('#language-dialog-error-container');
    errorContainer.removeClass();
    errorContainer.addClass('language-assessment-general-error');
    errorContainer.text(EMPL_LANG._formatMessage(message, params));
    errorContainer.show();
};

EMPL_LANG._placeCommonWarning = function (message) {
    var errorContainer = jQuery('#language-dialog-error-container');
    errorContainer.removeClass();
    errorContainer.addClass('language-assessment-general-warning');
    errorContainer.text(message);
    errorContainer.show();
};

EMPL_LANG._markElementError = function (element) {
    element.addClass('element-flash-error');
    element.children().addClass('element-flash-error');
    window.setTimeout(function () {
        element.removeClass('element-flash-error');
        element.addClass('element-error');
        element.children().removeClass('element-flash-error');
        element.children().addClass('element-error');
    }, 500);
};

EMPL_LANG._hideErrorMarkers = function () {
    jQuery('.element-error').removeClass('element-error');
    jQuery('#language-dialog-error-container').hide();
};

EMPL_LANG._isEmpty = function (item) {
    return (typeof item === 'undefined') || item === '';
};

EMPL_LANG._formatMessage = function (message, params) {
    if (!!params) {
        for (var i = 0; i < params.length; i++) {
            var replacement = EMPL_LANG._formatValue(params[i]);
            var regex = new RegExp('\\{' + i + '\\}', 'g');
            message = message.replace(regex, replacement);
        }
    }

    return message;
};

EMPL_LANG._formatValue = function (value) {
    if (value instanceof Date) {
        value = jQuery.datepicker.formatDate('dd-M-yy', value);
    }
    return value;
};

// end of validation

EMPL_LANG._saveAssessment = function (assessmentForSave) {
    jQuery.ajax({
        url: 'rest/v3/employees/' + EMPL_LANG._options.employeeId + '/language-assessments',
        data: JSON.stringify(assessmentForSave),
        method: "POST",
        contentType: "application/json"
    }).done(EMPL_LANG._loadEmployeeAssessments);
};

EMPL_LANG._deleteAssessment = function (e) {
    var assessmentId = jQuery(e.target).attr('assessmentId');
    var languageId = jQuery(e.target).attr('languageId');
    var assessment = EMPL_LANG._getOldAssessmentById(assessmentId);
    var languageName = assessment.language.name;

    var confirmMessage = 'Delete last assessment for ' + languageName + '.\n';
    confirmMessage += 'Are you sure?';

    if (confirm(confirmMessage)) {
        EMPL_LANG._showLoader();
    } else {
        return false;
    }
    clearLocalStorage(assessmentId);
    jQuery.ajax({
        url: 'rest/v3/employees/language-assessments/current/' + EMPL_LANG._options.employeeId + '/' + languageId,
        method: "DELETE",
        contentType: "application/json"
    }).done(EMPL_LANG._loadEmployeeAssessments);
};

EMPL_LANG._deleteAssessmentCategory = function (categoryData, reload) {
    jQuery.ajax({
        url: 'rest/v3/employees/language-assessments/' + categoryData.assessmentId + '/' + categoryData.categoryId,
        method: "DELETE",
        contentType: "application/json",
        async: false
    }).done(function () {
        !!reload && EMPL_LANG._loadEmployeeAssessments();
    });
};

EMPL_LANG._openLangEditDialog = function (e) {
    EMPL_LANG._currentAssessment = jQuery(e.target).attr('assessmentId');
    var langDialogContainer = jQuery('#assessmentDialogContainer');
    var containerOuterHeight = langDialogContainer.outerHeight();
    var editIcon = jQuery(this);

    EMPL_LANG._copyEditedParameters(editIcon);

    var offset = editIcon.offset();
    var newTop = offset.top;
    var newLeft = offset.left;

    newTop = newTop - (containerOuterHeight / 2) + (editIcon.outerHeight() / 2);
    newLeft = newLeft + editIcon.outerWidth() + 33;
    langDialogContainer.show();
    langDialogContainer.addClass('canvas-id');
    langDialogContainer.offset({
        top: newTop,
        left: newLeft
    });
    EMPL_LANG._correctScreenScroll(langDialogContainer);
};

EMPL_LANG._copyEditedParameters = function (editIcon) {
    var assessmentId = editIcon.attr('assessmentId');
    var assessment = EMPL_LANG._getOldAssessmentById(assessmentId);

    EMPL_LANG._currentLanguage = assessment.language;
    EMPL_LANG._initLanguageSelect(EMPL_LANG._languageOptions, assessment.language.name);
    jQuery('#assessmentLanguages').select2('readonly', true);
    EMPL_LANG._handleLanguageChange();

    if (!EMPL_LANG._canOnlySetNative(EMPL_LANG._currentLanguage.id)) {
        var assessmentValues = assessment.values.sort(function (a, b) {
            return a.languageLevelType.id - b.languageLevelType.id;
        });
        var editValueContainers = jQuery('#assessmentDialogContainer').find('.assessment-edit-value');
        for (var i = 0; i < assessmentValues.length; i++) {
            var value = assessmentValues[i];
            var languageLevelId = value.languageLevel.languageLevelId;
            var languageLevelTypeId = value.languageLevelType.id;
            var assessmentDate = value.assessmentDate;

            var editValueContainer = jQuery(editValueContainers[i]);
            if (languageLevelId == EMPL_LANG._NATIVE_LEVEL_ID) {
                var nativeCheckbox = jQuery('#assessmentNative');
                nativeCheckbox.prop('checked', true).change();
            } else if (languageLevelId != EMPL_LANG._UNSPECIFIED_LEVEL_ID && languageLevelId != EMPL_LANG._NATIVE_LEVEL_ID) {
                var levelSelect = editValueContainer.find('select.language-levels-select');
                levelSelect.select2('val', languageLevelId);
                levelSelect.data('old', languageLevelId);
                var categorySelect = editValueContainer.find('.level-category-select');
                categorySelect.select2('val', languageLevelTypeId).change();
                categorySelect.data('old', languageLevelTypeId);
                var dateInput = editValueContainer.find('.assessment-date input[type=text]');
                dateInput.data('old', assessmentDate);
                dateInput.val(assessmentDate);
            }
            EMPL_LANG._showCleanIcon(assessment.canDeleteAssessment);
            editValueContainer.attr('assessmentId', value.employeeLanguageAssessmentId);
            editValueContainer.show();
        }
    }
};

EMPL_LANG._openLangAddDialog = function (e) {
    var langDialogContainer = jQuery('#assessmentDialogContainer');
    var addButton = jQuery(this);
    var offset = addButton.offset();
    var newTop = offset.top;
    var newLeft = offset.left;
    EMPL_LANG._showCleanIcon(true);
    langDialogContainer.show();
    langDialogContainer.removeClass('canvas-id');
    langDialogContainer.offset({
        top: newTop,
        left: newLeft
    });

    EMPL_LANG._correctScreenScroll(langDialogContainer);
};

EMPL_LANG._closeLangDialog = function (e) {
    var langDialogContainer = jQuery('#assessmentDialogContainer');
    langDialogContainer.hide();
    EMPL_LANG._resetLangDialog();
};

// reset functions

EMPL_LANG._resetLangDialog = function () {
    EMPL_LANG._hideErrorMarkers();
    EMPL_LANG._resetNativeCheckbox();
    EMPL_LANG._resetCalendarInputs();
    EMPL_LANG._resetSelects();
    EMPL_LANG._resetLangDialogContainer();
    EMPL_LANG._categoriesForRemoval = [];
};

EMPL_LANG._resetNativeCheckbox = function () {
    var nativeCheckbox = jQuery('#assessmentNative');
    nativeCheckbox.prop('checked', false);
    nativeCheckbox.hide();
    jQuery('#assessmentNativeLabel').hide();
    EMPL_LANG._enableSpeakingSection();
};

EMPL_LANG._resetCalendarInputs = function () {
    var calendarInputs = jQuery('.assessment-date input');
    calendarInputs.val('');
    calendarInputs.data('old', null);
};

EMPL_LANG._resetSelects = function () {
    EMPL_LANG._resetLanguageSelect();
    EMPL_LANG._resetLevelSelects();
    EMPL_LANG._resetCategorySelects();
};

EMPL_LANG._resetLanguageSelect = function () {
    EMPL_LANG._initLanguageSelect(EMPL_LANG._languageOptions, 'Language');
    var languageSelect = jQuery('#assessmentLanguages');
    languageSelect.select2('val', '');
    languageSelect.data('old', null);
    languageSelect.select2('readonly', false);
};

EMPL_LANG._resetLevelSelects = function () {
    var levelSelects = jQuery('select.language-levels-select');
    levelSelects.each(function () {
        jQuery(this).select2('val', '').data('old', null);
    });
};

EMPL_LANG._resetCategorySelects = function () {
    var categorySelects = jQuery('.level-category-select');
    categorySelects.each(function () {
        jQuery(this).select2('val', '').data('old', null);
        ;
    });

    for (var i = 0; i < EMPL_LANG._categorySelects.length; i++) {
        EMPL_LANG._categorySelects[i].attr('prevValue', '');
    }
};

EMPL_LANG._resetLangDialogContainer = function () {
    jQuery('#level-description-hint').hide();
    jQuery('.assessment-edit-value').hide();
    jQuery('.assessment-buttons').hide();
    jQuery('.assessment-edit-value').removeAttr('assessmentId');
    jQuery('#assessmentDialogContainer').css('width', EMPL_LANG._INIT_WIDTH);
};

// end of reset functions

// qtips

EMPL_LANG._initAssessorQtips = function () {
    var assessmentValueContentRecords = jQuery('.specified-language-level');
    assessmentValueContentRecords.each(function () {
        var assessmentValueContentRecord = jQuery(this);
        var assessmentValueRecord = assessmentValueContentRecord.parent();
        assessmentValueContentRecord.qtip({
            position: {
                my: 'left middle', at: 'right middle'
            },
            content: assessmentValueRecord.find('.assessor-record').text(),
            style: {classes: 'qtip-light qtip-shadow'},
            hide: {
                fixed: true,
                delay: 300
            }
        });
    });

};

EMPL_LANG._initLevelDescriptionQtips = function () {
    var descriptionHint = jQuery('#level-description-hint');
    descriptionHint.each(function () {
        var assessmentViewValue = jQuery(this);
        assessmentViewValue.qtip({
            position: {
                my: 'left middle', at: 'right middle'
            },
            content: 'Read CEFR level description <a href="https://kb.epam.com/x/3h76CQ" target="_blank">here</a>',
            style: {classes: 'qtip-light qtip-shadow'},
            hide: {
                fixed: true,
                delay: 300
            }
        });
    });

};

// end of qtips

// util functions

EMPL_LANG._buildLoader = function () {
    return jQuery('<div/>').attr('id', 'loaderImg').addClass('language-assessment-loader');
};

EMPL_LANG._showLoader = function () {
    jQuery('.language-assessment-loader').show();
};

EMPL_LANG._hideLoader = function () {
    jQuery('.language-assessment-loader').hide();
};

EMPL_LANG._correctScreenScroll = function (container) {

    var containerBottom = container.offset().top + container.outerHeight();
    var containerTop = container.offset().top;
    var screenBottom = document.documentElement.clientHeight + (jQuery.browser.chrome ? document.body.scrollTop : document.documentElement.scrollTop);
    var screenTop = jQuery.browser.chrome ? document.body.scrollTop : document.documentElement.scrollTop;
    var newScreenTop = screenTop;

    if (containerBottom > screenBottom) {
        newScreenTop = screenTop + containerBottom - screenBottom;
    }
    if (containerTop < screenTop) {
        newScreenTop = containerTop;
    }

    if (jQuery.browser.chrome == true) {
        document.body.scrollTop = newScreenTop;
    } else {
        document.documentElement.scrollTop = newScreenTop;
    }
};

// end of util functions
;var EMPL_PACK = EMPL_PACK || {};
EMPL_PACK._options = {};

EMPL_PACK._softwarePackagesTemplate = Hogan.compile(
            '{{#packages}}' +
                '{{#render}}' +
                    '<tr class="package-row" data-id="{{packageId}}" data-fee="{{monthlyFee}}" data-changed="{{stateChanged}}" ' +
                                           ' data-assignmentdate="{{assignmentDate}}" data-needapproval="{{needApproval}}" data-basepackage="{{basePackage}}" >' +
                        '<td data-state="{{stateId}}">' +
                            '{{#showState}}' +
                                '<i class="icon-circle" style="font-size:10px;" title="{{stateName}}" ' +
                                    'data-state="{{stateId}}" data-link="{{linkToPackage}}" data-packagename="{{packageName}}" data-assignment="{{assignmentDate}}" ' +
                                    'data-approverid="{{approverId}}" data-approvername="{{approverName}}" ' +
                                    '{{#showInfo}}id="assignIcon_{{packageId}}"{{/showInfo}}>' +
                                '</i>' +
                                '{{#showInfo}}' +
                                    '<div id="assignHint_{{packageId}}" style="display: none;"></div>' +
                                '{{/showInfo}}' +
                            '{{/showState}}' +
                        '</td>' +
                        '<td>' +
                            '<a href="{{linkToPackage}}" target="_blank">' +
                                '{{packageName}}' +
                            '</a>' +
                        '</td>' +
                        '<td>' +
                        '{{#canComments}}' +
                        '<div id = "commentsBlock{{packageId}}" data-id="{{packageId}}"></div>' +
                        '{{/canComments}}' +
                        '</td>' +
                        '<td class="package-controls">' +
                            '{{#canVerify}}' +
                                '<i class="icon-ok green-color" title="Verify" onclick="EMPL_PACK._verifyPackage(\'{{packageId}}\')"></i>' +
                                '<i class="icon-remove red-color" title="Reject" onclick="EMPL_PACK._rejectPackage(\'{{packageId}}\')"></i>' +
                            '{{/canVerify}}' +
                            '{{#canApprove}}' +
                            '<i class="icon-ok green-color" title="Approve" onclick="EMPL_PACK._approvePackage(\'{{packageId}}\')"></i>' +
                            '<i class="icon-remove red-color" title="Reject" onclick="EMPL_PACK._rejectPackage(\'{{packageId}}\')"></i>' +
                            '{{/canApprove}}' +
                            '{{#canCancel}}' +
                                '<i class="icon-trash" title="Cancel" onclick="EMPL_PACK._cancelPackage(\'{{packageId}}\')"></i>' +
                            '{{/canCancel}}' +
                        '</td>' +
                    '</tr>' +
                '{{/render}}' +
            '{{/packages}}'
        );

EMPL_PACK._softwarePackageDDLOptions = {
    placeholder: 'Software Package',
    minimumResultsForSearch: 1,
    formatResult: function(option) {
        if (jQuery(option.element).data('needApproval')) {
            return '<span class="red-color">' + option.text + "</span>" + '<span style="color: #aaa; display: block;">' + jQuery(option.element).data('cc') + '</span>';
        } else {
            return '<span class="green-color">' + option.text + "</span>" + '<span style="color: #aaa; display: block;">' + jQuery(option.element).data('cc') + '</span>';
        } 
    }
};

EMPL_PACK.init = function(options) {
    EMPL_PACK._options = jQuery.extend(EMPL_PACK._options, options);

    EMPL_PACK._loadSoftwarePackages();
    if (EMPL_PACK._options.empSoftwarePackagesManagedInUpsa) {
        jQuery('#btnAddSoftwarePackage').click(EMPL_PACK._showDialog);
    } else {
        jQuery('#btnAddSoftwarePackage').click(function() {
            let urlToGo = EMPL_PACK._options.editInPeopleUrl;
            window.open(urlToGo, '_blank');
        });
    }
    jQuery('#softwarePackageSelect').change(EMPL_PACK._selectPackage);
    jQuery('#softwarePackageSelect').select2(EMPL_PACK._softwarePackageDDLOptions);
    jQuery('#softwarePackageSelect').trigger('change');
    jQuery('#requestSoftwarePackage').click(EMPL_PACK._requestPackage);
    jQuery('#closeSoftwarePackageDialog').click(EMPL_PACK._closeDialog);
};

EMPL_PACK._showDialog = function(e) {
    var $dialog = jQuery('#softwarePackageDialogContainer');
    var $addButton = jQuery(this);
    var offset = $addButton.offset();
    var newTop = offset.top;
    var newLeft = offset.left;

    $dialog.show();
    $dialog.removeClass('canvas-id');
    $dialog.offset({
        top : newTop,
        left : newLeft
    });

    EMPL_LANG._correctScreenScroll($dialog);

    e.stopPropagation();
};

EMPL_PACK._closeDialog = function() {
    var $dialog = jQuery('#softwarePackageDialogContainer');
    var $select = jQuery('#softwarePackageSelect');

    $select.val($select.find('option:eq(0)').val());
    $select.select2(EMPL_PACK._softwarePackageDDLOptions);
    $dialog.hide();
};

EMPL_PACK._selectPackage = function() {
    var $this = jQuery(this).find('option:selected');
    var packageLink = $this.data('link');
    var $icon = jQuery('#packageInfo');
    var $hint = jQuery('#packageInfoHint');

    $hint.html('Read Software Package description <a href="' + packageLink + '" target="_blank">here</a>');
    $icon.qtip('api') && $icon.qtip('api').destroy();
    initQTip('#packageInfo', '#packageInfoHint', { my: 'left center', at: 'right center'});
};

EMPL_PACK._requestPackage = function() {
    var $select = jQuery('#softwarePackageSelect');
    var $option = $select.find('option:selected');
    var $addButton = jQuery('#btnAddSoftwarePackage');
    var packageId = $option.val();

    if ($option.data('needApproval')) {
        if (!confirm(EMPL_PACK._options.requestSpWithApprove)) {
            return;
        }
    } else if ($option.data('needVerification')) {
        alert(EMPL_PACK._options.requestSpWithoutApprove);
    }

    EMPL_PACK._closeDialog();
    $addButton.hide();

    jQuery.ajax({
        url: 'rest/v3/employees/' + EMPL_PACK._options.employeeId + '/software-packages',
        method: 'post',
        data: {
            packageExternalId: packageId
        },
        beforeSend: function() {
            EMPL_PACK._showLoadingImage();
        },
        error: function(data) {
            if (!!data && !!data.responseText) {
                data = JSON.parse(data.responseText);
                alert(data.message);
            }
        },
        complete: EMPL_PACK._loadSoftwarePackages
    });
};

EMPL_PACK._verifyPackage = function(packageAssignmentId) {
    var $row = jQuery('tr[data-id=' + packageAssignmentId + ']');
    var packageName = $row.find('td:eq(1) a').text().trim();
    var monthlyFee = $row.data('fee');
    var assignmentDate = $row.data('assignmentdate');
    var isNeedApproval = $row.data('needapproval');
    var previousPackage = EMPL_PACK._findCurrentPackage();
    var message = '';
    if (!!previousPackage) {
        message = 'Current Software Package '
                + previousPackage.name
                + ' with monthly price $'
                + previousPackage.fee
                + ' will be changed to '
                + packageName
                + ' with monthly price $'
                + monthlyFee +
                '. Are you sure?';
    } else {
        message = 'Software package '
                + packageName
                + ' with monthly price $'
                + monthlyFee
                + ' will be assigned to employee. Are you sure?';
    }
    if (confirm(message)) {
        if (!!previousPackage && new Date() < jQuery.datepicker.parseDate('d-M-yy', assignmentDate)) {
            alert('Please note that new Software Package will be assigned on ' + assignmentDate);
        }

        if (isNeedApproval) {
            showSpPopup($row, 0, packageAssignmentId, jQuery("#justificationDiv"));
        } else{
            EMPL_PACK._doWorkflow(packageAssignmentId, EMPL_PACK._options.verifyPackageAction);
        }
    }
};

EMPL_PACK._approvePackage = function(packageAssignmentId) {
    var $row = jQuery('tr[data-id=' + packageAssignmentId + ']');
    var packageName = $row.find('td:eq(1) a').text().trim();
    var monthlyFee = $row.data('fee');
    var assignmentDate = $row.data('assignmentdate');
    var previousPackage = EMPL_PACK._findCurrentPackage();
    var message = '';
    if (!!previousPackage) {
        message = 'Current Software Package '
                + previousPackage.name
                + ' with monthly price $'
                + previousPackage.fee
                + ' will be changed to '
                + packageName
                + ' with monthly price $'
                + monthlyFee +
                '. Are you sure?';
    } else {
        message = 'Software package '
                + packageName
                + ' with monthly price $'
                + monthlyFee
                + ' will be assigned to employee. Are you sure?';
    }
    if (confirm(message)) {
        if (!!previousPackage && new Date() < jQuery.datepicker.parseDate('d-M-yy', assignmentDate)) {
                alert('Please note that new Software Package will be assigned on ' + assignmentDate);
        }
        EMPL_PACK._doWorkflow(packageAssignmentId, EMPL_PACK._options.approvePackageAction);
    }
};

EMPL_PACK._rejectPackage = function(packageAssignmentId) {
    var $row = jQuery('tr[data-id=' + packageAssignmentId + ']');
    showSpPopup($row, 1, packageAssignmentId, jQuery("#rejectCommentDiv"));
};

EMPL_PACK._cancelPackage = function(packageAssignmentId) {
    EMPL_PACK._doWorkflow(packageAssignmentId, EMPL_PACK._options.cancelPackageAction);
};

EMPL_PACK._hideLoadingImage = function() {
    jQuery('#loadingSpImage').hide();
}

EMPL_PACK._showLoadingImage = function() {
    jQuery('#softwarePackages').find('tr.package-row').remove();
    jQuery('#loadingSpImage').show();
}

EMPL_PACK._doWorkflow = function(packageAssignmentId, actionId, comment) {
    var url = 'rest/v3/employees/software-packages?packageAssignmentId=' + packageAssignmentId + '&actionId=' + actionId;
    jQuery.ajax({
        url: url,
        method: 'put',
        // workaround for bug in IE due to which it does not authenticate user when request body is empty
        data: comment,
        beforeSend: function() {
            EMPL_PACK._showLoadingImage();
        },
        error: function(data) {
            if (!!data && !!data.responseText) {
                data = JSON.parse(data.responseText);
                alert(data.message);
            }
        },
        complete: EMPL_PACK._loadSoftwarePackages
    });
};

EMPL_PACK._loadSoftwarePackages = function() {
    jQuery.when(
        EMPL_PACK._retrieveAssignedSoftwarePackages(),
        EMPL_PACK._retrieveAvailableSoftwarePackages()
    ).then(function(assignedPackages, availablePackages) {
        EMPL_PACK._renderSoftwarePackages(assignedPackages[0]);
        EMPL_PACK._renderAvailablePackages(availablePackages[0]);
    });
};

EMPL_PACK._retrieveAssignedSoftwarePackages = function() {
    return jQuery.ajax({
        url: 'rest/v3/employees/' + EMPL_PACK._options.employeeId + '/software-packages',
        method: 'get'
    });
};

EMPL_PACK._retrieveAvailableSoftwarePackages = function() {
    return jQuery.ajax({
        url: 'rest/v3/employees/' + EMPL_PACK._options.employeeId + '/software-packages/available',
        method: 'get'
    });
};

EMPL_PACK._renderSoftwarePackages = function(data) {
    var $target = jQuery('#softwarePackages');
    var $addButton = jQuery('#btnAddSoftwarePackage');
    var canAdd = true;
    data.forEach(function(e) {
        var hasApprovePermission = e.canApprove;
        EMPL_PACK._options.canModify = EMPL_PACK._options.canModify || hasApprovePermission;

        if (EMPL_PACK._options.canModify) {
            e.canVerify = (e.stateId == EMPL_PACK._options.pendingVerifyStateId 
                    && EMPL_PACK._options.canVerify);
            e.canApprove = (e.stateId == EMPL_PACK._options.verifiedStateId 
                    && hasApprovePermission);
            e.canCancel = (e.stateId == EMPL_PACK._options.pendingInQueueStateId);
            e.canComments = (EMPL_PACK._options.canVerify || hasApprovePermission);
        }
        if (!!e.packageName) {
            e.render = true;
            e.showState = !e.basePackage;
        }
        canAdd = canAdd
                && e.stateId == EMPL_PACK._options.approvedStateId;

        e.showInfo = true;
    });

    var content = EMPL_PACK._softwarePackagesTemplate.render({
        packages: data
    });

    if (data.length === 0) {
        content = '<tr><td>N/A</td></tr>';
    } else {
        if (!EMPL_PACK._options.empSoftwarePackagesManagedInUpsa) {
            $addButton.text(editInPeopleBtnName);
        } else {
            if (data.length == baseSpSize) {
                $addButton.html(addNewBtnName);
            } else if (data.length > baseSpSize) {
                $addButton.text(replaceSpBtnName);
            }
        }
    }

    var $content = jQuery(content);

    $content.find('[id^="commentsBlock"]').each(function() {
        var $this = jQuery(this),
            packageId = $this.data('id');
        initSpCommentsModule(packageId, 'commentsBlock'+packageId, true);
    });

    EMPL_PACK._hideLoadingImage();
    $target.append($content);

    $content.find('[id^="assignIcon_"]').each(function() {
        var $this = jQuery(this),
            id = $this.attr('id').split('_')[1];
        var packageState = $this.data('state');
        var html;
        if (packageState == EMPL_PACK._options.pendingVerifyStateId) {
            html = EMPL_PACK._options.pendingVerifyHint;
        } else if (packageState == EMPL_PACK._options.verifiedStateId) {
            html = EMPL_PACK._options.pendingApprovalHint.replace("{0}", $this.data('approverid')).replace("{1}", $this.data('approvername'));
        } else if (packageState == EMPL_PACK._options.pendingInQueueStateId) {
            html = EMPL_PACK._options.pendingInQueueHint.replace("{0}", $this.data('assignment')).replace("{1}", $this.data('link')).replace("{2}", $this.data('packagename')); 
        } else {
            html = EMPL_PACK._options.approvedHint.replace("{0}", $this.data('link')).replace("{1}", $this.data('packagename'));
        }
        jQuery('#assignHint_' + id).html(html);
        initQTip('#assignIcon_' + id, '#assignHint_' + id);
    });

    $content.find('[id^="qtip-content"]').each(function() {
        var $this = jQuery(this);
    });

    if (EMPL_PACK._options.empSoftwarePackagesManagedInUpsa) {
        $addButton[(canAdd && EMPL_PACK._options.canAdd) ? 'show' : 'hide']();
    } else {
        $addButton[(EMPL_PACK._options.canAdd) ? 'show' : 'hide']();
    }
};

EMPL_PACK._renderAvailablePackages = function(data) {
    var $select = jQuery('#softwarePackageSelect');
    $select.find('option').remove();
    data.forEach(function(e) {
        var $option = jQuery('<option/>')
                .attr('value', e.externalPackageId)
                .data('link', e.linkToPackage)
                .data('cc', e.competencyCenterName || ' ' )
                .data('needApproval', e.needApproval)
                .data('needVerification', e.needVerification)
                .text(e.packageName);
        $select.append($option);
    });

    $select.find('option:eq(0)').prop('selected', true);
    $select.select2(EMPL_PACK._softwarePackageDDLOptions);
};

EMPL_PACK._findCurrentPackage = function() {
    try {
        jQuery('#softwarePackages tr').each(function() {
            var $this = jQuery(this);
            var packageName = $this.find('td:eq(1) a').text().trim();
            if (!!packageName) {
                var packageState = $this.find('td:eq(0)').data('state');
                var packageMonthlyFee = $this.data('fee');
                var isBase = $this.data('basepackage');
                var packageAssignmentDate = jQuery.datepicker.parseDate('d-M-yy', $this.data('changed'));
                if (!isBase && packageState == EMPL_PACK._options.approvedStateId) {
                    throw {
                        name: packageName,
                        fee: packageMonthlyFee,
                        changed: packageAssignmentDate
                    };
                }
            }
        });
    } catch (e) {
        return e;
    }
    return null;
};

function showSpPopup(caller, popupId, packageId, commentDiv) {
    if (commentDiv) {
        commentDiv.find("[name='softwarePackageId']").val(packageId);
        var commentArea = commentDiv.find("[name='commentArea']");
        commentArea.val('');
        commentArea.limitInputLength({maxLength: 4000, treatAsBytes: true});
        commentArea.prop('placeholder', EMPL_PACK._options.placeholders[popupId]);
        commentDiv.createWin();
        if (commentArea) {
            commentArea.focus();
        }
    }
}
function sendJustification() {
    var commentDiv = jQuery("#justificationDiv");
    var softwarePackageId = commentDiv.find("[name='softwarePackageId']").val();
    var commentArea = commentDiv.find("[name='commentArea']");
    var comment = commentArea.val();
    if (!!(trim(comment)) && comment !== commentArea.prop('placeholder')) {
        if (!!comment.replace(/[^a-zа-я]+/gi, "")) {
            EMPL_PACK._doWorkflow(softwarePackageId, EMPL_PACK._options.verifyPackageAction, comment);
            commentDiv.closeWin();
        } else {            
            alert(EMPL_PACK._options.justificationFieldError);
        }
    } else {
        alert(EMPL_PACK._options.justificationFieldRequired);
    }
}
function sendRejectComment() {
    commentDiv = jQuery("#rejectCommentDiv");
    var softwarePackageId = commentDiv.find("[name='softwarePackageId']").val();
    var commentArea = commentDiv.find("[name='commentArea']");
    var comment = commentArea.val();
    EMPL_PACK._doWorkflow(softwarePackageId, EMPL_PACK._options.rejectPackageAction,
            (!!(trim(comment)) && comment !== commentArea.prop('placeholder')) ? comment : null);
    commentDiv.closeWin();
}
function cancelSpPopup(commentDiv) {
    var commentArea = commentDiv.find("[name='commentArea']");
    var comment = commentArea.val();
    if (!!(trim(comment)) && comment !== commentArea.prop('placeholder') && !confirm(EMPL_PACK._options.dataLossMessage)) {
        return;
    }
    commentDiv.closeWin();
}

function initSpCommentsModule(itemId, targetId, iconOnly, options) {
    if (itemId != null && itemId.length !== 0) {
        iconOnly = typeof iconOnly === 'undefined' || iconOnly==="false" ? false : iconOnly==="true" ? true : iconOnly;

        Employee.getEmployeeSoftwarePackageComments(itemId, function (commentsJson) {
            if (commentsJson.length) {
                notEmptyCommentItemIds.push(itemId);
            }
            var comments = commentsJson;

            var extendedOptions = jQuery.extend({
                getComments: function() { return comments; },
                canAddNew : false,
                canDelete: false,
                itemId: itemId,
                popupAddCommentStyle: true
            }, options || {});

            var commentModule = new CommentsModule(extendedOptions);
            if (iconOnly) {
                commentModule.drawCommentIcon(jQuery("#" + targetId).empty());
            } else {
                commentModule.drawLastComment(jQuery("#" + targetId));
            }
        });
    }
}
;var EMPL_ENGAGEMENT_PACK = EMPL_ENGAGEMENT_PACK || {};
EMPL_ENGAGEMENT_PACK._options = {};

var currentPackageId;

EMPL_ENGAGEMENT_PACK._engagementPackageTemplate = Hogan.compile(
    '{{#engagementPackage}}' +
            '<tr class="skill-row" data-id="{{engagementPackage.id}}">' +
                '<td style="width: 100%;">' +
                    '{{engagementPackage.name}}' +
                '<span class="engagement-package-history" style="margin-left: 20px; line-height: 34px;">' +
                    '<i class="icon-book" title="History" ' +
                        'name="engagement-package-history" ' +
                        'onmouseover="EMPL_ENGAGEMENT_PACK.showInfoTip(this);">' +
                    '</i>' +
                '</span>' +
                '</td>' +
            '</tr>' +
    '{{/engagementPackage}}'
);

EMPL_ENGAGEMENT_PACK._engagementPackageHistoryTemplate = Hogan.compile(
    '<table border="0">' +
        '<tr>' +
            '<td class="hintTitleFont">Changed</td>' +
            '<td class="hintFont" style="width: 10px;"></td>' +
            '<td class="hintTitleFont">By</td>' +
            '<td class="hintFont" style="width: 10px;"></td>' +
            '<td class="hintTitleFont">Engagement Type</td>' +
        '</tr>' +
        '{{#history}}' +
            '<tr>' +
                '<td class="hintFont">{{timestamp}}</td>' +
                '<td></td>' +
                '<td class="hintFont">{{changedBy.name}}</td>' +
                '<td></td>' +
                '<td class="hintFont">{{engagementPackage.name}}</td>' +
            '</tr>' +
        '{{/history}}' +
    '</table>'
);

EMPL_ENGAGEMENT_PACK._engagementPackageDDLOptions = {
    placeholder: 'Select package'
};

EMPL_ENGAGEMENT_PACK.init = function(options) {

    EMPL_ENGAGEMENT_PACK._options = jQuery.extend(EMPL_ENGAGEMENT_PACK._options, options);

    EMPL_ENGAGEMENT_PACK._loadEngagementPackageInfo();

    jQuery('#btnEditEngagementPackage').click(EMPL_ENGAGEMENT_PACK._showDialog);
    jQuery('#applyEngagementPackageChanges').click(EMPL_ENGAGEMENT_PACK._applyEngagementPackage);
    jQuery('#closeEngagementPackageDialog').click(EMPL_ENGAGEMENT_PACK._closeDialog);

    jQuery('#engagementPackageSelect').select2(EMPL_ENGAGEMENT_PACK._engagementPackageDDLOptions);
    jQuery('#engagementPackageSelect').change(EMPL_ENGAGEMENT_PACK._updatePackageData);
};

EMPL_ENGAGEMENT_PACK.infoQtip = {
    position: {
        my: 'top center',
        at: 'bottom center',
    },
    content: 'Info tip',
    style: {
        tip: true,
        classes: 'qtip-light qtip-shadow'
    },
    hide: {
        fixed: true,
        delay: 300
    }
};

EMPL_ENGAGEMENT_PACK.showInfoTip = function (el) {
    jQuery(el).qtip("show");
};

EMPL_ENGAGEMENT_PACK._loadEngagementPackageInfo = function () {
    jQuery.when(
        EMPL_ENGAGEMENT_PACK._retrieveEngagementPackageInfo(),
    ).then(function(history) {
        EMPL_ENGAGEMENT_PACK._renderEngagementPackage(history);
    });
};

EMPL_ENGAGEMENT_PACK._retrieveEngagementPackageInfo = function() {
    return jQuery.ajax({
        url: 'rest/v3/employees/' + EMPL_ENGAGEMENT_PACK._options.employeeId + '/engagement-package-info',
        method: 'get'
    });
};

EMPL_ENGAGEMENT_PACK._renderEngagementPackage = function(data) {

    var $target = jQuery('#engagementPackage');
    var $addButton = jQuery('#btnEditEngagementPackage');
    var canRequest = true;

    currentPackageId = data.engagementPackage.id;

    $target.find('tr').remove();
    var content = EMPL_ENGAGEMENT_PACK._engagementPackageTemplate.render({
        engagementPackage: data
    });
    var $content = jQuery(content);
    $target.append($content);

    jQuery('#applyEngagementPackageChanges').prop('disabled', true);

    var $select = jQuery('#engagementPackageSelect');
    $select.find('option').remove();
    data.availablePackages.forEach(function(e) {
        var $option = jQuery('<option/>')
            .attr('value', e.id)
            .attr('disabled', !e.active)
            .text(e.name);
        $select.append($option);
    });
    $select.find('option:eq('+ currentPackageId +')').prop('selected', true);
    $select.select2(EMPL_ENGAGEMENT_PACK._engagementPackageDDLOptions);

    let historyTip = jQuery.extend({}, EMPL_ENGAGEMENT_PACK.infoQtip);
    historyTip.content = EMPL_ENGAGEMENT_PACK._engagementPackageHistoryTemplate.render({
        history: data.history
    });
    jQuery("[name='engagement-package-history']").qtip(historyTip);
};


EMPL_ENGAGEMENT_PACK._updatePackageData = function() {
    let $select = jQuery('#engagementPackageSelect');
    jQuery('#applyEngagementPackageChanges').prop('disabled', $select.val() === currentPackageId);
};

EMPL_ENGAGEMENT_PACK._showDialog = function(e) {
    var $dialog = jQuery('#engagementPackageDialogContainer');
    var $addButton = jQuery(this);
    var offset = $addButton.offset();
    var newTop = offset.top;
    var newLeft = offset.left;

    $dialog.show();
    $dialog.removeClass('canvas-id');
    $dialog.offset({
        top : newTop,
        left : newLeft
    });

    EMPL_LANG._correctScreenScroll($dialog);

    e.stopPropagation();
};

EMPL_ENGAGEMENT_PACK._closeDialog = function() {
    var $dialog = jQuery('#engagementPackageDialogContainer');
    var $select = jQuery('#engagementPackageSelect');

    $select.val($select.find('option:eq(' + currentPackageId + ')').val());
    $select.select2(EMPL_ENGAGEMENT_PACK._engagementPackageDDLOptions);
    $dialog.hide();
};

EMPL_ENGAGEMENT_PACK._applyEngagementPackage = function() {
    var $select = jQuery('#engagementPackageSelect');
    var $option = $select.find('option:selected');
    var packageId = $option.val();

    EMPL_ENGAGEMENT_PACK._closeDialog();

    jQuery.ajax({
        url: 'rest/employees/' + EMPL_ENGAGEMENT_PACK._options.employeeId + '/engagement-package?packageId=' + packageId,
        method: 'PUT',
        beforeSend: function() {
            var $target = jQuery('#engagementPackage');
            $target.find('tr').remove();
            $target.html('<tr><td><img src="images/loading_image.gif"/></td></tr>');
        },
        error: function(data) {
            if (!!data && !!data.responseText) {
                data = JSON.parse(data.responseText);
                alert(data.message);
            }
            EMPL_ENGAGEMENT_PACK._loadEngagementPackageInfo();
        },
    }).then(
        EMPL_ENGAGEMENT_PACK._loadEngagementPackageInfo
    );
};
var EMPL_PRODUCTIVITY_TRKNG_PACK = EMPL_PRODUCTIVITY_TRKNG_PACK || {};
EMPL_PRODUCTIVITY_TRKNG_PACK._options = {};

var currentProductivityTracking;

EMPL_PRODUCTIVITY_TRKNG_PACK._productivityTrackingTemplate = Hogan.compile(
    '{{#productivityTracking}}' +
            '<tr class="skill-row" data-id="productivityTrackingData">' +
                '<td style="width: 100%;">' +
                    '{{#productivityTracking}}Yes{{/productivityTracking}}' +
                    '{{^productivityTracking}}No{{/productivityTracking}}' +
                '<span class="productivity-tracking-history" style="margin-left: 20px; line-height: 34px;">' +
                    '<i class="icon-book" title="History" ' +
                        'name="productivity-tracking-history" ' +
                        'onmouseover="EMPL_PRODUCTIVITY_TRKNG_PACK.showInfoTip(this);">' +
                    '</i>' +
                '</span>' +
                '</td>' +
            '</tr>' +
    '{{/productivityTracking}}'
);

EMPL_PRODUCTIVITY_TRKNG_PACK._productivityTrackingHistoryTemplate = Hogan.compile(
    '<table border="0">' +
        '<tr>' +
            '<td class="hintTitleFont">Changed</td>' +
            '<td class="hintFont" style="width: 10px;"></td>' +
            '<td class="hintTitleFont">By</td>' +
            '<td class="hintFont" style="width: 10px;"></td>' +
            '<td class="hintTitleFont">Productivity Tracking</td>' +
        '</tr>' +
        '{{#history}}' +
            '<tr>' +
                '<td class="hintFont">{{timestamp}}</td>' +
                '<td></td>' +
                '<td class="hintFont">{{changedBy.name}}</td>' +
                '<td></td>' +
                '<td class="hintFont">' +
                    '{{#productivityTracking}}Yes{{/productivityTracking}}' +
                    '{{^productivityTracking}}No{{/productivityTracking}}' +
                '</td>' +
            '</tr>' +
        '{{/history}}' +
    '</table>'
);

EMPL_PRODUCTIVITY_TRKNG_PACK._productivityTrackingDDLOptions = {
    placeholder: 'Select Productivity Tracking'
};

EMPL_PRODUCTIVITY_TRKNG_PACK.init = function(options) {

    EMPL_PRODUCTIVITY_TRKNG_PACK._options = jQuery.extend(EMPL_PRODUCTIVITY_TRKNG_PACK._options, options);

    EMPL_PRODUCTIVITY_TRKNG_PACK._loadProductivityTrackingInfo();

    jQuery('#btnEditProductivityTracking').click(EMPL_PRODUCTIVITY_TRKNG_PACK._showDialog);
    jQuery('#applyProductivityTrackingChanges').click(EMPL_PRODUCTIVITY_TRKNG_PACK._applyProductivityTracking);
    jQuery('#closeProductivityTrackingDialog').click(EMPL_PRODUCTIVITY_TRKNG_PACK._closeDialog);

    jQuery('#productivityTrackingSelect').select2(EMPL_PRODUCTIVITY_TRKNG_PACK._productivityTrackingDDLOptions);
    jQuery('#productivityTrackingSelect').change(EMPL_PRODUCTIVITY_TRKNG_PACK._updateProductivityTrackingData);
};

EMPL_PRODUCTIVITY_TRKNG_PACK.infoQtip = {
    position: {
        my: 'top center',
        at: 'bottom center',
    },
    content: 'Info tip',
    style: {
        tip: true,
        classes: 'qtip-light qtip-shadow'
    },
    hide: {
        fixed: true,
        delay: 300
    }
};

EMPL_PRODUCTIVITY_TRKNG_PACK.showInfoTip = function (el) {
    jQuery(el).qtip("show");
};

EMPL_PRODUCTIVITY_TRKNG_PACK._loadProductivityTrackingInfo = function () {
    jQuery.when(
        EMPL_PRODUCTIVITY_TRKNG_PACK._retrieveProductivityTrackingInfo()
    ).then(function(history) {
        EMPL_PRODUCTIVITY_TRKNG_PACK._renderProductivityTracking(history);
    });
};

EMPL_PRODUCTIVITY_TRKNG_PACK._retrieveProductivityTrackingInfo = function() {
    return jQuery.ajax({
        url: 'rest/v3/employees/' + EMPL_PRODUCTIVITY_TRKNG_PACK._options.employeeId + '/productivity-tracking-info',
        method: 'get'
    });
};

EMPL_PRODUCTIVITY_TRKNG_PACK._renderProductivityTracking = function(data) {

    var $target = jQuery('#productivityTracking');
    var $addButton = jQuery('#btnEditProductivityTracking');
    var canRequest = true;

    currentProductivityTracking = data.productivityTracking;

    $target.find('tr').remove();
    var content = EMPL_PRODUCTIVITY_TRKNG_PACK._productivityTrackingTemplate.render({
        productivityTracking: data
    });
    var $content = jQuery(content);
    $target.append($content);

    jQuery('#applyProductivityTrackingChanges').prop('disabled', true);

    var $select = jQuery('#productivityTrackingSelect');
    $select.find('option').remove();
    $select.append(jQuery('<option/>').attr({value: 'false', selected: currentProductivityTracking}).text('No'));
    $select.append(jQuery('<option/>').attr({value: 'true', selected: currentProductivityTracking}).text('Yes'));
    $select.select2(EMPL_PRODUCTIVITY_TRKNG_PACK._productivityTrackingDDLOptions);

    let historyTip = jQuery.extend({}, EMPL_PRODUCTIVITY_TRKNG_PACK.infoQtip);
    historyTip.content = EMPL_PRODUCTIVITY_TRKNG_PACK._productivityTrackingHistoryTemplate.render({
        history: data.history
    });
    jQuery("[name='productivity-tracking-history']").qtip(historyTip);
};


EMPL_PRODUCTIVITY_TRKNG_PACK._updateProductivityTrackingData = function() {
    let $select = jQuery('#productivityTrackingSelect');
    jQuery('#applyProductivityTrackingChanges').prop('disabled', $select.val() === currentProductivityTracking.toString());
};

EMPL_PRODUCTIVITY_TRKNG_PACK._showDialog = function(e) {
    var $dialog = jQuery('#productivityTrackingDialogContainer');
    var $addButton = jQuery(this);
    var offset = $addButton.offset();
    var newTop = offset.top;
    var newLeft = offset.left;

    $dialog.show();
    $dialog.removeClass('canvas-id');
    $dialog.offset({
        top : newTop,
        left : newLeft
    });

    EMPL_LANG._correctScreenScroll($dialog);

    e.stopPropagation();
};

EMPL_PRODUCTIVITY_TRKNG_PACK._closeDialog = function() {
    var $dialog = jQuery('#productivityTrackingDialogContainer');
    var $select = jQuery('#productivityTrackingSelect');

    $select.val($select.find('option:eq(' + currentProductivityTracking.toString() + ')').val());
    $select.select2(EMPL_PRODUCTIVITY_TRKNG_PACK._productivityTrackingDDLOptions);
    $dialog.hide();
};

EMPL_PRODUCTIVITY_TRKNG_PACK._applyProductivityTracking = function() {
    var $select = jQuery('#productivityTrackingSelect');
    var $option = $select.find('option:selected');
    var productivityTrackingValue = $option.val();

    EMPL_PRODUCTIVITY_TRKNG_PACK._closeDialog();

    jQuery.ajax({
        url: 'rest/employees/' + EMPL_PRODUCTIVITY_TRKNG_PACK._options.employeeId + '/productivity-tracking?productivityTracking=' + productivityTrackingValue,
        method: 'PUT',
        beforeSend: function() {
            var $target = jQuery('#productivityTracking');
            $target.find('tr').remove();
            $target.html('<tr><td><img src="images/loading_image.gif"/></td></tr>');
        },
        error: function(data) {
            if (!!data && !!data.responseText) {
                data = JSON.parse(data.responseText);
                alert(data.message);
            }
            EMPL_PRODUCTIVITY_TRKNG_PACK._loadProductivityTrackingInfo();
        },
    }).then(
        EMPL_PRODUCTIVITY_TRKNG_PACK._loadProductivityTrackingInfo
    );
};
var EMPL_SKILLS = EMPL_SKILLS || {};
EMPL_SKILLS._options = {};

EMPL_SKILLS._keySkillsTemplate = Hogan.compile(
            '{{#keySkills}}' +
                '{{#render}}' +
                    '<tr class="skill-row" data-id="{{skillId}}">' +
                        '<td data-state="{{skillLevelId}}">' +
                            '<i class="icon-circle" style="font-size:10px;"' +
                                'title="{{skillLevel}}" ' +
                                'id="assignIcon_{{skillId}}">' +
                            '</i>' +
                            '<div id="assignHint_{{skillId}}" style="display: none;">{{skillLevel}}</div>' +
                        '</td>' +
                        '<td>' +
                            '{{skillName}}' +
                        '</td>' +
                        '<td class="skill-controls" style="display: none;">' +
                            '{{#canModify}}' +
                                '<i class="icon-pencil green-color" title="Edit" onclick="EMPL_SKILLS._editKeySkill(\'{{skillId}}\')"></i>' +
                                '<i class="icon-remove red-color" title="Delete" onclick="EMPL_SKILLS._deleteKeySkill(\'{{skillId}}\')"></i>' +
                            '{{/canModify}}' +
                        '</td>' +
                    '</tr>' +
                '{{/render}}' +
            '{{/keySkills}}'
        );
EMPL_SKILLS._keySkillDDLOptions = {
    placeholder: 'Select skill',
    minimumResultsForSearch: 1
};

EMPL_SKILLS.init = function(options) {
    EMPL_SKILLS._options = jQuery.extend(EMPL_SKILLS._options, options);

    EMPL_SKILLS._loadKeySkills();

    jQuery('#btnAddKeySkill').click(EMPL_SKILLS._addKeySkill);
    jQuery('#postKeySkillDialog').click(EMPL_SKILLS._postKeySkillDialog);
    jQuery('#closeKeySkillDialog').click(EMPL_SKILLS._closeDialog);
    jQuery('#keySkillSelect').change(EMPL_SKILLS._updateSkillDialogData);
};

EMPL_SKILLS._loadKeySkills = function () {
    jQuery.when(
        EMPL_SKILLS._retrieveAssignedKeySkills(),
        EMPL_SKILLS._retrieveAvailableKeySkills()
    ).then(function(assignedKeySkills, availableKeySkills) {
        EMPL_SKILLS._renderKeySkills(assignedKeySkills[0]);
        EMPL_SKILLS._renderAvailableKeySkills(availableKeySkills[0], assignedKeySkills[0]);
    });
};

EMPL_SKILLS._retrieveAssignedKeySkills = function() {
    return jQuery.ajax({
        url: 'rest/v3/employees/' + EMPL_SKILLS._options.employeeId + '/key-skills',
        method: 'get'
    });
};

EMPL_SKILLS._retrieveAvailableKeySkills = function() {
    return jQuery.ajax({
        url: 'rest/v3/skills/primary-skills/groups?showInactive=false',
        method: 'get'
    });
};

EMPL_SKILLS._renderKeySkills = function(data) {
    var $target = jQuery('#keySkills');
    var $addButton = jQuery('#btnAddKeySkill');
    var canRequest = true;

    $target.find('tr').remove();

    data.forEach(function(e) {
        e.canModify = EMPL_SKILLS._options.canModify;
        e.render = (!!e.skillName);            
    });
    var content = EMPL_SKILLS._keySkillsTemplate.render({
        keySkills: data
    });
    if (data.length == 0 && $addButton.length == 0) {
        content = '<tr><td>N/A</td></tr>';
    } else if (data.length < maxKeySkillsSize) {
	    $addButton.prop("disabled", false);
	    $addButton.prop('title', '');
    } else if (data.length >= maxKeySkillsSize) {
	    $addButton.prop("disabled", true);
	    $addButton.prop('title', btnAddKeySkillHint);
    }

    var $content = jQuery(content);
    $target.append($content);

    $content.find('[id^="assignIcon_"]').each(function() {
        var $this = jQuery(this),
            id = $this.attr('id').split('_')[1];
        initQTip('#assignIcon_' + id, '#assignHint_' + id);
    });
    jQuery(".skill-row").each(function () {
        var $this = jQuery(this);
        var $actionBlock = $this.find('.skill-controls');
        $this.hover(function () {
            $actionBlock.show();
        }, function () {
            $actionBlock.hide();
        });
    });
};

EMPL_SKILLS._renderAvailableKeySkills = function(data, assignedSkills) {
    var $select = jQuery('#keySkillSelect');
    $select.find('optgroup').remove();
    data.forEach(function(optGroup) {
        var $group = jQuery('<optgroup/>').attr('label', optGroup.categoryName);
        optGroup.options.forEach(function(e) {
            var skill = e;
            if (skill.id === EMPL_SKILLS._options.emplPrimarySkill) {
                skill = null;
            } else {
                assignedSkills.forEach(function(assSkill) {
                    if (skill != null && assSkill.skillId === skill.id) {
                        skill = null;
                    }
                })
            }
            if (skill != null) {
                var $option = jQuery('<option/>')
                        .attr('value', skill.id)
                        .text(skill.name);
                $group.append($option);
            }
        });
        if ($group.children().length > 0) {
            $select.append($group);
        }
    });
    $select.find('option:eq(0)').prop('selected', true);
    $select.select2(EMPL_SKILLS._keySkillDDLOptions);
};

EMPL_SKILLS._updateSkillDialogData = function() {
    if ((jQuery('#keySkillSelector1').css('display') !== "none" && jQuery('#keySkillSelect').val() == '') 
            || jQuery('input[name=skillSwitch]:checked').length == 0) {
        jQuery('#postKeySkillDialog').prop("disabled", true);
    } else {
        jQuery('#postKeySkillDialog').prop("disabled", false);
    }
};

EMPL_SKILLS._showDialog = function(skill) {
    jQuery('#postKeySkillDialog').prop("disabled", true);
    var $dialog = jQuery('#keySkillDialogContainer');

    if (typeof skill !== "undefined") {
        jQuery('#keySkillSelector1').hide();        
        jQuery('#keySkillSelector2').text(skill.name).show();
        jQuery('#hiddenSkillId').val(skill.id);
        $dialog.find('td[data-state=' + skill.level + ']').parent().find('input[name=skillSwitch]').prop('checked', true);
    } else {
        jQuery('#keySkillSelector1').show();
        jQuery('#keySkillSelector2').hide();
    }

    var offset = jQuery('#btnAddKeySkill').offset();
    var newTop = offset.top;
    var newLeft = offset.left;
    $dialog.show();
    $dialog.removeClass('canvas-id');
    $dialog.offset({
        top : newTop,
        left : newLeft
    });

    EMPL_LANG._correctScreenScroll($dialog);
};

EMPL_SKILLS._addKeySkill = function(e) {
    if (!jQuery('#btnAddKeySkill').prop("disabled")) {
        EMPL_SKILLS._showDialog();
    }
    e.stopPropagation();
}

EMPL_SKILLS._closeDialog = function() {
    var $dialog = jQuery('#keySkillDialogContainer');
    var $select = jQuery('#keySkillSelect');
    var $skillRadio = jQuery('input[name=skillSwitch]:checked');

    $select.val($select.find('option:eq(0)').val());
    $select.select2(EMPL_SKILLS._keySkillDDLOptions);
    if ($skillRadio.length > 0) {
        $skillRadio[0].checked=false;
    }
    $dialog.hide();
};

EMPL_SKILLS._postKeySkillDialog = function() {
    var $select = jQuery('#keySkillSelect');
    var skillId;
    if (jQuery('#keySkillSelector1').css('display') !== "none") {
        skillId = $select.val();
    } else {
        skillId = jQuery('#hiddenSkillId').val();
    }
    var levelId = jQuery('input[name=skillSwitch]:checked').parent().next().data('state')
    
    EMPL_SKILLS._closeDialog();
    EMPL_SKILLS._doWorkflow(skillId, levelId, EMPL_SKILLS._options.updateAction);
};

EMPL_SKILLS._editKeySkill = function(skillId) {
    var currentKeySkill = EMPL_SKILLS._findCurrentKeySkill(skillId);    
    if (currentKeySkill.level != null) {
        EMPL_SKILLS._showDialog(currentKeySkill);
    }
};

EMPL_SKILLS._deleteKeySkill = function(skillId) {
    var currentKeySkill = EMPL_SKILLS._findCurrentKeySkill(skillId);
    var message = '';
    message = 'Delete "' + currentKeySkill.name + '" key skill. Are you sure?'; 
    if (confirm(message)) {
        EMPL_SKILLS._doWorkflow(skillId, 0, EMPL_SKILLS._options.deleteAction);
    }
};

EMPL_SKILLS._doWorkflow = function(skillId, levelId, actionId) {
    jQuery.ajax({
        url: 'rest/v3/employees/' + EMPL_SKILLS._options.employeeId + '/key-skills/' + skillId + '?actionId=' + actionId + '&levelId=' + levelId,
        method: 'put',
        data: { data: 'none' },
        beforeSend: function() {
            jQuery('.skill-row .skill-controls i').addClass('invisible');
            jQuery('#btnAddKeySkill').prop("disabled", true);
            jQuery('#keySkillDialogContainer').hide();
            var $target = jQuery('#keySkills');
            $target.find('tr').remove();
            $target.html('<tr><td><img src="images/loading_image.gif"/></td></tr>');
        },
        error: function(data) {
            if (!!data && data.isRetry) {
                data = JSON.parse(data.responseText);
                alert(data.message);
            }
        },
        complete: EMPL_SKILLS._loadKeySkills
    });
};

EMPL_SKILLS._findCurrentKeySkill = function(skillId) {
    var $row = jQuery('tr[data-id=' + skillId + ']');
    var skillName = $row.find('td:eq(1)').text().trim();
    var keySkillLevel = $row.find('td:eq(0)').data('state');
    return {id: skillId, name: skillName, level: keySkillLevel};
};
var EMPL_OBFS = (function() {
    var NAME_CATEGORY_ID = 1;

    var TRIGGER_ID = 'obfuscationControl';
    var REMOVAL_POPUP_ID = 'obfsDialog';
    var CONFIRMATION_POPUP_ID = 'obfsConfirmation';
    var INITIATE_BTN_ID = 'initiateRemoval';
    var CANCEL_BTN_ID = 'cancelRemoval';
    var CONFIRM_BTN_ID = 'confirmRemoval';
    var DECLINE_BTN_ID = 'declineRemoval';
    var CONFIRM_CHK_ID = 'confirmRemovalCheckbox';

    var MAIN_POPUP_TEMPLATE = Hogan.compile(
        '<div id="{{popupId}}" class="modernPopup" data-disable-esc="true">' +
            '<div class="modernPopup-title">' +
                'List of PII' +
                '<div class="closePopupButton" title="Close"></div>' +
            '</div>' +
            '<div class="modernPopup-content modernPopup-content-padding">' +
                '{{#categories}}' +
                    '<div class="obfsContainer">' +
                        '<div class="obfsCategory">' +
                            '<input id="obfsCategory{{id}}" data-id="{{id}}" data-name="{{name}}" type="checkbox" class="modernCheckbox" {{#requested}}disabled checked{{/requested}}/>' +
                            '<label for="obfsCategory{{id}}">{{name}}</label>' +
                        '</div>' +
                    '</div>' +
                '{{/categories}}' +
            '</div>' +
            '<div class="modernPopup-footer">' +
                '<input id="{{cancelBtnId}}" type="button" class="modernButton grey-button" value="Cancel"/>' +
                '<input id="{{initiateBtnId}}" type="button" class="modernButton red-button" value="Remove" disabled style="margin-right: 10px;"/>' +
            '</div>' +
        '</div>'
    );

    var CONFIRMATION_POPUP_TEMPLATE = Hogan.compile(
        '<div id="{{popupId}}" class="modernPopup" data-disable-esc="true">' +
            '<div class="modernPopup-title">' +
                'Confirm removal' +
            '</div>' +
            '<div class="modernPopup-content modernPopup-content-padding">' +
                '<p>You have requested removal of the following PII for {{employeeName}}:</p>' +
                '<ul>' +
                    '{{#categories}}' +
                        '<li>{{name}}</li>' +
                    '{{/categories}}' +
                '</ul>' +
                '<p>The data removal can\'t be reverted. Do you want to continue?</p>' +
                '{{#removeName}}' +
                    '<p>Note that {{employeeName}} will be replaced by "Employee {{employeeId}}"</p>' +
                '{{/removeName}}' +
            '</div>' +
            '<div class="modernPopup-footer">' +
                '<div style="display: inline-block; float: left; margin-right: 10px; line-height: 28px;">' +
                    '<input type="checkbox" id="{{confirmCheckboxId}}" class="modernCheckbox"/>' +
                    '<label for="{{confirmCheckboxId}}">Yes, I understand that the data will be removed without possibility to restore it.</label>' +
                '</div>' +
                '<div style="display: inline-block; float: right;">' +
                    '<input id="{{declineBtnId}}" type="button" class="modernButton grey-button" value="Cancel"/>' +
                    '<input id="{{confirmBtnId}}" type="button" class="modernButton red-button" value="Apply" disabled style="margin-right: 10px;"/>' +
                '</div>' +
            '</div>' +
        '</div>'
    );

    var options = null;

    var loadDataCategories = function() {
        return jQuery.get('rest/employees/obfuscation-categories');
    };

    var loadObfuscationStatus = function(employeeId) {
        return jQuery.get('rest/employees/' + employeeId + '/obfuscation');
    };

    var aggregateObfuscationData = function(data) {
        var dataCategories = data[0],
            obfuscationBatches = data[1];

        var dataCategoriesMap = {};
        dataCategories.forEach(function(c) { dataCategoriesMap[c.id] = c; });
        obfuscationBatches.forEach(function(batch) {
            batch.obfuscationRequests.forEach(function(req) {
                var category = dataCategoriesMap[req.dataCategory.id];
                category.initiator = batch.initiator;
                category.initiated = batch.initiated;
                category.completed = batch.completed;
                category.requested = true;
            });
        });

        return dataCategories;
    };

    var collectSelectedCategories = function () {
        var selectedCategories = [];
        var $popup = jQuery('#' + REMOVAL_POPUP_ID);
        $popup.find('input[type=checkbox]:checked:not([disabled])').each(function () {
            var $this = jQuery(this);
            selectedCategories.push({
                id: $this.data('id'),
                name: $this.data('name')
            });
        });
        return selectedCategories;
    };


    var init = function(_options) {
        options = _options;
        if (options.canInitiate) {
            Promise.all([
                loadDataCategories(),
                loadObfuscationStatus(options.employeeId)
            ])
                .then(aggregateObfuscationData)
                .then(renderObfuscationControls);
        }
    };

    var initiateObfuscation = function(selectedCategories) {
        showPageLocker({
            lockerID: 'postObfsRequest',
            opacity: 0.25,
            zIndex: 10000,
            animate: true
        });

        jQuery.ajax({
            method: 'POST',
            url: 'rest/employees/' + options.employeeId + '/obfuscation',
            contentType: 'application/json',
            data: JSON.stringify(selectedCategories)
        })
            .always(function() {
                hidePageLocker('postObfsRequest');
            })
            .then(function() {
                jQuery('#' + REMOVAL_POPUP_ID).closeWin();
                init(options);
            })
            .fail(function() {
                alert('Failed to post removal request. Please try again later. If this error continues to appear, please contact support');
            });
    };

    var confirmObfuscation = function() {
        var selectedCategories = collectSelectedCategories();

        jQuery('#' + CONFIRMATION_POPUP_ID).remove();
        var selectedCategoryIds = selectedCategories.map(function(c) { return c.id; });
        var $confirmation = jQuery(CONFIRMATION_POPUP_TEMPLATE.render({
            categories: selectedCategories,
            employeeId: options.employeeId,
            employeeName: options.employeeName,
            removeName: selectedCategoryIds.indexOf(NAME_CATEGORY_ID) !== -1,
            popupId: CONFIRMATION_POPUP_ID,
            declineBtnId: DECLINE_BTN_ID,
            confirmBtnId: CONFIRM_BTN_ID,
            confirmCheckboxId: CONFIRM_CHK_ID
        }));
        $confirmation.find('#' + DECLINE_BTN_ID).on('click', function() { $confirmation.closeWin(); });
        $confirmation.find('#' + CONFIRM_BTN_ID).on('click', function() {
            $confirmation.closeWin();
            initiateObfuscation(selectedCategoryIds);
        });
        $confirmation.find('#' + CONFIRM_CHK_ID).on('change', function() {
            $confirmation.find('#' + CONFIRM_BTN_ID).prop('disabled', !jQuery(this).is(':checked'));
        });

        jQuery('body').append($confirmation);
        $confirmation.createWin({
            lockerName: 'confirmationLocker'
        });
    };

    var renderObfuscationControls = function(dataCategories) {
        jQuery('#' + REMOVAL_POPUP_ID).remove();
        var $ui = jQuery(MAIN_POPUP_TEMPLATE.render({
            categories: dataCategories,
            initiateBtnId: INITIATE_BTN_ID,
            cancelBtnId: CANCEL_BTN_ID,
            popupId: REMOVAL_POPUP_ID
        }));
        $ui.find('#' + INITIATE_BTN_ID).on('click', confirmObfuscation);
        $ui.find('.closePopupButton, #' + CANCEL_BTN_ID).on('click', function() {
            $ui.closeWin();
            $ui.find('input[type=checkbox]:checked:not([disabled])').prop('checked', false);
        });
        jQuery('body').append($ui);

        $ui.find('.modernCheckbox').each(function() {
            var $this = jQuery(this),
                id = $this.data('id');

            $this.on('change', function() {
                $ui.find('#' + INITIATE_BTN_ID).prop('disabled', collectSelectedCategories().length === 0);
            });
        });

        jQuery('#' + TRIGGER_ID).remove();
        var $trigger = jQuery('<input/>').attr({
            'id': TRIGGER_ID,
            'type': 'button',
            'class': 'modernButton red-button',
            'value': 'Remove Personal Information'
        }).on('click', function() {
            if (confirm('The PII removal can\'t be reverted. So please make sure that you request the data removal for the right person. Do you want to start the PII removal process for ' + options.employeeName + '?')) {
                $ui.createWin();
            }
        });
        var $target = jQuery(options.target);
        $target.append($trigger);
    };

    return {
        init: init
    };
})();var EMPL_UPLOAD = (function() {
    
    var ERRORS_TEMPLATE = Hogan.compile(
        '<ul>' +
            '{{#categories}}' +
                '<li class="category">{{categoryName}}</li>' +
                '{{#messages}}' +
                    '<li class="{{type}}">' +
                        '{{text}}' +
                    '</li>' +
                '{{/messages}}' +
            '{{/categories}}' +
        '</ul>'
    );

    var SAVING_ERRORS_KEY = '_saving';
    
    var PRIVATE_INFO_CONTAINER_ID = 'privateInfoUploadDialog';
    var VISAS_CONTAINER_ID = 'visasUploadDialog';

    var showPrivateInfoDialog = function() {
        jQuery('#' + PRIVATE_INFO_CONTAINER_ID).createWin();
    };
    var showVisasDialog = function() {
        jQuery('#' + VISAS_CONTAINER_ID).createWin();
    };
    
    var hidePrivateInfoDialog = function() {
        return hideDialog(PRIVATE_INFO_CONTAINER_ID);
    };
    var hideVisasDialog = function() {
        return hideDialog(VISAS_CONTAINER_ID);
    };
    var hideDialog = function(dialogId) {
        var $dialog = jQuery('#' + dialogId);
        $dialog.closeWin();
        $dialog.find('.errors-result').hide();
    };

    var onPrivateInfoFileChanged = function() {
        return onFileChanged(PRIVATE_INFO_CONTAINER_ID);
    };
    var onVisasFileChanged = function() {
        return onFileChanged(VISAS_CONTAINER_ID);
    };
    var onFileChanged = function(dialogId) {
        var $dialog = jQuery('#' + dialogId);
        
        var filePath = $dialog.find('.uploadFile').val();
        var fileName = filePath.replace(/^.*(\\|\/|:)/, '');
        
        $dialog.find(".uploadFileText").val(jQuery.browser.msie ? filePath : fileName);
        $dialog.find(".errors-result, .import-status").html('');
    };

    var onSuccess = function(dialogId, data) {
        var $dialog = jQuery('#' + dialogId);
        
        var errors = data.errors || {};
        var warnings = data.warnings || {};
        
        var statusMessage = 'Data successfully imported',
            statusClass = 'success',
            hasErrors = false,
            errorKeys = Object.keys(errors),
            warningKeys = Object.keys(warnings);
        if (errorKeys.length > 0) {
            if (errorKeys.indexOf(SAVING_ERRORS_KEY) !== -1) {
                statusMessage = 'Errors occurred while saving';
            } else {
                statusMessage = 'Data validation failed';
            }
            statusClass = 'error';
            hasErrors = true;
        } else {
            if (warningKeys.length > 0) {
                        statusMessage = 'Data imported with warnings';
                        statusClass = 'warning';
                        hasErrors = true;
                    }
        }

        $dialog.find('.import-status').html(statusMessage).addClass(statusClass);

        function prepareMessages(messages, type) {
            return Object.keys(messages).map(function (category) {
                return {
                    categoryName: category === SAVING_ERRORS_KEY ? 'Saving' : category,
                    messages: messages[category].map(function(msg) {
                        return {
                            text: msg,
                            type: type
                        };
                    })
                };
            });
        }

        if (hasErrors) {
            var errorMessagesData = [];
            errorMessagesData = errorMessagesData.concat(prepareMessages(errors, 'error'));
            errorMessagesData = errorMessagesData.concat(prepareMessages(warnings, 'warning'));
            var errorMessage = ERRORS_TEMPLATE.render({
                categories: errorMessagesData
            });
            $dialog.find('.errors-result').html(errorMessage).show();
        }
    };

    var onError = function(dialogId) {
        var $dialog = jQuery('#' + dialogId);
        $dialog.find('.import-status').addClass('error')
                .html('Upload failed. Please try again later. If this error continues to appear, please contact support.');
    };

    var onComplete = function(dialogId) {
        var $dialog = jQuery('#' + dialogId);
        $dialog.find('.uploadButton').prop('disabled', false);
    };

    var uploadPrivateInfoFile = function() {
        return uploadFile(PRIVATE_INFO_CONTAINER_ID, "rest/employees/private-info/import");
    };
    var uploadVisasFile = function() {
        return uploadFile(VISAS_CONTAINER_ID, "rest/employees/visas/import");
    };
    var uploadFile = function(dialogId, submitUrl) {
        var $dialog = jQuery('#' + dialogId);
        onFileChanged(dialogId);
        var $fileInput = $dialog.find('.uploadFile');
        var fileInputValue = $fileInput.val();
        if (!fileInputValue) {
            alert('Please select file to upload');
            return;
        }

        var uploadForm = new FormData();
        uploadForm.append("file", $fileInput[0].files[0]);

        $fileInput.val(null);
        onFileChanged(dialogId);
        
        $dialog.find('.uploadButton').prop('disabled', true);
        $dialog.find('.import-status').attr('class', 'import-status').html('Uploading...');
        $dialog.find('.errors-result').html('');

        jQuery.ajax({
            url: submitUrl,
            type: "POST",
            data: uploadForm,
            processData: false,
            contentType: false,
            success: function(data) {
                return onSuccess(dialogId, data); 
            },
            error: function () {
                return onError(dialogId); 
            },
            complete: function() {
                return onComplete(dialogId); 
            }
        });
    };

    return {
        showPrivateInfoDialog: showPrivateInfoDialog,
        showVisasDialog: showVisasDialog,
        
        hidePrivateInfoDialog: hidePrivateInfoDialog,
        hideVisasDialog: hideVisasDialog,
        
        uploadPrivateInfoFile: uploadPrivateInfoFile,
        uploadVisasFile: uploadVisasFile,
        
        onPrivateInfoFileChanged: onPrivateInfoFileChanged,
        onVisasFileChanged: onVisasFileChanged
    };
})();var CommentsDispatcher = (function() {
    var _this = this;

    this.options = {
        REQUEST_INTERVAL: 100,
        batchConfig: {
            comments: {
                url: 'rest/v3/comments/batch?itemIds=',
                type: 'GET'
            },
            canAdd: {
                url: 'rest/v3/comments/canAdd/batch?itemIds=',
                type: 'GET'
            }
        }
    };

    this.batchRequests = {};

    Object.keys(this.options.batchConfig).forEach(function(e) {
        this.batchRequests[e] = {
            queue: []
        };
    });

    this.requestInterval;

    this.performRequest = function() {
        Object.keys(_this.options.batchConfig).forEach(function(e) {
            var batchConfig = _this.options.batchConfig[e];
            var batchRequests = _this.batchRequests[e];
            if (batchRequests.queue.length > 0) {
                var queue_length = Math.ceil(batchRequests.queue.map(function(e) { return e.itemId; }).join('%2C').length/1900); //URL length limitation
                if (queue_length > 1) {
                    queue_length = Math.floor(batchRequests.queue.length/queue_length);
                } else {
                    queue_length = batchRequests.queue.length;
                }
                var currentRequests = Array().concat(batchRequests.queue.slice(0, queue_length));
                batchRequests.queue = batchRequests.queue.slice(queue_length);
                jQuery.ajax({
                    url: batchConfig.url + currentRequests.map(function(e) { return e.itemId; }).join('%2C'),
                    type: batchConfig.type,
                    success: function(data) {
                        Object.keys(data).forEach(function(id) {
                            currentRequests.filter(function(e) {
                                return e.itemId == id;
                            }).forEach(function(e) {
                                e.callback(data[id]);
                            });
                        });
                    },
                    error: function(jqXHR) {
                        if (jqXHR.isRetry) {
                            batchRequests.queue = batchRequests.queue.concat(currentRequests);
                        }
                    }
                });
            }
        });
    };

    this.addRequest = function(batch, itemId, callback) {
        _this.batchRequests[batch].queue.push({
            itemId: itemId,
            callback: callback
        });
    };

    this.init = function() {
        _this.requestInterval = setInterval(function() {
            _this.performRequest();
        }, _this.options.REQUEST_INTERVAL);
    };

    init();

    return {
        loadComment: function(itemId, callback) {
            _this.addRequest('comments', itemId, callback);
        },
        loadCanAdd: function(itemId, callback) {
            _this.addRequest('canAdd', itemId, callback);
        }
    };
})();/**
 * The UPSA comments module
 *
 * The comments are expected to have the following structure:
 * comment {
 *      commentId,
 *      notes,
 *      userId,
 *      userName,
 *      createdDate,
 *      action { id, name or description },
 *      allowDelete,
 *      newComment
 * }
 *
 * @author Maksim_Golunko@epam.com
 * @version 1.0
 * @param {Object} options
 */

function CommentsModule(options) {
    options.initialCanAddNew = options.canAddNew;
    options.canAddNew = false;

    var _this = this;
    _this.options = jQuery.extend({
        isCrypto: false, //is comment field encrypted. It is used for validation
        lengthLimit: 4000, // max comment length bytes. It is used for validation
        canAddNew: false, //is comment add field should be drawn
        popupAddCommentStyle: false, //is comment add field should be drawn in popup
        canDelete: false, //is delete comment icon should be drawn
        itemId: "", // comments item id (ex. IM Request id), required for default comment add implementation

        getComments: function () { // function that should always return actual list of comments
            return [];             // if comment addition is enabled, new comments will be inserted like
        },                         // getComments().unshift(newComment)

        saveComment: function (comment, callback) {             // function that is called with new comment
            jQuery('#' + _this.options.popupId)                 // after validations is complete
                    .find('.' + _this.options.addButtonClass)   // it is required to call provided callback function
                    .prop('disabled', true);                    // after the comment has been saved
            jQuery.ajax({
                type: "POST",
                url: "rest/comments",
                contentType: "application/json",
                data: JSON.stringify(comment),
                success: function() {
                    jQuery('#' + _this.options.popupId)
                            .find('.' + _this.options.addButtonClass)
                            .prop("disabled", false);
                    callback.apply(this, arguments);
                }
            });
        },
        deleteComment: function (comment, callback) {
 // function that is called with comment to be deleted
            jQuery.ajax({                             // it is required to call provided callback function
                type: "DELETE",                       // after the comment has been deleted
                url: "rest/comments/" + comment.commentId,
                success: callback
            });
        },
        markSeen: function (comment, callback) { // function that is called with last seen comment
            jQuery.ajax({                        // it is required to call provided callback function
                type: "PUT",                     // after the comment has been marked as seen
                url: "rest/comments/" + comment.commentId + "/markSeen",
                success: callback
            });
        },
        onIconClick: function () {                          // function to be called on comments bubble click
            if (_this.options.getComments().length > 0
                || (_this.options.popupAddCommentStyle && _this.options.canAddNew)) {   // it should probably open new popup by commentsModule.showPopup()
                _this.showPopup();
            }
        },

        popupId: "commentsModule",
        inputId: "commentAddInput",
        trashBtnWrapperId: "trashBtnWrapper",
        openPopupText: "Show all comments",
        popupTitleText: "Comments",
        closeButtonTitle: "Close",
        addButtonValue: "Add Comment",
        addFieldHint: "Enter the text for a new comment",
        addIconHint: "Add Comment",
        deleteCommentHint: "Delete Comment",
        noCommentTextAlert: "Please enter a comment",
        noCommentsMessage: "No Comments",
        showAllButtonValue: "Show all",

        actionBlockClass: "comment-action",
        addButtonClass: "modernButton",
        addFieldClass: "modernInput box-sizing comment-add-field",
        addIconClass: "comment-add-icon icon-ok",
        addIconContainerClass: "comment-icon-container",
        bodyClass: "comment-body",
        buttonContainerClass: "comment-button-container",
        closeButtonClass: "closePopupButton",
        commentClass: "comment",
        commentNewClass: "comment-new",
        commentIconBaseClass: "icon-comment",
        commentIconClass: "comment-icon",
        commentNoIconClass: "comment-icon-no",
        commentEmptyIconClass: "icon-comment-alt",
        commentNotClickableClass: "comment-icon-not-clickable",
        commentNewIconClass: "comment-icon-new",
        commentIconContainerClass: "comment-icon-container",
        commentsContainerClass: "comment-list-container",
        commentsEmptyContainerClass: "comments-list-container-empty",
        commentTitleClass: "comment-title",
        contentClass: "modernPopup-content",
        dateClass: "comment-date",
        deleteButtonClass: "comment-delete",
        deleteCommentConfirmMessage: "",
        employeeNameClass: "comment-employee-name",
        employeeNameAutoUserClass: "comment-employee-name_autouser",
        fieldContainerClass: "comment-field-container",
        footerClass: "modernPopup-footer min",
        loaderClass: "loaderImg",
        photoClass: "comment-photo",
        popupClass: "modernPopup",
        titleClass: "modernPopup-title",
        trashBtnWrapperClass: "comment-trash-btn",

        displayAsHint: false,
        newCommentDays: 3
    }, options || {});

    this.markOldComments();
    this.checkCanAdd();
}

CommentsModule.prototype.drawLastComment = function (container) {
    var comments = this.options.getComments();
    var addCommentLink = jQuery('<a></a>')
        .attr("href", "#")
        .click(function(commentsBlock) {
            return function() {
                commentsBlock.showPopup(commentsBlock.options.canAddNew, false, true);
            };
        }(this))
        .html(this.options.addButtonValue);
    if (comments && comments.length) {
        var lastComment = this._getComment(comments[0]).jQuery();
        this._bindOnHoverEventHandler(lastComment);
        this.drawCommentIcon(lastComment.find("." + this.options.commentTitleClass));
        if (this.options.canAddNew && !this.options.popupAddCommentStyle) {
            addCommentLink.appendTo(lastComment);
        }
        container.html(lastComment);
        if (comments[0].newComment) {
            this.options.markSeen(comments[0], jQuery.noop);
        }
    } else {
        this.drawCommentIcon(container.empty());
        if (this.options.canAddNew && !this.options.popupAddCommentStyle) {
            addCommentLink.appendTo(container);
        }
    }
    this._lastCommentContainer = container;
};

CommentsModule.prototype.drawCommentIcon = function (container) {
    var iconContainer = this._drawIcon().jQuery();
    if (this.options.displayAsHint) {
        this._bindShowHintEventHandler(iconContainer);
    } else {
        this._bindOpenPopupEventHandler(iconContainer);
    }
    container.prepend(iconContainer);
    this._commentIconContainer = container;
};

CommentsModule.prototype.drawAddCommentField = function (container) {
    var inputContainer = this._getAddCommentField().jQuery();
    this._bindCommentAddEventHandler(inputContainer);
    container.prepend(inputContainer);
};

CommentsModule.prototype.showPopup = function (canAdd, drawComments, drawInput) {
    var options = this.options;
    var commentsList = this._getCommentList();

    canAdd = typeof canAdd !== "undefined" ? canAdd : options.canAddNew;
    drawComments = typeof drawComments !== "undefined" ? drawComments : true;
    drawInput = typeof drawInput !== "undefined" ? drawInput : options.popupAddCommentStyle;

    var popup = this._buildPopup(commentsList, drawComments).jQuery();
    this._bindPopupEventsHandler(popup);

    if (canAdd && drawInput) {
        this.drawAddCommentField(popup.find("." + options.commentsContainerClass));
    }

    this._hidePopup(); //close previously opened popup
    jQuery("body").append(popup);

    if (options.postprocess) {
        options.postprocess();
    }
    this._popupContainer = popup;

    this._displayPopup();
};

CommentsModule.prototype.closePopup = function () {
    this._hidePopup();
};

CommentsModule.prototype.saveComment = function () {
    var _this = this;
    var options = _this.options;
    var comment = {itemId: options.itemId, actionId: null};
    var input = jQuery("#" + options.inputId + (options.itemId ? '_' + options.itemId : ''));
    var text = jQuery.trim(input.val());
    if (text) {
        comment.notes = text;
        var loaderImg = new DOMBuilder("div", {"class": options.loaderClass}).jQuery();
        input.parent().find("." + options.buttonContainerClass).prepend(loaderImg);
        options.saveComment(comment, function (newComment) {
            _this._drawNewComment(newComment);
            loaderImg.remove();
            input.val("");
            _this._hidePopup();
        });
    } else {
        alert(options.noCommentTextAlert);
    }
};

CommentsModule.prototype.deleteComment = function (comment) {
    var _this = this;
    var confirmation = this.options.deleteCommentConfirmMessage;
    if (!!confirmation && !confirm(confirmation)) {
        return;
    }
    this.options.deleteComment(comment, function () {
        var comments = _this.options.getComments();
        var index = jQuery.inArray(comment, comments);
        comments.splice(index, 1);
        _this._redrawComments();
        if (_this._popupContainer) {
            var commentDiv = _this._popupContainer.find("#" + comment.commentId);
            commentDiv.hide("blind", {direction: "up"}, 500, function () {
                jQuery(this).remove();
            });
        }
        if (comments.length === 0) {
            _this.closePopup();
        }
    });
};

CommentsModule.prototype.markOldComments = function() {
    var now = new Date();
    var options = this.options;
    options.getComments().filter(function(c) { return c.newComment; }).forEach(function(c) {
        var date = new Date(c.createdDate);
        var days = (now - date) / (24 * 60 * 60 * 1000);
        if (days > options.newCommentDays) {
            options.markSeen(c);
            c.newComment = false;
        }
    });
};

CommentsModule.prototype.checkCanAdd = function() {
    var _this = this;
    CommentsDispatcher.loadCanAdd(this.options.itemId, function(data) {
        _this.options.canAddNew = _this.options.initialCanAddNew && !!data;
        if (_this.options.canAddNew !== _this.options.initialCanAddNew) {
            _this._redrawComments();
        }
    });
};

CommentsModule.prototype._drawNewComment = function (comment) {
    this.options.getComments().unshift(comment);
    this._redrawComments();
    if (this._popupContainer) {
        var commentDiv = this._getComment(comment).jQuery().hide();
        this._bindOnHoverEventHandler(commentDiv);
        let comments = this._popupContainer.find("." + this.options.commentClass);
        if (comments.length > 0) {
            comments.filter(":first").before(commentDiv);
        } else {
            this._popupContainer.find("." + this.options.commentsContainerClass).append(commentDiv);
        }
        commentDiv.show("blind", {direction: "up"}, 500);
    }
};

CommentsModule.prototype._redrawComments = function () {
    if (this._lastCommentContainer) {
        this.drawLastComment(this._lastCommentContainer);
    } else if (this._commentIconContainer) {
        this.drawCommentIcon(this._commentIconContainer.empty());
    }
};

CommentsModule.prototype._drawIcon = function () {
    var options = this.options;
    var comments = options.getComments();
    var iconContainer = new DOMBuilder("div", {"class": options.commentIconContainerClass});
    var icon = new DOMBuilder("i", {"class": options.commentIconClass, title: options.openPopupText});
    icon.appendAttr("class", options.commentIconBaseClass);
    if (comments && comments.length) {
        if (this.util._hasNewComments(comments)) {
            icon.appendAttr("class", options.commentNewIconClass);
        }
        iconContainer.appendChild(comments.length + "&nbsp&nbsp");
    } else {
        icon.appendAttr("class", options.commentNoIconClass);
        if(!(options.popupAddCommentStyle && options.canAddNew)){
            icon.appendAttr("class", options.commentNotClickableClass);
        }
    }
    iconContainer.appendChild(icon);
    return iconContainer;
};

CommentsModule.prototype._getCommentTitle = function (comment) {
    var options = this.options;
    var title = new DOMBuilder("div", {"class": options.commentTitleClass});

    var firstWrapper = new DOMBuilder("div", {"style": "display: inline-block;"});

    var employeePhotoImg = new DOMBuilder("img", {src: this.util._getEmployeePhotoLink(comment.userId)});
    var employeePhoto = new DOMBuilder("div", {"class": options.photoClass}, new DOMBuilder("div", {}, new DOMBuilder("div", {}, employeePhotoImg)));

    var employeeName;
    if (comment.autouser) {
        employeeName = new DOMBuilder("span", {"class": options.employeeNameAutoUserClass}, comment.userName );
    } else {
        employeeName = new DOMBuilder("a", {"class": options.employeeNameClass, href: this.util._getEmployeeProfileLink(comment.userId)}, comment.userName);
    }

    firstWrapper.appendChild(employeePhoto).appendChild(employeeName);
    title.appendChild(firstWrapper);

    var secondWrapper = new DOMBuilder("div", {"style": "display: inline-block; float: right"});
    var trashBtnWrapper = new DOMBuilder("span", {"class": options.trashBtnWrapperClass, "id": options.trashBtnWrapperId});
    var date = new DOMBuilder("span", {"class": options.dateClass}, this.util._formatDate(comment.createdDate));
    secondWrapper.appendChild(trashBtnWrapper).appendChild(date);
    title.appendChild(secondWrapper);

    if (typeof comment.action !== 'undefined' && comment.action.id) {
        var actionBlock = new DOMBuilder("div", {"class": options.actionBlockClass}, this.util._getActionName(comment));
        title.appendChild(actionBlock);
    }
    return title;
};

CommentsModule.prototype._getCommentBody = function (comment) {
    var body = new DOMBuilder("div", {"class": this.options.bodyClass}, this.util._escape(comment.notes));
    return body;
};

CommentsModule.prototype._getComment = function (comment) {
    var options = this.options;
    var commentDiv = new DOMBuilder("div", {"class": options.commentClass, "id": comment.commentId});
    commentDiv.appendChild(this._getCommentTitle(comment)).appendChild(this._getCommentBody(comment));
    if (comment.newComment) {
        commentDiv.appendAttr("class", options.commentNewClass);
    }
    return commentDiv;
};

CommentsModule.prototype._getCommentList = function () {
    var options = this.options;
    var comments = options.getComments();
    var commentsContainer = new DOMBuilder("div", {"class": options.commentsContainerClass});
    for (var i = 0; i < comments.length; i++) {
        commentsContainer.appendChild(this._getComment(comments[i]));
    }
    return commentsContainer;
};

CommentsModule.prototype._getAddCommentField = function () {
    var suffix = (this.options.itemId ? '_' + this.options.itemId : '');
    var fieldContainer = new DOMBuilder("div", {"class": this.options.fieldContainerClass, "id": "inputContainer" + suffix});
    var input = new DOMBuilder("textarea", {"class": this.options.addFieldClass, id: this.options.inputId + suffix});
    var buttonContainer = new DOMBuilder("div", {"class": this.options.buttonContainerClass});
    var button = new DOMBuilder("input", {type: "button", "class": this.options.addButtonClass, value: this.options.addButtonValue});
    buttonContainer.appendChild(button);
    fieldContainer.appendChild(input).appendChild(buttonContainer);
    return fieldContainer;
};

CommentsModule.prototype._buildPopup = function (content, drawComments) {
    var options = this.options;
    var popup = new DOMBuilder("div", {"class": options.popupClass, "id": options.popupId});
    var title = this._buildPopupTitle();
    var body = this._buildPopupContent(content, drawComments);
    var footer = this._buildPopupFooter();
    popup.appendChild(title).appendChild(body).appendChild(footer);
    return popup;
};

CommentsModule.prototype._buildPopupTitle = function () {
    var options = this.options;
    var title = new DOMBuilder("div", {"class": options.titleClass});
    title.appendChild(options.popupTitleText);
    var button = new DOMBuilder("div", {"class": options.closeButtonClass, "title": options.closeButtonTitle});
    title.appendChild(button);
    return title;
};

CommentsModule.prototype._buildPopupContent = function (content, drawComments) {
    content = content.content.length === 0 && !this.options.canAddNew ? this._buildEmptyContent() : content;
    content = drawComments ? content : new DOMBuilder("div", {"class": this.options.commentsContainerClass});
    var body = new DOMBuilder("div", {"class": this.options.contentClass}, content);
    return body;
};

CommentsModule.prototype._buildEmptyContent = function() {
    var inner = new DOMBuilder("div", { "class": this.options.commentsEmptyContainerClass }, this.options.noCommentsMessage);
    var outer = new DOMBuilder("div", {"class": this.options.commentsContainerClass}, inner);
    return outer;
};

CommentsModule.prototype._buildPopupFooter = function () {
    var footer = new DOMBuilder("div", {"class": this.options.footerClass});
    return footer;
};

CommentsModule.prototype._displayPopup = function () {
    jQuery('#' + this.options.popupId).createWin({esc: true});
    this._updateCommentsSeenStatus();
};

CommentsModule.prototype._updateCommentsSeenStatus = function() {
    var comments = this.options.getComments();
    if (comments && comments.length && this.util._hasNewComments(comments)) {
        this.options.markSeen(comments[0], jQuery.noop);
        this.util._markCommentsSeen(comments);
    }
    this._redrawComments();
};

CommentsModule.prototype._hidePopup = function () {
    jQuery('#' + this.options.popupId).closeWin().remove();
};

CommentsModule.prototype._bindOpenPopupEventHandler = function (object) {
    var _this = this;
    object.click(function () {
        _this.options.onIconClick();
    });
};

CommentsModule.prototype._bindShowHintEventHandler = function (object) {
    var _this = this;
    jQuery(object).qtip("destroy");
    jQuery(object).qtip({
        content: {
            text: function(event, api) {
                var commentsList = _this._getCommentList();
                var hint = _this._buildHint(commentsList, true).jQuery();

                _this._popupContainer = hint;

                return jQuery('<div></div>').append(hint.clone()).html();
            }
        },
        position: {
            my: 'right center',
            at: 'left center',
            viewport: jQuery(window)
        },
        show: {
            when: 'hover',
            solo: true
        },
        hide: 'unfocus',
        style: {
            classes: 'qtip-light qtip-shadow',
            width: 400
        },
        events: {
            visible: function(event, api) {
                var hint = jQuery('#' + _this.options.popupId + '_' + _this.options.itemId);

                var inputContainer = jQuery('#inputContainer' + '_' + _this.options.itemId);

                _this._bindCommentAddEventHandler(inputContainer);

                _this._bindCommentChangeEventHandler(inputContainer);

                _this._bindCloseHintEventHandler(hint, hint.find("." + _this.options.closeButtonClass));
                
                _this._bindOnHoverEventHandler(hint.find("." + _this.options.commentClass.replace(/\s+/g, '.')));

                _this._bindShowMoreEventHandler(hint.find("." + _this.options.footerClass.replace(/\s+/g, '.')));
            }
        }
    });
};

CommentsModule.prototype._buildHint = function(content, drawComments) {
    var options = this.options;
    var hint = new DOMBuilder("div", {"id": options.popupId + '_' + options.itemId});
    var header = this._buildPopupTitle();
    var body = this._buildPopupContent(content, drawComments);
    var footer = this._buildHintFooter(content, drawComments);
    hint.appendChild(header);
    if (options.canAddNew && options.popupAddCommentStyle) {
        var inputContainer = this._buildHintCommentField();
        hint.appendChild(inputContainer);
    }
    hint.appendChild(body).appendChild(footer);
    return hint;
};

CommentsModule.prototype._buildHintFooter = function(content, drawComments) {
    var options = this.options;
    var footer = null;
    if (content.content.length > 3 && drawComments) {
        footer = new DOMBuilder("div", {"id": "commentFooter" + '_' + options.itemId, "class": options.footerClass});
        var showMoreButton = new DOMBuilder("a", {href: "#"}, this.options.showAllButtonValue);
        footer.appendChild(showMoreButton);
    }
    return footer;
};

CommentsModule.prototype._buildHintCommentField = function() {
    var suffix = (this.options.itemId ? '_' + this.options.itemId : '');
    var fieldContainer = new DOMBuilder("div", {"class": this.options.fieldContainerClass, "id": "inputContainer" + suffix});
    var input = new DOMBuilder("textarea", {"class": this.options.addFieldClass, id: this.options.inputId + suffix});
    var iconContainer = new DOMBuilder("div", {"class": this.options.addIconContainerClass});
    var icon = new DOMBuilder("i", {"class": this.options.addIconClass, "title": this.options.addIconHint});
    iconContainer.appendChild(icon);
    fieldContainer.appendChild(input).appendChild(iconContainer);
    return fieldContainer;
};

CommentsModule.prototype._bindCommentChangeEventHandler = function(container) {
    var icon = container.find("." + this.options.addIconClass.replace(/\s+/g, '.'));
    container.find("." + this.options.addFieldClass.replace(/\s+/g, '.')).keyup(function() {
        if (this.clientHeight < this.scrollHeight) {
            icon.css('left', '-25px');
        }
        else {
            icon.css('left', '-7px');
        }

    });
};

CommentsModule.prototype._bindShowMoreEventHandler = function(container) {
    var _this = this;
    container.find("a").click(function() {
        jQuery(this).parents('[id^="' + _this.options.popupId + '"]').find("." + _this.options.commentClass).show();
        jQuery(this).parent().hide();
    });
};

CommentsModule.prototype._bindPopupEventsHandler = function (popup) {
    this._bindClosePopupEventHandler(popup.find("." + this.options.closeButtonClass));
    this._bindOnHoverEventHandler(popup.find("." + this.options.commentClass));
};

CommentsModule.prototype._bindOnHoverEventHandler = function (comment) {
    var hoverFunctions = this._getHoverFunctions();
    comment.on("mouseenter", hoverFunctions[0]).on("mouseleave", hoverFunctions[1]);
};

CommentsModule.prototype._bindClosePopupEventHandler = function (object) {
    var _this = this;
    object.click(function () {
        _this.closePopup();
    });
};

CommentsModule.prototype._bindCloseHintEventHandler = function (hint, object) {
    object.click(function () {
        hint.parents(".qtip").qtip('api').hide();
    });
};

CommentsModule.prototype._bindCommentAddEventHandler = function (container) {
    var _this = this;
    var jInputField = container.find("." + this.options.addFieldClass.replace(/\s+/g, '.'));

    jInputField.attr('placeholder', this.options.addFieldHint);
    UTF_LENGTH_VALIDATOR.addValidator(jInputField, this.options.lengthLimit, this.options.isCrypto);

    container.find("." + this.options.addButtonClass.replace(/\s+/g, '.') + ", ." + this.options.addIconClass.replace(/\s+/g, '.')).click(function () {
        _this.saveComment();
    });
};

CommentsModule.prototype._getHoverFunctions = function () {
    var _this = this;
    var options = _this.options;

    var onOver = function () {
        var commentDiv = jQuery(this);
        var id = commentDiv.attr("id");
        var comment = _this.util._getCommentById(id, options.getComments());
        if (comment) {
            comment.newComment = false;
            commentDiv.removeClass(options.commentNewClass);

            if (options.canDelete && comment.allowDelete && commentDiv.find("." + options.deleteButtonClass).length == 0) {
                var deleteButton = new DOMBuilder("span", {"class": options.deleteButtonClass, "title": options.deleteCommentHint}).jQuery().click(function () {
                    _this.deleteComment(comment);
                });
                commentDiv.find("#" + options.trashBtnWrapperId).append(deleteButton);
            }
        }
    };

    var onOut = function () {
        jQuery(this).find("." + options.deleteButtonClass).remove();
    };

    return [onOver, onOut];
};

CommentsModule.prototype.util = {
    _getEmployeeProfileLink: function (employeeId) {
        return "employeeView.do?employeeId=" + employeeId;
    },

    _getEmployeePhotoLink: function (employeeId) {
        return "photo/" + employeeId;
    },

    _formatDate: function (commentDate) {
        if (commentDate instanceof Date) {
            return jQuery.datepicker.formatDate("dd-M-yy", commentDate);
        } else {
            return commentDate;
        }
    },

    _getActionName: function (comment) {
        return comment.action.description || comment.action.name;
    },

    _hasNewComments: function (comments) {
        for (var i = 0; i < comments.length; comments++) {
            if (comments[i].newComment) {
                return true;
            }
        }
        return false;
    },

    _markCommentsSeen: function (comments) {
        for (var i = 0; i < comments.length; comments++) {
            comments[i].newComment = false;
        }
    },

    _getCommentById: function (id, comments) {
        if (comments && comments.length) {
            for (var i = 0; i < comments.length; i++) {
                if (comments[i].commentId == id) {
                    return comments[i];
                }
            }
        }
        return null;
    },

    _escape: function(str) {
        return str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
    }
};
var notEmptyCommentItemIds = [];

function initCommentsModule(itemId, targetId, canDelete, canAdd, iconOnly, options) {
    if (itemId != null && itemId.length !== 0) {
        canAdd = typeof canAdd === 'undefined' || canAdd==="false" ? false : canAdd==="true" ? true : canAdd;
        canDelete = typeof canDelete === 'undefined' || canDelete==="true" ? true : canDelete==="false" ? false : canDelete;
        iconOnly = typeof iconOnly === 'undefined' || iconOnly==="false" ? false : iconOnly==="true" ? true : iconOnly;

        CommentsDispatcher.loadComment(itemId, function (commentsJson) {
            if (commentsJson.length) {
                notEmptyCommentItemIds.push(itemId);
            }
            var comments = commentsJson;

            var extendedOptions = jQuery.extend({
                getComments: function() { return comments; },
                canAddNew : canAdd,
                canDelete: canDelete,
                itemId: itemId,
                popupAddCommentStyle: true
            }, options || {});

            var commentModule = new CommentsModule(extendedOptions);
            if (iconOnly) {
                commentModule.drawCommentIcon(jQuery("#" + targetId).empty());
            } else {
                commentModule.drawLastComment(jQuery("#" + targetId));
            }
        });
    }
}
;/*!
 * jquery.base64.js 0.0.3 - https://github.com/yckart/jquery.base64.js
 * Makes Base64 en & -decoding simpler as it is.
 *
 * Based upon: https://gist.github.com/Yaffle/1284012
 *
 * Copyright (c) 2012 Yannick Albert (http://yckart.com)
 * Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php).
 * 2013/02/10
 **/
;(function($) {

    var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        a256 = '',
        r64 = [256],
        r256 = [256],
        i = 0;

    var UTF8 = {

        /**
         * Encode multi-byte Unicode string into utf-8 multiple single-byte characters
         * (BMP / basic multilingual plane only)
         *
         * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars
         *
         * @param {String} strUni Unicode string to be encoded as UTF-8
         * @returns {String} encoded string
         */
        encode: function(strUni) {
            // use regular expressions & String.replace callback function for better efficiency
            // than procedural approaches
            var strUtf = strUni.replace(/[\u0080-\u07ff]/g, // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz
            function(c) {
                var cc = c.charCodeAt(0);
                return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);
            })
            .replace(/[\u0800-\uffff]/g, // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz
            function(c) {
                var cc = c.charCodeAt(0);
                return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);
            });
            return strUtf;
        },

        /**
         * Decode utf-8 encoded string back into multi-byte Unicode characters
         *
         * @param {String} strUtf UTF-8 string to be decoded back to Unicode
         * @returns {String} decoded string
         */
        decode: function(strUtf) {
            // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!
            var strUni = strUtf.replace(/[\u00e0-\u00ef][\u0080-\u00bf][\u0080-\u00bf]/g, // 3-byte chars
            function(c) { // (note parentheses for precence)
                var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);
                return String.fromCharCode(cc);
            })
            .replace(/[\u00c0-\u00df][\u0080-\u00bf]/g, // 2-byte chars
            function(c) { // (note parentheses for precence)
                var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;
                return String.fromCharCode(cc);
            });
            return strUni;
        }
    };

    while(i < 256) {
        var c = String.fromCharCode(i);
        a256 += c;
        r256[i] = i;
        r64[i] = b64.indexOf(c);
        ++i;
    }

    function code(s, discard, alpha, beta, w1, w2) {
        s = String(s);
        var buffer = 0,
            i = 0,
            length = s.length,
            result = '',
            bitsInBuffer = 0;

        while(i < length) {
            var c = s.charCodeAt(i);
            c = c < 256 ? alpha[c] : -1;

            buffer = (buffer << w1) + c;
            bitsInBuffer += w1;

            while(bitsInBuffer >= w2) {
                bitsInBuffer -= w2;
                var tmp = buffer >> bitsInBuffer;
                result += beta.charAt(tmp);
                buffer ^= tmp << bitsInBuffer;
            }
            ++i;
        }
        if(!discard && bitsInBuffer > 0) result += beta.charAt(buffer << (w2 - bitsInBuffer));
        return result;
    }

    var Plugin = $.base64 = function(dir, input, encode) {
            return input ? Plugin[dir](input, encode) : dir ? null : this;
        };

    Plugin.btoa = Plugin.encode = function(plain, utf8encode) {
        plain = Plugin.raw === false || Plugin.utf8encode || utf8encode ? UTF8.encode(plain) : plain;
        plain = code(plain, false, r256, b64, 8, 6);
        return plain + '===='.slice((plain.length % 4) || 4);
    };

    Plugin.atob = Plugin.decode = function(coded, utf8decode) {
        coded = coded.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        coded = String(coded).split('=');
        var i = coded.length;
        do {--i;
            coded[i] = code(coded[i], true, r64, a256, 6, 8);
        } while (i > 0);
        coded = coded.join('');
        return Plugin.raw === false || Plugin.utf8decode || utf8decode ? UTF8.decode(coded) : coded;
    };
}(jQuery));
var isIE = (navigator.userAgent.indexOf("MSIE")!==-1 && navigator.userAgent.indexOf("Opera")===-1);
function showSkillsDialog(address) {
    url=address;
    for (var i = 0; i < document.forms.length; i++) {
        for (var j = 0; j < document.forms[i].elements.length; j++) {
            if (document.forms[i].elements[j].type === 'select-one') {
                document.forms[i].elements[j].style.visibility = 'hidden';
            }
        }
    }
    jQuery("#showSkillsDialog").createWin();
}

function hideSkillsDialog() {
    for (var i = 0; i < document.forms.length; i++) {
        for (var j = 0; j < document.forms[i].elements.length; j++) {
            if (document.forms[i].elements[j].type === 'select-one') {
                document.forms[i].elements[j].style.visibility = 'visible';
            }
        }
    }
    jQuery("#showSkillsDialog").closeWin();
    jQuery("#checkAllSkills").prop("checked", true);
    jQuery("#overview").prop("checked", false);
    doCheckAllSkills();
}

function documentHeight() {
    var bodyNodes = document.body.childNodes;
    var docHeight = 0;
    for (var i = 0; i < bodyNodes.length; i++) {
        if (bodyNodes[i].clientHeight) {
            docHeight = docHeight + bodyNodes[i].clientHeight;
        }
    }
    if (docHeight < document.body.clientHeight) {
        docHeight = document.body.clientHeight;
    }
    return docHeight;
}

function doCheckAllSkills() {
    var checkAll = jQuery("#checkAllSkills").prop("checked");
    jQuery("input[name^=checkSkill]:checkbox").prop("checked", checkAll);
}

function doCheckSkill() {
    var status=1;
    jQuery("input[name^=checkSkill]:checkbox").each(
        function() {
           if (!this.checked) {
               status = 2;
           }
        }
    );
    if(status === 1) {
        jQuery("#checkAllSkills").prop("checked", true);
        doCheckAllSkills();
    } else {
        jQuery("#checkAllSkills").prop("checked", false);
    }
}


;var CORPORATE_CV = CORPORATE_CV || {};

CORPORATE_CV.showDialog = function() {
    showPageLocker();
    jQuery("#corporateCvDialog").createWin();
};

CORPORATE_CV.hideDialog = function() {
    hidePageLocker();
    jQuery("#corporateCvDialog").find("#checkAllSkillLevels").prop("checked", true);
    jQuery("#corporateCvDialog").closeWin();
    CORPORATE_CV.toogleAllSkillLevels();
};

CORPORATE_CV.toogleAllSkillLevels = function() {
    var checkAll = jQuery("#corporateCvDialog").find("#checkAllSkillLevels").prop("checked");
    jQuery("input[name^=checkSkillLevel]:checkbox").prop("checked", checkAll);
};

CORPORATE_CV.toogleSkillLevel = function() {
    var dialog = jQuery("#corporateCvDialog");
    var allSkillsCheckbox = dialog.find("#checkAllSkillLevels");
    var skillLevelCheckboxes = dialog.find("input[name^=checkSkillLevel]:checkbox");

    for (var i = 0; i < skillLevelCheckboxes.length; i++) {
        if (!skillLevelCheckboxes.get(i).checked) {
            allSkillsCheckbox.prop("checked", false);
            return;
        }
    }
    allSkillsCheckbox.prop("checked", true);

    skillLevelCheckboxes.each(
        function() {
            if (!this.checked) {
                allSkillsCheckbox.prop("checked", false);
            }
        }
    );
};

CORPORATE_CV.generateCv = function() {
    var form = CORPORATE_CV._createForm();
    CORPORATE_CV._setCSRF(form);
    CORPORATE_CV._setEmployeeIds(form);
    CORPORATE_CV._setShowOverview(form);
    CORPORATE_CV._setSkillLevels(form);
    CORPORATE_CV._setProjectName(form);
    form.submit();
    CORPORATE_CV._destroyForm(form);
    CORPORATE_CV.hideDialog();
    return true;
};

CORPORATE_CV._createForm = function() {
    var form = document.createElement("form");
    form.target = '_blank';
    form.method = "POST";
    form.action = "export2CorporateCv.docx";
    document.body.appendChild(form);
    return form;
};

CORPORATE_CV._setCSRF = function(form) {
    var CsrfInput = document.createElement("input");
    CsrfInput.name = '_csrf';
    CsrfInput.value = jQuery("meta[name='_csrf']").attr("content");
    CsrfInput.type = 'hidden';
    form.appendChild(CsrfInput);
};

CORPORATE_CV._setShowOverview = function(form) {
    var overviewChecked = jQuery("#employeeCvOverview").prop('checked');
    var overviewInput = document.createElement("input");
    overviewInput.name = 'showOverview';
    overviewInput.value = overviewChecked;
    overviewInput.type = 'hidden';
    form.appendChild(overviewInput);
};

CORPORATE_CV._setEmployeeIds = function(form) {
    var employeeIds = CORPORATE_CV._gatherEmployeeIds();
    for (var i = 0; i < employeeIds.length; i++) {
        var employeeId = document.createElement("input");
        employeeId.name = 'employeeIds';
        employeeId.value = employeeIds[i];
        employeeId.type = 'hidden';
        form.appendChild(employeeId);
    }
};

CORPORATE_CV._gatherEmployeeIds = function() {
    var resultEmployeeIds = [];
    var employeeViewForm = jQuery("form[name='employeeViewForm']");
    if (typeof employeeViewForm[0] !== 'undefined') {
        // if on employee view page
        var employeeId = employeeViewForm.find("input:hidden[name='employeeId']").attr('value');
        resultEmployeeIds.push(employeeId);
    } else {
        // if on resplan view page
        jQuery("input[name^=positions]:checkbox, input[name^=members]:checkbox").each(
            function() {
                if (this.checked) {
                    var checkbox = jQuery(this);
                    var employeeId = checkbox.parent().find('.employeeId').attr('value');
                    if (typeof employeeId !== 'undefined' && employeeId !== '') {
                        resultEmployeeIds.push(employeeId);
                    }
                }
            }
        );
    }
    return resultEmployeeIds;
};

CORPORATE_CV._setSkillLevels = function(form) {
    jQuery("input[name^=checkSkillLevel]:checkbox").each(
        function () {
            if (this.checked) {
                var levelInput = document.createElement("input");
                levelInput.name = 'levels';
                levelInput.value = this.value;
                levelInput.type = 'hidden';
                form.appendChild(levelInput);
            }
        }
    );
};

CORPORATE_CV._setProjectName = function(form) {
    var resplanViewForm = jQuery("form[name='resplanViewForm']");
    if (typeof resplanViewForm[0] === 'undefined') {
        return;
    }
    var projectNameValue = resplanViewForm.find("input:hidden[name='projectName']").attr('value');
    var projectNameInput = document.createElement("input");
    projectNameInput.name = 'projectName';
    projectNameInput.value = projectNameValue;
    projectNameInput.type = 'hidden';
    form.appendChild(projectNameInput);
};

CORPORATE_CV._destroyForm = function(form) {
    document.body.removeChild(form);
};
if (typeof dwr == 'undefined' || dwr.engine == undefined) throw new Error('You must include DWR engine before including this file');

(function() {
if (dwr.engine._getObject("EmployeeView") == undefined) {
var p;

p = {};
p._path = '/workload/dwr';







p.getSortedEmployeeRelatedInfoTable = function(p0, p1, p2, callback) {
return dwr.engine._execute(p._path, 'EmployeeView', 'getSortedEmployeeRelatedInfoTable', arguments);
};





p.setEmployeeService = function(p0, callback) {
return dwr.engine._execute(p._path, 'EmployeeView', 'setEmployeeService', arguments);
};





p.getEmployeeCurrentProjects = function(p0, callback) {
return dwr.engine._execute(p._path, 'EmployeeView', 'getEmployeeCurrentProjects', arguments);
};






p.getEmployeePastWorkloadsBean = function(p0, p1, callback) {
return dwr.engine._execute(p._path, 'EmployeeView', 'getEmployeePastWorkloadsBean', arguments);
};

dwr.engine._setObject("EmployeeView", p);
}
})();

